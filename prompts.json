{
    "benchmark_run_name": "FullPageChallenge_v2_Set",
    "prompts": [
        {
            "prompt_id": "FPC001_Personal_Portfolio_Landing_Page",
            "prompt_description": "Design and implement a complete, responsive single-page personal portfolio landing page for a web developer named 'Alex Doe'. \n\n**Page Sections & Content:**\n1.  **Hero Section:** \n    *   A compelling headline (e.g., 'Alex Doe - Creative Web Developer').\n    *   A brief introductory paragraph.\n    *   A call-to-action button (e.g., 'View My Work') that smoothly scrolls to the 'Projects' section. This button should be identifiable for testing as `data-testid='cta-view-work'`. \n    *   Include a professional-looking placeholder image or illustration.\n2.  **About Me Section:**\n    *   A more detailed description of Alex's skills, experience, and passion for web development. \n    *   Consider a two-column layout for text and perhaps a smaller image or relevant icons representing skills.\n3.  **Projects Section (Identifiable as `projects-section` for scrolling):**\n    *   Showcase at least 3 fictional projects. Each project should be a 'card' displaying:\n        *   Project Title (e.g., 'E-commerce Platform Redesign').\n        *   A short description.\n        *   Technologies used (e.g., React, Node.js, Figma).\n        *   A link to 'View Project' (can be a '#' link). Each project card should be identifiable for testing with `data-testid='project-card-N'` (N being 1, 2, 3).\n4.  **Contact Section:**\n    *   A simple contact form with fields for 'Name', 'Email', and 'Message'. The form should be identifiable as `data-testid='contact-form'`. \n    *   Include a submit button. (No backend logic needed, just the front-end structure and basic client-side validation hints like `required` attributes).\n5.  **Footer:** \n    *   Copyright information (e.g., 'Â© [Current Year] Alex Doe').\n    *   Links to social media profiles (e.g., GitHub, LinkedIn - use placeholder icons and '#' links).\n\n**Technical & Accessibility Requirements:**\n*   The entire page MUST be structured with semantic HTML5 (header, nav (if any global nav), main, article, section, footer).\n*   A clear H1 for the main page title (likely in the Hero section).\n*   Heading hierarchy MUST be logical throughout the page.\n*   All images MUST have appropriate `alt` text.\n*   Interactive elements (buttons, links, form fields) MUST be keyboard accessible and have clear focus indicators.\n*   The page MUST be responsive across common device sizes (mobile, tablet, desktop).\n*   Smooth scrolling for the 'View My Work' CTA is required.\n*   Use Tailwind CSS for general layout and styling, but feel free to add minimal custom CSS in a `<style>` tag if necessary for unique design elements or animations that are hard to achieve with Tailwind alone (e.g., subtle hover effects on project cards, the smooth scroll implementation if not CSS-only).\n\n**Testing Identifiers (Ensure these are implemented):**\n*   Hero CTA button: `data-testid='cta-view-work'`\n*   Projects section (for scrolling target): `id='projects-section'` (Note: ID for scrolling, not data-testid unless also desired)\n*   Project cards: `data-testid='project-card-1'`, `data-testid='project-card-2'`, etc.\n*   Contact form: `data-testid='contact-form'`\n*   Main page navigation (if present): `data-testid='main-navigation'`",
            "viewports_to_test": {"desktop": [1440, 900], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Semantic Header", "selector": "body > header", "points": 2},
                {"type": "element_presence", "name": "Semantic Main", "selector": "body > main", "points": 2},
                {"type": "element_presence", "name": "Semantic Footer", "selector": "body > footer", "points": 2},
                {"type": "element_presence", "name": "H1 on Page", "selector": "h1", "points": 2},
                {"type": "element_presence", "name": "Hero CTA Button", "selector": "button[data-testid='cta-view-work']", "points": 3},
                {"type": "element_presence", "name": "Projects Section ID", "selector": "#projects-section", "points": 2},
                {"type": "element_count", "name": "Project Cards (min 3)", "selector": "[data-testid^='project-card-']", "min_count": 3, "points": 3},
                {"type": "element_presence", "name": "Contact Form", "selector": "form[data-testid='contact-form']", "points": 2},
                {"type": "interaction", "name": "Smooth Scroll to Projects", "points": 5,
                    "trigger_element": {"selector": "button[data-testid='cta-view-work']"}, "action": {"type":"click"}, "wait_for_outcome_ms":1500, 
                    "expected_outcomes": [
                        {"outcome_type": "element_in_viewport", "element_selector": "#projects-section"}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Logical Heading Order (Basic Check)", "script": "const headings = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6')); let prevLevel = 0; for (const h of headings) { const level = parseInt(h.tagName.substring(1)); if (level > prevLevel + 1 && prevLevel !==0) return false; prevLevel = level; } return true;", "points": 3, "note": "Simplified check; more robust checks are complex."},
                {"type": "custom_script_evaluates_true", "name": "All Images Have Alt Text", "script": "return Array.from(document.querySelectorAll('img')).every(img => img.alt && img.alt.trim() !== '');", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC002_Interactive_Recipe_Page",
            "prompt_description": "Create a feature-rich, responsive webpage for a recipe (e.g., 'Chocolate Lava Cakes'). The page should be highly interactive and user-friendly.\n\n**Page Structure & Content:**\n1.  **Recipe Header:** \n    *   Recipe Name (H1, identifiable as `data-testid='recipe-title'`).\n    *   A captivating image of the dish (ensure proper `alt` text).\n    *   Brief description, prep time, cook time, servings (e.g., 'Serves 4').\n2.  **Ingredients Section:**\n    *   A list of ingredients. Each ingredient should be a list item (`<li>`).\n    *   **Interactivity:** Allow users to check off ingredients as they gather them. Each `<li>` should contain a checkbox. Checking it should visually indicate completion (e.g., strikethrough text) and this state should be clearly communicated (e.g., `aria-checked` or a similar pattern for custom checkboxes).\n    *   The ingredients list container should be identifiable as `data-testid='ingredients-list'`.\n3.  **Instructions Section:**\n    *   Numbered steps for the recipe.\n    *   **Interactivity:** 'Timer' feature. For steps mentioning a time (e.g., 'Bake for 12-15 minutes'), include a small button next to the step (identifiable as `data-testid='timer-btn-stepX'`) that, when clicked, starts a countdown timer displayed on the page (identifiable as `data-testid='recipe-timer-display'`). The timer should visually update and provide an alert/notification when finished. Multiple timers should not interfere if started.\n4.  **Nutrition Information (Optional but good for TQ):**\n    *   A simple table displaying basic nutrition facts (calories, protein, fat, carbs).\n5.  **User Reviews/Comments (Structure Only):**\n    *   A section placeholder for user reviews, including a form to submit a new review (Name, Rating (1-5 stars - make these interactive, perhaps SVGs or radio buttons styled as stars), Comment).\n    *   The review submission form should be `data-testid='review-form'`.\n\n**Technical & Accessibility Requirements:**\n*   Full semantic HTML structure (header, main, article/section, aside (for nutrition?), footer).\n*   Responsive design ensuring readability and usability on all devices. The ingredients list and instructions must be easy to follow on mobile.\n*   All interactive elements (checkboxes, timer buttons, star ratings) MUST be fully keyboard accessible and provide clear visual feedback and ARIA states.\n*   The timer functionality requires JavaScript for countdown logic and notifications.\n*   If using Tailwind, supplement with custom CSS/JS for the interactive elements like the timer display, ingredient strikethrough, and star rating to ensure they meet the described UX and A11y.\n*   The page should be well-organized and visually appealing.\n\n**Testing Identifiers:**\n*   Recipe Title: `data-testid='recipe-title'`\n*   Ingredients List: `data-testid='ingredients-list'`\n*   Timer Button (example for step 1): `data-testid='timer-btn-step1'`\n*   Timer Display Area: `data-testid='recipe-timer-display'`\n*   Review Submission Form: `data-testid='review-form'`",
            "viewports_to_test": {"desktop": [1280, 1024], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Recipe Title", "selector": "h1[data-testid='recipe-title']", "points": 2},
                {"type": "element_presence", "name": "Ingredients List", "selector": "[data-testid='ingredients-list']", "points": 2},
                {"type": "element_count", "name": "Ingredients Items (min 3)", "selector": "[data-testid='ingredients-list'] li input[type='checkbox']", "min_count": 3, "points": 2, "note": "Checks for checkboxes within list items"},
                {"type": "element_presence", "name": "Example Timer Button", "selector": "[data-testid^='timer-btn-step']", "points": 2, "note": "Checks if at least one timer button exists"},
                {"type": "element_presence", "name": "Timer Display Area", "selector": "[data-testid='recipe-timer-display']", "points": 2},
                {"type": "element_presence", "name": "Review Form", "selector": "form[data-testid='review-form']", "points": 2},
                {
                    "type": "interaction", "name": "Ingredient Check Off", "points": 5,
                    "trigger_element": {"selector": "[data-testid='ingredients-list'] li:first-child input[type='checkbox']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "custom_script_evaluates_true", "script": "const cb = document.querySelector(\"[data-testid='ingredients-list'] li:first-child input[type='checkbox']\"); const li = cb.closest('li'); return cb.checked && (li.classList.contains('completed') || getComputedStyle(li).textDecorationLine === 'line-through');"}

                    ]
                },
                {
                    "type": "interaction", "name": "Timer Starts and Updates (Visual check of display)", "points": 6,
                    "trigger_element": {"selector": "[data-testid^='timer-btn-step']:first-of-type"}, "action": {"type":"click"}, "wait_for_outcome_ms":2500, 
                    "expected_outcomes": [
                        {"outcome_type": "text_content_change_dynamic", "element_selector": "[data-testid='recipe-timer-display']", "initial_wait_ms": 500, "poll_interval_ms": 1000, "num_checks": 2, "note": "Checks if timer text changes over time, implying it's running."}

                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Star Rating is Interactive (basic check)", "script": "return !!document.querySelector(\"form[data-testid='review-form'] button[aria-label*='star'], form[data-testid='review-form'] input[type=radio][name=rating]\");", "points": 3, "note":"Checks for common star rating patterns"}
            ]
        },
        {
            "prompt_id": "FPC003_Dashboard_UI_with_Chart_and_Table",
            "prompt_description": "Create a responsive admin dashboard UI. The page should include a header, a collapsible sidebar navigation, and a main content area displaying key metrics, an interactive chart, and a data table.\n\n**Layout & Core Components:**\n1.  **Fixed Header:** Contains application title/logo and a user profile dropdown (basic structure, no complex auth). Identifiable as `data-testid='dashboard-header'`. The user profile trigger should be `data-testid='user-profile-trigger'`.\n2.  **Collapsible Sidebar Navigation:** \n    *   Include links like 'Dashboard', 'Analytics', 'Reports', 'Settings'. \n    *   The sidebar should be `data-testid='dashboard-sidebar'` and have `role='navigation'`. \n    *   It should be collapsible/expandable via a toggle button (`data-testid='sidebar-toggle'`), with state communicated via `aria-expanded` and visual change (e.g., width or transform). On mobile, it might be off-canvas by default.\n3.  **Main Content Area (`<main>` role):**\n    *   **Key Metrics Cards:** Display 3-4 cards showing summary statistics (e.g., 'Total Users: 1,234', 'Revenue: $56,789'). Each card identifiable `data-testid='metric-card-N'`.\n    *   **Interactive Chart:** Embed a simple bar chart (using a JS library like Chart.js CDN, or implement a basic SVG chart if feeling ambitious) showing sample data (e.g., 'Sales per Month'). The chart canvas/SVG container should be `data-testid='sales-chart'`. Ensure it has an accessible title/description.\n    *   **Data Table:** Display a sortable table of recent orders (Order ID, Customer Name, Date, Amount, Status). The table should be `data-testid='orders-table'`. Sorting should be available for 'Date' and 'Amount'. Column headers should use `aria-sort`. (Similar to C001 but integrated into a larger page).\n\n**Technical & Accessibility Requirements:**\n*   Full semantic HTML page structure. Logical heading hierarchy.\n*   The dashboard MUST be responsive. The chart and table need to adapt gracefully to smaller screens.\n*   All interactive elements (sidebar toggle, user menu, sortable table headers) must be keyboard accessible and provide clear ARIA states/feedback.\n*   Chart accessibility: Provide a text alternative or ensure the chart library used offers good default accessibility (e.g., appropriate roles, labels for chart elements).\n*   Styling: Primarily Tailwind CSS. Custom CSS/JS may be needed for the chart styling/interactivity, sidebar animation, and any complex table interactions if Tailwind alone is insufficient.\n\n**Testing Identifiers:**\n*   Header: `data-testid='dashboard-header'`\n*   User Profile Trigger: `data-testid='user-profile-trigger'`\n*   Sidebar: `data-testid='dashboard-sidebar'`\n*   Sidebar Toggle: `data-testid='sidebar-toggle'`\n*   Metric Cards (example): `data-testid='metric-card-1'`\n*   Sales Chart Container: `data-testid='sales-chart'`\n*   Orders Table: `data-testid='orders-table'`\n*   Sort by Date (in orders table): `data-testid='sort-orders-by-Date'`",
            "viewports_to_test": {"desktop": [1600, 900], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Dashboard Header", "selector": "header[data-testid='dashboard-header']", "points": 1},
                {"type": "element_presence", "name": "Dashboard Sidebar", "selector": "nav[role='navigation'][data-testid='dashboard-sidebar']", "points": 1},
                {"type": "element_presence", "name": "Sidebar Toggle", "selector": "button[data-testid='sidebar-toggle']", "points": 1},
                {"type": "element_presence", "name": "Main Content Area", "selector": "main", "points": 1},
                {"type": "element_count", "name": "Metric Cards (min 3)", "selector": "[data-testid^='metric-card-']", "min_count": 3, "points": 2},
                {"type": "element_presence", "name": "Sales Chart Area", "selector": "[data-testid='sales-chart']", "points": 2, "note": "Checks for either canvas or svg within this area for chart presence."},
                {"type": "element_presence", "name": "Orders Table", "selector": "table[data-testid='orders-table']", "points": 2},
                {"type": "element_presence", "name": "Sort by Date (Orders Table)", "selector": "table[data-testid='orders-table'] th [data-testid='sort-orders-by-Date']", "points": 1},
                {
                    "type": "interaction", "name": "Sidebar Toggle Functionality", "points": 4,
                    "trigger_element": {"selector": "button[data-testid='sidebar-toggle']"},
                    "sequence": [
                        {"step_name": "Collapse Sidebar", "action": {"type":"click"}, "wait_for_outcome_ms": 700, 
                         "expected_outcomes": [
                             {"outcome_type": "attribute_change", "element_selector": "button[data-testid='sidebar-toggle']", "attribute_name": "aria-expanded", "expected_value": "false"},
                             {"outcome_type": "custom_script_evaluates_true", "script": "return document.querySelector(\"[data-testid='dashboard-sidebar']\").classList.contains('collapsed') || parseFloat(getComputedStyle(document.querySelector(\"[data-testid='dashboard-sidebar']\")).width) < 100;", "note":"Checks for class or significantly reduced width"}
                         ]},
                         {"step_name": "Expand Sidebar", "action": {"type":"click"}, "wait_for_outcome_ms": 700,
                         "expected_outcomes": [
                             {"outcome_type": "attribute_change", "element_selector": "button[data-testid='sidebar-toggle']", "attribute_name": "aria-expanded", "expected_value": "true"}
                         ]}
                    ]
                },
                {
                    "type": "interaction", "name": "Sort Orders Table by Date", "points": 4,
                    "trigger_element": {"selector": "table[data-testid='orders-table'] th [data-testid='sort-orders-by-Date']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "attribute_change", "element_selector": "table[data-testid='orders-table'] th:has([data-testid='sort-orders-by-Date'])", "attribute_name": "aria-sort", "expected_value_exists": true, "note": "Checks if aria-sort is set to 'ascending' or 'descending'"}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Chart Has Accessible Name (title/aria-label)", "script": "const chart = document.querySelector('[data-testid=\"sales-chart\"]'); if (!chart) return false; const canvasOrSvg = chart.querySelector('canvas, svg'); if (!canvasOrSvg) return false; return canvasOrSvg.getAttribute('aria-label') || canvasOrSvg.querySelector('title') || chart.getAttribute('aria-labelledby');", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC004_ECommerce_Product_Page_With_Image_Zoom_and_Reviews",
            "prompt_description": "Develop a detailed product page for an e-commerce site (e.g., for a 'High-Performance Laptop').\n\n**Page Structure & Features:**\n1.  **Product Gallery:** \n    *   Main product image (identifiable as `data-testid='main-product-image'`).\n    *   Several thumbnail images below it. Clicking a thumbnail updates the main product image.\n    *   **Image Zoom:** Hovering over the main product image should display a magnified version of that portion of the image, typically in an adjacent container or as an overlay (identifiable as `data-testid='image-zoom-view'`).\n2.  **Product Information:**\n    *   Product Name (H1).\n    *   Short Description.\n    *   Price (identifiable as `data-testid='product-price'`).\n    *   Variant Selection (e.g., Color, Storage Size - use `<select>` dropdowns or radio button groups). Changes here might update the price or image (optional complexity, but good to handle basic selection).\n    *   Quantity Selector (input type number, identifiable as `data-testid='quantity-input'`).\n    *   'Add to Cart' button (identifiable as `data-testid='add-to-cart-button'`).\n3.  **Product Details Tabs:**\n    *   An accessible tabbed interface (`role='tablist'`) with sections for 'Full Description', 'Specifications', and 'Customer Reviews'. Each tab and panel should follow ARIA best practices. The tab list should be `data-testid='product-tabs'`. Tab panels should be `data-testid='tab-panel-description'`, etc.\n4.  **Customer Reviews Tab Content:**\n    *   Display a few sample reviews (reviewer name, rating as stars, review text).\n    *   A form to submit a new review (similar to FPC002 but integrated here).\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML for the entire page. Logical heading structure.\n*   Responsive design. The image gallery, zoom feature, and tabs must work well on mobile.\n*   **Image Zoom Accessibility:** Ensure the zoom feature is usable with a keyboard if possible, or can be easily bypassed. Magnified content should be announced if it appears off-screen or significantly changes context.\n*   **Tab Interface Accessibility:** Must be fully keyboard navigable (arrow keys for tabs, Tab to panel content) and use correct ARIA attributes (`aria-selected`, `aria-controls`, etc.).\n*   All interactive elements must be accessible.\n*   Styling: Tailwind CSS primarily. Custom CSS/JS will be essential for the image zoom, thumbnail gallery logic, and potentially the tab interface if advanced styling/animation is desired.\n\n**Testing Identifiers:**\n*   Main Product Image: `data-testid='main-product-image'`\n*   Image Zoom View Area: `data-testid='image-zoom-view'`\n*   A Thumbnail Image (example): `data-testid='thumbnail-1'`\n*   Product Price Display: `data-testid='product-price'`\n*   Quantity Input: `data-testid='quantity-input'`\n*   Add to Cart Button: `data-testid='add-to-cart-button'`\n*   Product Tabs Container: `data-testid='product-tabs'`\n*   Description Tab Panel: `data-testid='tab-panel-description'`",
            "viewports_to_test": {"desktop": [1440, 900], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Main Product Image", "selector": "img[data-testid='main-product-image']", "points": 2},
                {"type": "element_count", "name": "Thumbnail Images (min 2)", "selector": "img[data-testid^='thumbnail-']", "min_count": 2, "points": 2},
                {"type": "element_presence", "name": "Image Zoom View Area", "selector": "[data-testid='image-zoom-view']", "points": 2, "note": "May initially be hidden"},
                {"type": "element_presence", "name": "Add to Cart Button", "selector": "button[data-testid='add-to-cart-button']", "points": 1},
                {"type": "element_presence", "name": "Product Tabs Container", "selector": "[role='tablist'][data-testid='product-tabs']", "points": 2},
                {"type": "element_count", "name": "Tab Buttons (min 3)", "selector": "[data-testid='product-tabs'] [role='tab']", "min_count": 3, "points": 1},
                {
                    "type": "interaction", "name": "Thumbnail Click Updates Main Image", "points": 4,
                    "trigger_element": {"selector": "img[data-testid='thumbnail-2']"}, 
                    "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "attribute_change", "element_selector": "img[data-testid='main-product-image']", "attribute_name": "src", "expected_value_not_initial": true, "note": "Checks if src changes from initial value (requires initial src capture or knowing thumbnail's target src)"}
                    ]
                },
                {
                    "type": "interaction", "name": "Image Zoom on Hover", "points": 4, "viewports": ["desktop"],
                    "trigger_element": {"selector": "img[data-testid='main-product-image']"}, "action": {"type":"hover"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "visibility_change", "element_selector": "[data-testid='image-zoom-view']", "expected_visibility": "visible"}
                    ]
                },
                {
                    "type": "interaction", "name": "Tab Switching (e.g., to Specifications)", "points": 4,
                    "trigger_element": {"selector": "[data-testid='product-tabs'] [role='tab']:nth-child(2)"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "attribute_change", "element_selector": "[data-testid='product-tabs'] [role='tab']:nth-child(2)", "attribute_name": "aria-selected", "expected_value": "true"},
                        {"outcome_type": "visibility_change", "element_selector": "[data-testid='tab-panel-specifications']", "expected_visibility": "visible", "note": "Assumes second tab panel has this testid"},
                        {"outcome_type": "visibility_change", "element_selector": "[data-testid='tab-panel-description']", "expected_visibility": "hidden"}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Tablist Keyboard Nav (Arrow Key Focus)", "points": 3,
                 "script": "const tabs = document.querySelectorAll('[data-testid=\"product-tabs\"] [role=\"tab\"]'); if(tabs.length < 2) return true; tabs[0].focus(); tabs[0].dispatchEvent(new KeyboardEvent('keydown', {key: 'ArrowRight', bubbles: true})); return document.activeElement === tabs[1];",
                 "note": "Basic check for arrow key navigation between tabs."
                }
            ]
        },
        {
            "prompt_id": "FPC005_Interactive_Kanban_Board_UI",
            "prompt_description": "Develop a client-side interactive Kanban board (like Trello or Jira) with basic drag-and-drop functionality.\n\n**Board Structure & Features:**\n1.  **Columns:** Display at least three columns: 'To Do', 'In Progress', 'Done'. Each column should be clearly labeled (e.g., with an `<h2>`) and act as a drop zone. Columns should be identifiable `data-testid='kanban-column-todo'`, `data-testid='kanban-column-inprogress'`, etc.\n2.  **Cards:** \n    *   Each column should contain several task cards. Each card displays a task title and a brief description.\n    *   Cards MUST be draggable between columns. They should have `draggable='true'` attribute and be identifiable `data-testid='kanban-card-N'`.\n    *   Cards should also be editable in place (e.g., clicking card title makes it an input, saving on blur/Enter - medium complexity).\n3.  **Add New Card:** Provide a way to add a new card to the 'To Do' column (e.g., a button at the bottom of the column or a global 'Add Task' button that opens a small form/modal). The form should ask for a title and description. `data-testid='add-card-form'`.\n4.  **Drag and Drop:** Implement HTML5 drag and drop API to move cards between columns. When a card is dropped into a new column, it should visually move and its underlying data structure (if any in JS) should reflect the change of status.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML for the board, columns, and cards. Use `<ul>` or `<ol>` for lists of cards within columns if appropriate.\n*   **Drag and Drop Accessibility:** This is challenging. Provide keyboard alternatives for moving cards if possible (e.g., a context menu on the card with 'Move to In Progress' options). If full keyboard D&D is too complex, ensure users can still manage tasks without a mouse (e.g., edit, delete, add, potentially move via other means). At a minimum, draggable items should be focusable.\n*   Visual feedback during drag (e.g., highlighting drop zones, ghost image of card).\n*   The board should be responsive. Columns might stack on mobile, or horizontal scrolling might be enabled for the board container.\n*   Styling: Tailwind CSS. Custom CSS/JS will be critical for drag-and-drop visuals, card editing, and potentially complex responsive column layouts.\n\n**Testing Identifiers:**\n*   To Do Column: `data-testid='kanban-column-todo'`\n*   In Progress Column: `data-testid='kanban-column-inprogress'`\n*   Done Column: `data-testid='kanban-column-done'`\n*   A Draggable Card: `data-testid='kanban-card-1'`\n*   Add Card Form: `data-testid='add-card-form'` or trigger `data-testid='add-card-button'`",
            "viewports_to_test": {"desktop": [1920, 1080], "mobile": [375, 667]},
            "adherence_checks": [
                {"type": "element_presence", "name": "To Do Column", "selector": "[data-testid='kanban-column-todo']", "points": 2},
                {"type": "element_presence", "name": "In Progress Column", "selector": "[data-testid='kanban-column-inprogress']", "points": 2},
                {"type": "element_presence", "name": "Done Column", "selector": "[data-testid='kanban-column-done']", "points": 2},
                {"type": "element_count", "name": "Draggable Cards (min 3 total)", "selector": "[data-testid^='kanban-card-'][draggable='true']", "min_count": 3, "points": 2},
                {"type": "element_presence", "name": "Add Card Mechanism", "selector": "[data-testid='add-card-form'], [data-testid='add-card-button']", "points": 2, "note":"Checks for either the form or a button to trigger it"},
                {
                    "type": "interaction", "name": "Drag Card from ToDo to InProgress", "points": 7, "viewports": ["desktop"],
                    "trigger_element": {"selector": "[data-testid='kanban-column-todo'] [data-testid^='kanban-card-']:first-child"},
                    "action": {"type": "drag_and_drop", "target_element_selector": "[data-testid='kanban-column-inprogress']"},
                    "wait_for_outcome_ms": 1000,
                    "expected_outcomes": [
                        {"outcome_type": "custom_script_evaluates_true", "script": "const card = document.querySelector(\"[data-testid='kanban-column-inprogress'] [data-testid^='kanban-card-']:first-child\"); const todoCol = document.querySelector(\"[data-testid='kanban-column-todo']\"); return card && !todoCol.contains(card);", "note": "Checks if a card is now in InProgress and not in ToDo (simplistic check, assumes one card moved)"}
                    ]
                },
                {
                    "type": "interaction", "name": "Add New Card to ToDo", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"const form = document.querySelector('[data-testid=add-card-form]'); if(form && form.reset) form.reset();"}],
                    "sequence": [
                        {"step_name": "Open Add Card Form (if button exists)", "trigger_element": {"selector": "[data-testid='add-card-button']", "optional":true}, "action": {"type":"click"}, "wait_for_outcome_ms":300},
                        {"step_name": "Fill and Submit New Card", "action": {"type":"execute_script", "script": "document.querySelector('[data-testid=add-card-form] input[type=text]').value = 'New Test Card'; document.querySelector('[data-testid=add-card-form] textarea').value = 'Description for test.'; document.querySelector('[data-testid=add-card-form] button[type=submit]').click();"}, "wait_for_outcome_ms":500}
                    ],
                    "expected_outcomes": [
                        {"outcome_type": "text_content_change", "element_selector": "[data-testid='kanban-column-todo'] [data-testid^='kanban-card-']:last-child", "expected_text": "New Test Card", "match_type":"contains", "note":"Checks if new card appears in ToDo column"}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Cards are Focusable (for A11y D&D alternative prep)", "script": "return Array.from(document.querySelectorAll(\"[data-testid^='kanban-card-']\")).every(card => card.hasAttribute('tabindex') || card.querySelector('button, a'));", "points": 3, "note":"Draggable items should be focusable"}
            ]
        },
        {
            "prompt_id": "FPC006_Social_Media_Feed_Infinite_Scroll",
            "prompt_description": "Simulate a social media feed (like Twitter/X or Facebook) with posts and **infinite scrolling** to load more posts.\n\n**Page Structure & Features:**\n1.  **Main Layout:** Header (simple title), Main content area for the feed, Footer (optional).\n2.  **Post Component:** Each post in the feed should display:\n    *   User Avatar and Name.\n    *   Post Timestamp.\n    *   Post Content (text, maybe a placeholder for an image).\n    *   Action buttons: 'Like' (with count, toggles `aria-pressed`), 'Comment' (no action needed), 'Share' (no action needed).\n    *   Each post identifiable as `data-testid='feed-post-N'`.\n    *   Like button on each post: `data-testid='like-btn-postN'`.\n3.  **Feed Container (`data-testid='social-feed-container'`):**\n    *   Initially load a set of (e.g., 5-10) posts.\n    *   **Infinite Scroll:** As the user scrolls towards the bottom of the feed container, new posts should be dynamically fetched (simulated by JS, no actual API call needed, just append more generated post elements) and added to the feed. \n    *   A loading indicator (`data-testid='feed-loading-indicator'`) should be visible while new posts are being 'fetched' and appended.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Posts could be `<article>` elements.\n*   The infinite scroll MUST NOT break keyboard navigation or trap focus. Users should still be able to navigate through all loaded posts using the keyboard.\n*   New content loaded via infinite scroll should be announced to assistive technologies if possible (e.g., using an `aria-live` region that briefly states 'More posts loaded').\n*   The 'Like' button interaction should be fully accessible.\n*   The page must be responsive.\n*   Styling: Tailwind CSS primarily. Custom JS is essential for the infinite scroll logic, post generation, like button state, and loading indicator.\n\n**Testing Identifiers:**\n*   Feed Container: `data-testid='social-feed-container'`\n*   An individual Post: `data-testid='feed-post-1'` (example)\n*   Like button on a post: `data-testid='like-btn-post1'` (example)\n*   Loading Indicator: `data-testid='feed-loading-indicator'`\n*   ARIA Live region for new content: `data-testid='feed-update-announcer'` (optional but good)",
            "viewports_to_test": {"desktop": [1024, 768], "mobile": [375, 812]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Social Feed Container", "selector": "[data-testid='social-feed-container']", "points": 2},
                {"type": "element_count", "name": "Initial Posts Loaded (min 5)", "selector": "[data-testid='social-feed-container'] [data-testid^='feed-post-']", "min_count": 5, "points": 3},
                {"type": "element_presence", "name": "Example Like Button", "selector": "[data-testid^='like-btn-post']", "points": 1},
                {"type": "element_presence", "name": "Loading Indicator (may be initially hidden)", "selector": "[data-testid='feed-loading-indicator']", "points": 2},
                {
                    "type": "interaction", "name": "Like Button Toggles ARIA", "points": 4,
                    "trigger_element": {"selector": "[data-testid^='like-btn-post']:first-of-type"}, "action": {"type":"click"}, "wait_for_outcome_ms":300,
                    "expected_outcomes": [
                        {"outcome_type": "attribute_change", "element_selector": "[data-testid^='like-btn-post']:first-of-type", "attribute_name": "aria-pressed", "expected_value": "true"}
                    ]
                },
                {
                    "type": "interaction", "name": "Infinite Scroll Loads More Posts", "points": 8,
                    "initial_setup": [{"action_type": "get_element_count", "selector": "[data-testid^='feed-post-']", "store_as": "initialPostCount"}],
                    "trigger_action_on_load": false, 
                    "action_sequence_for_trigger": [ 
                        {"action_type": "execute_script", "script": "window.scrollTo(0, document.body.scrollHeight);"}
                    ],
                    "wait_for_outcome_ms": 3000, 
                    "expected_outcomes": [
                        {"outcome_type": "custom_script_evaluates_true", "script": "const finalPostCount = document.querySelectorAll(\"[data-testid^='feed-post-']\").length; return finalPostCount > window.initialPostCount;", "note": "Checks if more posts were loaded than initially present."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Loading Indicator Appears During Load (Hard to test precisely)", "script": "/* This would require intercepting JS or very precise timing. For now, assume it's briefly visible. A more robust test needs advanced tooling. */ return true;", "points": 1, "note":"This is a very difficult state to reliably catch without deeper hooks."},
                {"type": "element_presence", "name": "ARIA Live Announcer (Optional)", "selector": "[data-testid='feed-update-announcer'][aria-live]", "points": 1, "optional": true}
            ]
        },
        {
            "prompt_id": "FPC007_Multi_Step_Wizard_Form_with_Validation_and_Summary",
            "prompt_description": "Create a complex multi-step wizard form for event registration. The wizard should have at least 3 steps, client-side validation at each step, a progress indicator, and a final summary/confirmation step.\n\n**Wizard Steps & Content:**\n1.  **Step 1: Personal Information (`data-testid='wizard-step-1'`)**\n    *   Fields: Full Name (required), Email (required, valid email), Phone Number.\n    *   'Next' button to proceed.\n2.  **Step 2: Event Preferences (`data-testid='wizard-step-2'`)**\n    *   Fields: Ticket Type (select dropdown: Standard, VIP), Number of Tickets (input number, min 1), Dietary Restrictions (textarea).\n    *   'Previous' and 'Next' buttons.\n3.  **Step 3: Payment Details (Structure Only - `data-testid='wizard-step-3'`)**\n    *   Placeholder fields for Card Number, Expiry Date, CVV. (No actual payment processing).\n    *   'Previous' and 'Next' buttons.\n4.  **Step 4: Review & Confirm (`data-testid='wizard-step-4'`)**\n    *   Display a summary of all information entered in previous steps.\n    *   'Previous' button and a 'Confirm Registration' button (`data-testid='confirm-registration-btn'`).\n5.  **Success Message:** After confirming, hide the wizard and show a success message (`data-testid='registration-success-msg'`).\n\n**Core Features:**\n*   **Progress Indicator:** Visually show current step and total steps (e.g., 'Step 1 of 4'). Identifiable as `data-testid='wizard-progress-indicator'`.\n*   **Navigation:** Users must be able to navigate between steps using 'Next'/'Previous' buttons.\n*   **Client-Side Validation:** Each step's 'Next' button should trigger validation for its fields. If invalid, display clear error messages next to fields (e.g., in a `div` with `data-testid='error-fieldName'`) and prevent progression.\n*   **State Management:** Data entered in each step should persist when navigating back and forth.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. The wizard itself could be a large `<form>` or a series of fieldsets within a form.\n*   ARIA: Use `aria-current='step'` on the current step in the progress indicator. Manage focus appropriately when navigating steps (e.g., focus first field of new step).\n*   Responsive design for all steps and form elements.\n*   All form elements MUST have associated labels. Error messages should be programmatically linked to inputs using `aria-describedby`.\n*   Styling: Tailwind CSS. Custom CSS/JS for visual styling of progress bar, step transitions (optional animation), and dynamic error message display.\n\n**Testing Identifiers:**\n*   Wizard container: `data-testid='event-wizard-form'`\n*   Step 1 container: `data-testid='wizard-step-1'` (and similar for other steps)\n*   Progress Indicator: `data-testid='wizard-progress-indicator'`\n*   Full Name Input: `data-testid='input-fullName'`\n*   Email Input: `data-testid='input-email'`\n*   Error for Full Name: `data-testid='error-fullName'`\n*   Confirm Registration Button: `data-testid='confirm-registration-btn'`\n*   Success Message: `data-testid='registration-success-msg'`",
            "viewports_to_test": {"desktop": [1280, 800], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Wizard Form Container", "selector": "form[data-testid='event-wizard-form']", "points": 1},
                {"type": "element_presence", "name": "Step 1 Visible Initially", "selector": "[data-testid='wizard-step-1']", "points": 1, "check_visibility": true},
                {"type": "element_presence", "name": "Progress Indicator", "selector": "[data-testid='wizard-progress-indicator']", "points": 2},
                {"type": "element_presence", "name": "Full Name Input", "selector": "input[data-testid='input-fullName']", "points": 1},
                {"type": "element_presence", "name": "Email Input", "selector": "input[data-testid='input-email']", "points": 1},
                {
                    "type": "interaction", "name": "Step 1 Validation (Empty Name)", "points": 4,
                    "trigger_element": {"selector": "[data-testid='wizard-step-1'] button:contains('Next')"}, 
                    "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "text_content_exists", "element_selector": "[data-testid='error-fullName']"},
                        {"outcome_type": "visibility_check_multiple", "selectors_expected_visible": ["[data-testid='wizard-step-1']"], "selectors_expected_hidden": ["[data-testid='wizard-step-2']"], "note":"Stays on step 1"}
                    ]
                },
                {
                    "type": "interaction", "name": "Navigate to Step 2 and Back", "points": 5,
                    "sequence": [
                        {"step_name": "Fill Step 1", "action":{"type":"execute_script", "script":"document.querySelector('[data-testid=input-fullName]').value='Test User'; document.querySelector('[data-testid=input-email]').value='test@example.com';"}},
                        {"step_name": "Click Next to Step 2", "trigger_element": {"selector": "[data-testid='wizard-step-1'] button:contains('Next')"}, "action":{"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [{"outcome_type":"visibility_change", "element_selector":"[data-testid='wizard-step-2']", "expected_visibility":"visible"}]},
                        {"step_name": "Click Previous to Step 1", "trigger_element": {"selector": "[data-testid='wizard-step-2'] button:contains('Previous')"}, "action":{"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [
                             {"outcome_type":"visibility_change", "element_selector":"[data-testid='wizard-step-1']", "expected_visibility":"visible"},
                             {"outcome_type":"attribute_value", "element_selector":"input[data-testid='input-fullName']", "attribute_name":"value", "expected_value":"Test User", "note":"Data persistence"}
                          ]}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Progress Indicator Updates (aria-current)", "script": "const progress = document.querySelector('[data-testid=\"wizard-progress-indicator\"]'); if(!progress) return false; /* Assuming steps are marked with aria-current='step' */ return !!progress.querySelector('[aria-current=\"step\"]');", "points": 3},
                {"type": "custom_script_evaluates_true", "name": "Form Inputs Have Labels", "script": "return Array.from(document.querySelectorAll('form[data-testid=event-wizard-form] input:not([type=submit]):not([type=hidden]), form[data-testid=event-wizard-form] select, form[data-testid=event-wizard-form] textarea')).every(el => el.id && document.querySelector(`label[for='${el.id}']`));", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC008_Realtime_Collaborative_Text_Editor_Simulation",
            "prompt_description": "Simulate a basic real-time collaborative text editor interface (like a simplified Google Docs). Focus is on the UI and client-side simulation of collaboration.\n\n**UI Components:**\n1.  **Main Text Area:** A large, editable content area (e.g., a `div` with `contenteditable='true'` or a `<textarea>`). This is where the main document content goes. Identifiable as `data-testid='editor-content-area'`.\n2.  **User Cursors/Selections (Simulated):**\n    *   Simulate the presence of 1-2 other 'collaborators'. When the page loads, display 'cursors' (small styled `div`s or `span`s) at random positions within the text content to represent other users. These should have a user's name associated (e.g., as a tooltip or a small label). Example: `data-testid='cursor-user-Alice'`.\n    *   Optionally, simulate a text selection by another user (e.g., by applying a background color to a range of text and associating it with a user).\n3.  **Toolbar (Basic):**\n    *   Buttons for Bold, Italic, Underline. These should apply/remove formatting to the selected text in the main editor area. (Using `document.execCommand` is acceptable for this simulation, despite its deprecation, or implement custom rich text logic if ambitious). Toolbar: `data-testid='editor-toolbar'`. Bold button: `data-testid='toolbar-bold-btn'`.\n4.  **Live Changes Simulation:**\n    *   After a few seconds of page load, simulate another user typing by programmatically inserting a short string (e.g., '... added by Bob ...') into the main editor content at a specific point.\n    *   This change should appear without the current user directly typing it.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. The editable area needs careful ARIA role consideration if not a standard form element (e.g., `role='textbox'`, `aria-multiline='true'`).\n*   The simulated cursors and selections must not interfere with the primary user's ability to edit the document or navigate it with a keyboard.\n*   Toolbar buttons must be keyboard accessible and indicate their state (e.g., if selected text is bold, Bold button appears pressed using `aria-pressed`).\n*   Changes made by 'other users' should be announced by an `aria-live` region (`data-testid='collaboration-updates'`) to inform assistive technology users (e.g., 'Bob made an edit').\n*   Responsive design for the editor interface.\n*   Styling: Tailwind CSS, with custom CSS/JS for the editor functionality, cursor simulation, rich text commands, and live update announcements.\n\n**Testing Identifiers:**\n*   Editor Content Area: `data-testid='editor-content-area'`\n*   A Simulated User Cursor: `data-testid='cursor-user-Alice'`\n*   Editor Toolbar: `data-testid='editor-toolbar'`\n*   Bold Button: `data-testid='toolbar-bold-btn'`\n*   Collaboration Updates Announcer: `data-testid='collaboration-updates'`",
            "viewports_to_test": {"desktop": [1600, 900], "mobile": [414, 736]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Editor Content Area", "selector": "[data-testid='editor-content-area'][contenteditable='true'], textarea[data-testid='editor-content-area']", "points": 3},
                {"type": "element_presence", "name": "At least one Simulated User Cursor", "selector": "[data-testid^='cursor-user-']", "points": 3},
                {"type": "element_presence", "name": "Editor Toolbar", "selector": "[data-testid='editor-toolbar']", "points": 2},
                {"type": "element_presence", "name": "Bold Button", "selector": "button[data-testid='toolbar-bold-btn']", "points": 2},
                {"type": "element_presence", "name": "Collaboration Updates Announcer", "selector": "[data-testid='collaboration-updates'][aria-live]", "points": 2},
                {
                    "type": "interaction", "name": "Apply Bold Formatting", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"const editor = document.querySelector('[data-testid=editor-content-area]'); editor.focus(); editor.innerHTML = 'Sample text.'; const range = document.createRange(); range.selectNodeContents(editor); const sel = window.getSelection(); sel.removeAllRanges(); sel.addRange(range);"}], 
                    "trigger_element": {"selector": "button[data-testid='toolbar-bold-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "custom_script_evaluates_true", "script": "return document.queryCommandState && document.queryCommandState('bold') || document.querySelector('[data-testid=editor-content-area] b, [data-testid=editor-content-area] strong');", "note":"Checks execCommand state or presence of b/strong tags"},
                        {"outcome_type": "attribute_change", "element_selector": "button[data-testid='toolbar-bold-btn']", "attribute_name": "aria-pressed", "expected_value": "true"}
                    ]
                },
                {
                    "type": "text_content_change_dynamic", "name": "Simulated Collaborative Edit Appears", "element_selector": "[data-testid='editor-content-area']",
                    "initial_wait_ms": 3000, "poll_interval_ms": 1000, "num_checks": 1, "look_for_substring": "added by", 
                    "points": 5, "note": "Waits for simulated remote edit to appear."
                },
                {"type": "custom_script_evaluates_true", "name": "Editor Area has ARIA Role if ContentEditable Div", "script": "const editor = document.querySelector('[data-testid=\"editor-content-area\"]'); if (editor && editor.isContentEditable && editor.tagName !== 'TEXTAREA') return editor.getAttribute('role') === 'textbox' && editor.getAttribute('aria-multiline') === 'true'; return true;", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC009_Flight_Booking_System_Interface",
            "prompt_description": "Design the UI for a flight booking system's main search and results page. This is a highly interactive and complex interface.\n\n**Page Components & Flow:**\n1.  **Search Form (`data-testid='flight-search-form'`):**\n    *   Inputs: 'From' (Origin airport - text input with autocomplete suggestions, simulated), 'To' (Destination airport - text input with autocomplete, simulated), 'Departure Date' (date picker), 'Return Date' (date picker, disabled/hidden for one-way), 'Passengers' (number input).\n    *   Options: 'One-way' / 'Round-trip' (radio buttons, affects Return Date visibility/state).\n    *   'Search Flights' button (`data-testid='search-flights-btn'`).\n2.  **Search Results Area (`data-testid='flight-results-area'`):**\n    *   Initially empty or shows a 'Search for flights to see results' message.\n    *   After search (simulated - generate 5-10 fake flight results): Display results as cards or rows. Each result shows: Airline Logo & Name, Departure/Arrival Times, Duration, Price, 'Select Flight' button.\n    *   Each flight result item should be `data-testid='flight-result-item-N'`.\n3.  **Filtering & Sorting Options for Results:**\n    *   Filters (applied client-side to simulated results): Price Range (slider or min/max inputs), Number of Stops (checkboxes: Non-stop, 1 stop, 2+ stops), Airlines (multi-select checkboxes).\n    *   Filter controls container: `data-testid='results-filters'`.\n    *   Sorting: Sort results by Price (low-high, high-low), Duration (shortest first). Sort controls container: `data-testid='results-sort-controls'`.\n4.  **Selected Flight Summary (Optional):** A small sidebar or section showing details of a selected flight before proceeding to booking.\n\n**Technical & Accessibility Requirements:**\n*   Full semantic page structure.\n*   **Date Pickers:** Must be accessible and keyboard navigable. If using a library, ensure it's reputable for A11y. If custom, implement ARIA grid pattern for calendar.\n*   **Autocomplete (Simulated):** As user types in Origin/Destination, show a dropdown list of matching airport suggestions (use a static JS array of 5-10 airport names for simulation). Must be keyboard navigable (arrows to select, Enter to confirm). Autocomplete list: `data-testid='autocomplete-suggestions'`.\n*   Dynamic updates: Toggling One-way/Round-trip changes form. Applying filters/sorts updates results instantly.\n*   All interactive elements need proper ARIA attributes and focus management.\n*   Responsive: Search form, results, and filters must be usable on mobile.\n*   Styling: Tailwind. Significant custom JS for interactions, date pickers (if custom), autocomplete, filtering/sorting logic, and dynamic result rendering.\n\n**Testing Identifiers:**\n*   Search Form: `data-testid='flight-search-form'`\n*   Origin Input: `data-testid='input-origin'`\n*   Destination Input: `data-testid='input-destination'`\n*   Departure Date Input: `data-testid='input-departure-date'`\n*   Search Flights Button: `data-testid='search-flights-btn'`\n*   Flight Results Area: `data-testid='flight-results-area'`\n*   A Flight Result Item: `data-testid='flight-result-item-1'`\n*   Results Filters Container: `data-testid='results-filters'`\n*   Price Filter (example): `data-testid='filter-price-min'`\n*   Results Sort Controls: `data-testid='results-sort-controls'`\n*   Sort by Price Button: `data-testid='sort-by-price'`",
            "viewports_to_test": {"desktop": [1920, 1080], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Flight Search Form", "selector": "form[data-testid='flight-search-form']", "points": 2},
                {"type": "element_presence", "name": "Origin Input", "selector": "input[data-testid='input-origin']", "points": 1},
                {"type": "element_presence", "name": "Destination Input", "selector": "input[data-testid='input-destination']", "points": 1},
                {"type": "element_presence", "name": "Departure Date Input", "selector": "[data-testid='input-departure-date']", "points": 1, "note":"Could be input or custom component root"},
                {"type": "element_presence", "name": "Search Flights Button", "selector": "button[data-testid='search-flights-btn']", "points": 1},
                {"type": "element_presence", "name": "Flight Results Area", "selector": "[data-testid='flight-results-area']", "points": 1},
                {"type": "element_presence", "name": "Results Filters Container", "selector": "[data-testid='results-filters']", "points": 1},
                {"type": "element_presence", "name": "Results Sort Controls Container", "selector": "[data-testid='results-sort-controls']", "points": 1},
                {
                    "type": "interaction", "name": "Simulate Search and Display Results", "points": 6,
                    "trigger_element": {"selector": "button[data-testid='search-flights-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":1500, 
                    "expected_outcomes": [
                        {"outcome_type": "element_count", "parent_element_selector": "[data-testid='flight-results-area']", "child_element_selector": "[data-testid^='flight-result-item-']", "min_count": 3, "note":"Checks if at least some results are rendered."}
                    ]
                },
                {
                    "type": "interaction", "name": "Autocomplete Suggestion Appears for Origin", "points": 5,
                    "trigger_element": {"selector": "input[data-testid='input-origin']"}, "action": {"type":"type_text", "text_to_type":"New"}, "wait_for_outcome_ms":1000, 
                    "expected_outcomes": [
                        {"outcome_type": "visibility_change", "element_selector": "[data-testid='autocomplete-suggestions']", "expected_visibility":"visible"},
                        {"outcome_type": "element_count", "parent_element_selector": "[data-testid='autocomplete-suggestions']", "child_element_selector": "li, div.suggestion-item", "min_count":1, "note":"Checks if suggestions appear."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Date Picker is Accessible (basic check for ARIA attributes)", "script": "const datepicker = document.querySelector('[data-testid=input-departure-date]'); if(!datepicker) return false; return datepicker.hasAttribute('aria-label') || datepicker.hasAttribute('aria-labelledby') || (datepicker.closest('div').querySelector('input[type=text]') && datepicker.closest('div').querySelector('input[type=text]').hasAttribute('aria-haspopup'));", "points": 3, "note": "Very basic check, real datepicker a11y is complex."},
                {"type": "custom_script_evaluates_true", "name": "Round-trip Toggle Affects Return Date", "script": "const oneWayRadio = document.querySelector('input[type=radio][value=one-way]'); const roundTripRadio = document.querySelector('input[type=radio][value=round-trip]'); const returnDateInput = document.querySelector('[data-testid=input-return-date]'); if(!oneWayRadio || !roundTripRadio || !returnDateInput) return false; roundTripRadio.click(); if(returnDateInput.disabled || getComputedStyle(returnDateInput).display === 'none') return false; oneWayRadio.click(); return returnDateInput.disabled || getComputedStyle(returnDateInput).display === 'none';", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC010_WYSIWYG_Rich_Text_Editor_with_Image_Upload_and_Tables",
            "prompt_description": "Develop a sophisticated WYSIWYG (What You See Is What You Get) Rich Text Editor similar to those found in CMS systems or advanced blogging platforms. This is a highly complex front-end challenge.\n\n**Core Features:**\n1.  **Editable Content Area (`data-testid='wysiwyg-editor'`):** A `div` with `contenteditable='true'`, serving as the primary editing surface. Must support `role='textbox'` and `aria-multiline='true'`.\n2.  **Comprehensive Toolbar (`data-testid='wysiwyg-toolbar'`):**\n    *   **Text Formatting:** Bold, Italic, Underline, Strikethrough, Subscript, Superscript.\n    *   **Block Formatting:** Paragraph, Heading Levels (H1-H6 via a dropdown/select).\n    *   **List Formatting:** Unordered List, Ordered List.\n    *   **Alignment:** Left, Center, Right, Justify.\n    *   **Links:** Create/Edit Hyperlink (should open a small modal to input URL and text).\n    *   **Image Upload (Simulated):** A button to 'Insert Image'. Clicking it should open a prompt/modal asking for an image URL. Upon providing a URL, the image is inserted into the editor content. Image should be resizable (basic handles or fixed size options).\n    *   **Table Insertion:** A button to 'Insert Table'. Opens a small modal/grid to select table dimensions (e.g., 3x2 grid). Inserts an empty, editable HTML table into the editor.\n    *   **Undo/Redo:** Buttons for undoing and redoing actions.\n3.  **Output:** A mechanism to get the HTML content of the editor (e.g., a button 'View HTML' that displays the editor's `innerHTML` in a `<pre>` tag or logs to console).\n\n**Technical & Accessibility Requirements:**\n*   **Rich Text Engine:** MUST implement logic for applying and removing formatting using `document.execCommand` (understanding its limitations for a simulation is fine) or preferably by directly manipulating the DOM and selection ranges for more robust behavior. This is the core challenge.\n*   **Toolbar Accessibility:** All toolbar buttons MUST be proper `<button>` elements, fully keyboard accessible, and use `aria-pressed` to indicate active states for toggleable formats (Bold, Italic). Dropdowns (e.g., for Headings) must follow ARIA menu/listbox patterns.\n*   **Editor Accessibility:** The contenteditable area itself must be navigable. Semantic meaning of formatted text (e.g., headings are `<h1>`, lists are `<ul>`) must be preserved in the underlying HTML.\n*   **Modals (for Links, Image, Table):** Must be accessible (trap focus, Escape to close, proper ARIA roles like `dialog`).\n*   **Image and Table Manipulation:** Inserted images should be focusable and ideally have basic resizing. Inserted tables should allow typing into cells.\n*   Responsive toolbar and editor area.\n*   Styling: Tailwind CSS where appropriate, but significant custom CSS/JS will be required for the toolbar's appearance, button states, modal dialogs, and the editor's behavior (e.g., custom list styling if not using default, table cell borders within editor).\n\n**Testing Identifiers:**\n*   Editable Content Area: `data-testid='wysiwyg-editor'`\n*   Toolbar: `data-testid='wysiwyg-toolbar'`\n*   Bold Button: `data-testid='toolbar-btn-bold'`\n*   Heading Selector (dropdown/select): `data-testid='toolbar-select-heading'`\n*   Insert Image Button: `data-testid='toolbar-btn-image'`\n*   Insert Table Button: `data-testid='toolbar-btn-table'`\n*   Link Modal (example input): `data-testid='link-modal-url-input'`\n*   View HTML Output Area (if used): `data-testid='html-output-area'`",
            "viewports_to_test": {"desktop": [1920, 1080], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "WYSIWYG Editor Area", "selector": "[data-testid='wysiwyg-editor'][contenteditable='true'][role='textbox'][aria-multiline='true']", "points": 3},
                {"type": "element_presence", "name": "WYSIWYG Toolbar", "selector": "[data-testid='wysiwyg-toolbar']", "points": 2},
                {"type": "element_presence", "name": "Bold Button in Toolbar", "selector": "[data-testid='wysiwyg-toolbar'] button[data-testid='toolbar-btn-bold']", "points": 1},
                {"type": "element_presence", "name": "Heading Selector in Toolbar", "selector": "[data-testid='wysiwyg-toolbar'] [data-testid='toolbar-select-heading']", "points": 1, "note":"Could be select or button opening menu"},
                {"type": "element_presence", "name": "Insert Image Button", "selector": "[data-testid='wysiwyg-toolbar'] button[data-testid='toolbar-btn-image']", "points": 1},
                {"type": "element_presence", "name": "Insert Table Button", "selector": "[data-testid='wysiwyg-toolbar'] button[data-testid='toolbar-btn-table']", "points": 1},
                {
                    "type": "interaction", "name": "Apply Bold and Check State", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"const editor = document.querySelector('[data-testid=wysiwyg-editor]'); editor.focus(); editor.innerHTML = 'Format me.'; const range = document.createRange(); range.selectNodeContents(editor.firstChild); const sel = window.getSelection(); sel.removeAllRanges(); sel.addRange(range);"}],
                    "trigger_element": {"selector": "button[data-testid='toolbar-btn-bold']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "custom_script_evaluates_true", "script": "return document.queryCommandState && document.queryCommandState('bold') || document.querySelector('[data-testid=wysiwyg-editor] b, [data-testid=wysiwyg-editor] strong');"},
                        {"outcome_type": "attribute_change", "element_selector": "button[data-testid='toolbar-btn-bold']", "attribute_name": "aria-pressed", "expected_value": "true"}
                    ]
                },
                {
                    "type": "interaction", "name": "Insert H2 Heading (Simulated)", "points": 4,
                    "initial_setup": [{"action_type":"execute_script", "script":"const editor = document.querySelector('[data-testid=wysiwyg-editor]'); editor.focus(); editor.innerHTML = 'Make me a heading'; /* Select text here if needed by implementation */"}],
                    "trigger_element": {"selector": "[data-testid='toolbar-select-heading']", "note":"This might need to target an option if it's a select, or a menu item if it's a button dropdown"},
                    "action": {"type":"select_option_or_click_if_button", "value_or_text_to_find":"H2"}, 
                    "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "element_exists", "element_selector": "[data-testid='wysiwyg-editor'] h2"}
                    ]
                },
                {
                    "type": "interaction", "name": "Insert Image (Simulated via Prompt)", "points": 4,
                     "initial_setup": [{"action_type":"execute_script", "script":"window.prompt = () => 'https://via.placeholder.com/150';"}], 
                     "trigger_element": {"selector": "button[data-testid='toolbar-btn-image']"}, "action": {"type":"click"}, "wait_for_outcome_ms":1000,
                     "expected_outcomes": [
                         {"outcome_type": "element_exists", "element_selector": "[data-testid='wysiwyg-editor'] img[src='https://via.placeholder.com/150']"}
                     ]
                },
                {"type": "custom_script_evaluates_true", "name": "Undo/Redo Buttons Exist", "script": "return !!(document.querySelector('[data-testid=wysiwyg-toolbar] button[aria-label*=Undo]') && document.querySelector('[data-testid=wysiwyg-toolbar] button[aria-label*=Redo]'));", "points": 2, "note": "Checks for presence of undo/redo by aria-label."}
            ]
        },
        {
            "prompt_id": "FPC011_Interactive_Online_Quiz_Application_Page",
            "prompt_description": "Develop a complete, single-page interactive online quiz application. The quiz should present multiple-choice questions one at a time, track score, and show results at the end.\n\n**Page Structure & Features:**\n1.  **Start Screen (`data-testid='quiz-start-screen'`):**\n    *   Quiz Title (e.g., 'General Knowledge Challenge').\n    *   Brief instructions.\n    *   'Start Quiz' button (`data-testid='start-quiz-btn'`).\n2.  **Question Screen (`data-testid='quiz-question-screen'`, initially hidden):**\n    *   Display current question number and total questions (e.g., 'Question 1 of 10'). This element should be `data-testid='question-progress'`. \n    *   Question text (e.g., 'What is the capital of France?'). The question text container should be `data-testid='question-text'`. \n    *   A list of 3-4 multiple-choice answers (radio buttons or styled buttons). Each answer option should be `data-testid='answer-option-N'`. Users can only select one.\n    *   'Next Question' button (`data-testid='next-question-btn'`, disabled until an answer is selected). Clicking it submits the current answer, moves to the next question, or to results if last question.\n3.  **Results Screen (`data-testid='quiz-results-screen'`, initially hidden):**\n    *   Display final score (e.g., 'You scored 7 out of 10!'). Score display: `data-testid='final-score'`.\n    *   Optionally, list questions with user's answer and correct answer.\n    *   'Retake Quiz' button (`data-testid='retake-quiz-btn'`) to reset and go to start screen.\n\n**Quiz Logic (Simulated Data):**\n*   Use a JavaScript array of at least 5 question objects (e.g., `{ question: '...', options: ['A', 'B', 'C'], correctAnswer: 'A' }`).\n*   Track current question index and user's score.\n\n**Technical & Accessibility Requirements:**\n*   Full semantic HTML page structure (header, main, footer if desired).\n*   **ARIA for Questions/Answers:** Ensure questions are clearly associated with their answer choices. Radio buttons if used, must be in a `radiogroup`. If custom buttons are used for answers, they need `role='radio'`, `aria-checked`, and be part of a group with `role='radiogroup'` and an `aria-label` for the group.\n*   **Live Feedback:** When an answer is selected, provide immediate (but subtle) visual feedback. Consider an `aria-live` region (`data-testid='answer-feedback'`) to announce if an answer choice is selected before moving to next question.\n*   **Focus Management:** When a new question loads, focus should be appropriately managed (e.g., to the first answer option or the question itself).\n*   The application MUST be responsive and user-friendly on all devices.\n*   Styling: Use Tailwind CSS for layout. Custom CSS/JS will be needed for the quiz logic, interactive states of answers, progress display, and potentially for smooth transitions between screens.\n\n**Testing Identifiers:**\n*   Start Quiz Button: `data-testid='start-quiz-btn'`\n*   Question Screen: `data-testid='quiz-question-screen'`\n*   Question Progress Display: `data-testid='question-progress'`\n*   Question Text Area: `data-testid='question-text'`\n*   An Answer Option (example): `data-testid='answer-option-1'`\n*   Next Question Button: `data-testid='next-question-btn'`\n*   Results Screen: `data-testid='quiz-results-screen'`\n*   Final Score Display: `data-testid='final-score'`\n*   Retake Quiz Button: `data-testid='retake-quiz-btn'`\n*   Answer Feedback Live Region: `data-testid='answer-feedback'` (optional)",
            "viewports_to_test": {"desktop": [1024, 768], "mobile": [375, 667]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Start Screen (Initially Visible)", "selector": "[data-testid='quiz-start-screen']", "points": 1, "check_visibility": true},
                {"type": "element_presence", "name": "Start Quiz Button", "selector": "button[data-testid='start-quiz-btn']", "points": 1},
                {"type": "element_presence", "name": "Question Screen (Initially Hidden)", "selector": "[data-testid='quiz-question-screen']", "points": 1, "check_visibility": "hidden"},
                {"type": "element_presence", "name": "Results Screen (Initially Hidden)", "selector": "[data-testid='quiz-results-screen']", "points": 1, "check_visibility": "hidden"},
                {
                    "type": "interaction", "name": "Quiz Flow (Start, Answer, Next, Results)", "points": 10,
                    "sequence": [
                        {"step_name": "Click Start Quiz", "trigger_element": {"selector": "button[data-testid='start-quiz-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [
                             {"outcome_type":"visibility_change", "element_selector":"[data-testid='quiz-question-screen']", "expected_visibility":"visible"},
                             {"outcome_type":"visibility_change", "element_selector":"[data-testid='quiz-start-screen']", "expected_visibility":"hidden"},
                             {"outcome_type":"element_exists", "element_selector":"[data-testid='question-progress']"},
                             {"outcome_type":"element_exists", "element_selector":"[data-testid='question-text']"},
                             {"outcome_type":"element_count", "parent_element_selector":"[data-testid='quiz-question-screen']", "child_element_selector":"[data-testid^='answer-option-']", "min_count":2}
                         ]},
                        {"step_name": "Select First Answer", "trigger_element": {"selector": "[data-testid^='answer-option-']:first-child"}, "action":{"type":"click"}, "wait_for_outcome_ms":300,
                         "expected_outcomes": [ 
                             {"outcome_type":"attribute_value_matches_pattern", "element_selector":"button[data-testid='next-question-btn']", "attribute_name":"disabled", "expected_value_pattern":"^(false|null)$", "note":"Next button should be enabled, or not have disabled attribute."}
                         ]},
                        {"step_name": "Click Next Question (loop until results)", "action": {"type":"execute_script", "script": "for(let i=0; i<5; i++){ if(document.querySelector(\"[data-testid='quiz-results-screen']\").offsetParent !== null) break; document.querySelector(\"[data-testid^='answer-option-']:first-child\").click(); await new Promise(r => setTimeout(r, 100)); document.querySelector(\"button[data-testid='next-question-btn']\").click(); await new Promise(r => setTimeout(r, 300)); } return true;"}, "wait_for_outcome_ms":3000,
                         "expected_outcomes": [
                            {"outcome_type":"visibility_change", "element_selector":"[data-testid='quiz-results-screen']", "expected_visibility":"visible"},
                            {"outcome_type":"element_exists", "element_selector":"[data-testid='final-score']"}
                         ]}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Answer Options Use Correct ARIA for Grouping/Selection", "script": "const qScreen = document.querySelector('[data-testid=quiz-question-screen]'); if(!qScreen) return true; const radios = qScreen.querySelectorAll('input[type=radio]'); const customRadios = qScreen.querySelectorAll('[role=radio]'); return (radios.length > 0 && radios[0].name) || (customRadios.length > 0 && customRadios[0].closest('[role=radiogroup]'));", "points": 3},
                {"type": "element_presence", "name": "Answer Feedback Live Region", "selector": "[data-testid='answer-feedback'][aria-live]", "points": 1, "optional": true}
            ]
        },
        {
            "prompt_id": "FPC012_Weather_App_Dashboard_with_API_Simulation",
            "prompt_description": "Create a weather application dashboard page. It should allow users to search for a city, view current weather, and see a 5-day forecast. Simulate API calls.\n\n**Page Layout & Features:**\n1.  **Header:** Application title 'WeatherLens'.\n2.  **Search Area:**\n    *   An input field (`data-testid='city-search-input'`) for city name.\n    *   A 'Search' button (`data-testid='city-search-btn'`).\n3.  **Current Weather Display (`data-testid='current-weather-display'`, initially hidden or shows placeholder):**\n    *   City Name, Country.\n    *   Current Temperature (e.g., 25Â°C).\n    *   Weather Condition (e.g., 'Sunny', with a corresponding icon - use text or simple SVG for icons).\n    *   Humidity, Wind Speed.\n4.  **5-Day Forecast Display (`data-testid='forecast-display'`, initially hidden or shows placeholder):**\n    *   Display 5 cards, each representing a day. Each card shows: Day of the week, High/Low Temperature, Weather icon/description.\n    *   Each forecast card: `data-testid='forecast-card-N'`.\n5.  **Loading State:** Display a loading indicator (`data-testid='weather-loading-indicator'`) while 'fetching' weather data.\n6.  **Error Handling:** If city is not found (simulated), display an error message (`data-testid='weather-error-message'`).\n\n**API Simulation (JavaScript):**\n*   When 'Search' is clicked, simulate an API call (e.g., `setTimeout` for 1-2 seconds).\n*   Have a small, predefined JS object mapping a few city names (e.g., 'London', 'Paris', 'Tokyo') to fake weather data (current weather object and an array of 5 forecast objects).\n*   If the searched city is in your mock data, populate the UI. If not, show the error message.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Use appropriate landmarks.\n*   **ARIA for Dynamic Content:** Weather data, forecast, loading, and error messages are dynamic. Use `aria-live` regions to announce updates, especially for loading states and errors. The main content areas holding current weather and forecast could also benefit from `aria-live='polite'` or `aria-busy` during updates.\n*   Icons used for weather conditions MUST have accessible text alternatives (e.g., `aria-label` or visually hidden text).\n*   The page must be responsive. Forecast cards might stack on mobile.\n*   Styling: Tailwind CSS. Custom CSS/JS for dynamic data rendering, loading states, and potentially icon styling.\n\n**Testing Identifiers:**\n*   City Search Input: `data-testid='city-search-input'`\n*   City Search Button: `data-testid='city-search-btn'`\n*   Current Weather Display Area: `data-testid='current-weather-display'`\n*   Forecast Display Area: `data-testid='forecast-display'`\n*   A Forecast Card: `data-testid='forecast-card-1'`\n*   Loading Indicator: `data-testid='weather-loading-indicator'`\n*   Error Message Area: `data-testid='weather-error-message'`\n*   Live Region for General Updates: `data-testid='weather-update-announcer'` (could announce loading/loaded/error states)",
            "viewports_to_test": {"desktop": [1280, 720], "mobile": [375, 812]},
            "adherence_checks": [
                {"type": "element_presence", "name": "City Search Input", "selector": "input[data-testid='city-search-input']", "points": 2},
                {"type": "element_presence", "name": "City Search Button", "selector": "button[data-testid='city-search-btn']", "points": 1},
                {"type": "element_presence", "name": "Current Weather Display Area", "selector": "[data-testid='current-weather-display']", "points": 1},
                {"type": "element_presence", "name": "Forecast Display Area", "selector": "[data-testid='forecast-display']", "points": 1},
                {"type": "element_presence", "name": "Loading Indicator", "selector": "[data-testid='weather-loading-indicator']", "points": 1, "note": "May be initially hidden"},
                {"type": "element_presence", "name": "Error Message Area", "selector": "[data-testid='weather-error-message']", "points": 1, "note": "May be initially hidden"},
                {
                    "type": "interaction", "name": "Search for Valid City (e.g., London)", "points": 7,
                    "initial_setup": [{"action_type":"execute_script", "script":"document.querySelector('[data-testid=city-search-input]').value = 'London';"}],
                    "trigger_element": {"selector": "button[data-testid='city-search-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":2500, 
                    "expected_outcomes": [
                        {"outcome_type":"visibility_change", "element_selector":"[data-testid='current-weather-display']", "expected_visibility":"visible", "note":"Should display after hiding placeholder/loading"},
                        {"outcome_type":"text_content_exists", "element_selector":"[data-testid='current-weather-display']", "expected_text_pattern": "London", "match_type":"contains"},
                        {"outcome_type":"element_count", "parent_element_selector":"[data-testid='forecast-display']", "child_element_selector":"[data-testid^='forecast-card-']", "expected_count":5}
                    ]
                },
                {
                    "type": "interaction", "name": "Search for Invalid City", "points": 4,
                    "initial_setup": [{"action_type":"execute_script", "script":"document.querySelector('[data-testid=city-search-input]').value = 'InvalidCityName123';"}],
                    "trigger_element": {"selector": "button[data-testid='city-search-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":2500,
                    "expected_outcomes": [
                        {"outcome_type":"visibility_change", "element_selector":"[data-testid='weather-error-message']", "expected_visibility":"visible"},
                        {"outcome_type":"visibility_change", "element_selector":"[data-testid='current-weather-display']", "expected_visibility":"hidden", "note":"Should hide previous results or placeholder if error displayed"}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Weather Icons Have Accessible Text", "script": "return Array.from(document.querySelectorAll('[data-testid=current-weather-display] img, [data-testid^=forecast-card] img, [data-testid=current-weather-display] [data-icon], [data-testid^=forecast-card] [data-icon]')).every(el => el.getAttribute('aria-label') || el.alt || el.querySelector('title') || (el.nextElementSibling && el.nextElementSibling.classList.contains('sr-only')));", "points": 3, "note":"Checks various patterns for icon accessibility"},
                {"type": "element_presence", "name": "ARIA Live Announcer for Updates", "selector": "[data-testid='weather-update-announcer'][aria-live]", "points": 1, "optional": true}
            ]
        },
        {
            "prompt_id": "FPC013_Music_Player_Interface_with_Playlist",
            "prompt_description": "Design and implement a web-based music player interface.\n\n**Core Components:**\n1.  **Player Controls (`data-testid='player-controls'`):**\n    *   Play/Pause button (icon-based, `data-testid='play-pause-btn'`, toggles `aria-label` 'Play'/'Pause' and visual icon).\n    *   Previous Track button (`data-testid='prev-track-btn'`).\n    *   Next Track button (`data-testid='next-track-btn'`).\n    *   Volume control (slider `input[type=range]`, `data-testid='volume-slider'`).\n    *   Progress bar for current track (clickable/draggable `input[type=range]` or custom styled `div`, `data-testid='progress-bar'`), showing current time and total duration.\n2.  **Now Playing Info (`data-testid='now-playing-info'`):**\n    *   Album Art (image).\n    *   Track Title.\n    *   Artist Name.\n3.  **Playlist View (`data-testid='playlist-view'`):**\n    *   A scrollable list of tracks. Each track item shows: Track Title, Artist, Duration.\n    *   Clicking a track in the playlist should start playing it.\n    *   The currently playing track in the playlist should be visually highlighted and have `aria-current='true'` or similar indication.\n    *   Each playlist item: `data-testid='playlist-item-N'`.\n\n**Simulated Playback Logic:**\n*   Use a JS array of 5-7 song objects (e.g., `{ title: 'Song A', artist: 'Artist X', durationSeconds: 180, albumArtUrl: '...' }`).\n*   Simulate playback: When 'Play' is hit, start a timer that updates the progress bar and current time display. No actual audio needs to play.\n*   Next/Previous should cycle through the playlist.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. The playlist is a list; player controls are a group of buttons.\n*   **Media Control Accessibility:** All player controls must be fully keyboard accessible. The Play/Pause button must clearly indicate its state (playing/paused) via `aria-pressed` or by changing `aria-label`.\n*   Progress bar and volume slider must be operable with keyboard (arrow keys).\n*   Focus should be managed when interacting with controls or playlist.\n*   The interface should be responsive. Playlist might become more compact on mobile.\n*   Styling: Tailwind CSS. Custom CSS/JS for player controls styling, progress bar updates, playlist highlighting, and overall player aesthetics.\n\n**Testing Identifiers:**\n*   Player Controls Container: `data-testid='player-controls'`\n*   Play/Pause Button: `data-testid='play-pause-btn'`\n*   Next Track Button: `data-testid='next-track-btn'`\n*   Volume Slider: `data-testid='volume-slider'`\n*   Progress Bar: `data-testid='progress-bar'`\n*   Now Playing Info Area: `data-testid='now-playing-info'`\n*   Playlist View: `data-testid='playlist-view'`\n*   A Playlist Item: `data-testid='playlist-item-1'`",
            "viewports_to_test": {"desktop": [1024, 768], "mobile": [375, 667]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Player Controls", "selector": "[data-testid='player-controls']", "points": 1},
                {"type": "element_presence", "name": "Play/Pause Button", "selector": "button[data-testid='play-pause-btn']", "points": 1},
                {"type": "element_presence", "name": "Next Track Button", "selector": "button[data-testid='next-track-btn']", "points": 1},
                {"type": "element_presence", "name": "Volume Slider", "selector": "input[type='range'][data-testid='volume-slider']", "points": 1},
                {"type": "element_presence", "name": "Progress Bar", "selector": "[data-testid='progress-bar']", "points": 1}, 
                {"type": "element_presence", "name": "Now Playing Info", "selector": "[data-testid='now-playing-info']", "points": 1},
                {"type": "element_presence", "name": "Playlist View", "selector": "[data-testid='playlist-view']", "points": 1},
                {"type": "element_count", "name": "Playlist Items (min 3)", "selector": "[data-testid='playlist-view'] [data-testid^='playlist-item-']", "min_count": 3, "points": 2},
                {
                    "type": "interaction", "name": "Play, Pause, Next Track Functionality", "points": 8,
                    "sequence": [
                        {"step_name": "Click Play", "trigger_element": {"selector": "button[data-testid='play-pause-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":1500, 
                         "expected_outcomes": [
                             {"outcome_type":"attribute_value_matches_pattern", "element_selector":"button[data-testid='play-pause-btn']", "attribute_name":"aria-label", "expected_value_pattern":".*Pause.*", "match_type":"contains", "note":"Or check aria-pressed='true'"},
                             {"outcome_type":"attribute_value_change_dynamic", "element_selector":"[data-testid='progress-bar']", "attribute_name":"value", "initial_wait_ms":500, "poll_interval_ms":500, "num_checks":1, "note":"Checks if progress bar value changes (increases). Assumes it's an input[type=range]"}
                         ]},
                        {"step_name": "Click Pause", "trigger_element": {"selector": "button[data-testid='play-pause-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":300,
                         "expected_outcomes": [
                             {"outcome_type":"attribute_value_matches_pattern", "element_selector":"button[data-testid='play-pause-btn']", "attribute_name":"aria-label", "expected_value_pattern":".*Play.*", "match_type":"contains", "note":"Or check aria-pressed='false'"}
                         ]},
                        {"step_name": "Click Next Track", "trigger_element": {"selector": "button[data-testid='next-track-btn']"}, "action":{"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [ 
                             {"outcome_type":"text_content_change_dynamic", "element_selector":"[data-testid='now-playing-info']", "initial_wait_ms":100, "poll_interval_ms":100, "num_checks":1, "note":"Checks if track title/artist in now-playing changes from its initial state. Requires capturing initial state."}
                         ]}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Playlist Item Click Plays Song", "script": "const firstItem = document.querySelector('[data-testid^=playlist-item-]:first-child'); if(!firstItem) return false; const initialTrack = document.querySelector('[data-testid=now-playing-info]').textContent; firstItem.click(); return new Promise(resolve => setTimeout(() => resolve(document.querySelector('[data-testid=now-playing-info]').textContent !== initialTrack), 500));", "points": 4},
                {"type": "custom_script_evaluates_true", "name": "Current Playlist Item Highlighted", "script": "/* Logic to click a song then check for aria-current or a highlight class */ const secondItem = document.querySelector('[data-testid=playlist-item-2]'); if(!secondItem) return true; secondItem.click(); return new Promise(resolve => setTimeout(() => resolve(secondItem.getAttribute('aria-current') === 'true' || secondItem.classList.contains('is-playing')), 500));", "points": 2}
            ]
        },
        {
            "prompt_id": "FPC014_Calendar_Event_Scheduling_Interface",
            "prompt_description": "Create a monthly calendar view for scheduling events. Users should be able to navigate months, view days, and (simulated) click a day to 'add' an event.\n\n**Interface Components:**\n1.  **Calendar Grid (`data-testid='calendar-grid'`):**\n    *   Display days of the current month in a grid (typically 7 columns for days of the week, 5-6 rows).\n    *   Show day numbers. Days not in the current month (leading/trailing) should be visually distinct (e.g., greyed out).\n    *   The current actual day should be highlighted.\n2.  **Month/Year Navigation:**\n    *   Display current Month and Year (e.g., 'July 2024') - `data-testid='current-month-year'`. \n    *   'Previous Month' button (`data-testid='prev-month-btn'`).\n    *   'Next Month' button (`data-testid='next-month-btn'`).\n3.  **Event Display (Simplified):**\n    *   If a day has a (simulated) event, indicate it visually (e.g., a dot or small text on the day cell).\n4.  **Add Event (Simulated):**\n    *   Clicking on a day cell in the calendar should trigger a mock 'add event' flow - for this test, it can simply log to the console 'Add event for [date]' or briefly show a message like 'Adding event to [date]' in an `aria-live` region (`data-testid='event-add-status'`).\n    *   Each day cell in the grid should be interactive (e.g., a button) and identifiable: `data-testid='day-cell-YYYY-MM-DD'`.\n\n**Core Logic (JS):**\n*   Dynamically generate the calendar grid for any given month/year.\n*   Handle month navigation.\n*   Simulate a few predefined events in a JS object to display on the calendar.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. The calendar grid should ideally use a `<table>` with `role='grid'` or a series of `div`s with appropriate ARIA grid roles (`row`, `gridcell`). Day cells should be focusable and interactive.\n*   **Keyboard Navigation for Calendar:** Users MUST be able to navigate the calendar grid using arrow keys (left/right for days, up/down for weeks). Enter/Space on a day cell should trigger the 'add event' action.\n*   Month/Year display should update correctly. Current day highlighting is crucial.\n*   The interface must be responsive.\n*   Styling: Tailwind CSS. Custom CSS/JS will be vital for calendar grid generation, day cell styling, event indicators, and keyboard navigation logic.\n\n**Testing Identifiers:**\n*   Calendar Grid Container: `data-testid='calendar-grid'`\n*   Current Month/Year Display: `data-testid='current-month-year'`\n*   Previous Month Button: `data-testid='prev-month-btn'`\n*   Next Month Button: `data-testid='next-month-btn'`\n*   A Day Cell (example): `data-testid='day-cell-2024-07-15'`\n*   Event Add Status (Live Region): `data-testid='event-add-status'`",
            "viewports_to_test": {"desktop": [1024, 768], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Calendar Grid", "selector": "[data-testid='calendar-grid']", "points": 2},
                {"type": "element_presence", "name": "Current Month/Year Display", "selector": "[data-testid='current-month-year']", "points": 1},
                {"type": "element_presence", "name": "Previous Month Button", "selector": "button[data-testid='prev-month-btn']", "points": 1},
                {"type": "element_presence", "name": "Next Month Button", "selector": "button[data-testid='next-month-btn']", "points": 1},
                {"type": "element_count", "name": "Day Cells in Grid (approx 28-35)", "selector": "[data-testid='calendar-grid'] [data-testid^='day-cell-']", "min_count": 28, "max_count": 42, "points": 2, "note":"Calendar grids vary slightly in cell count"},
                {
                    "type": "interaction", "name": "Navigate to Next Month", "points": 4,
                    "initial_setup": [{"action_type":"get_text_content", "selector":"[data-testid='current-month-year']", "store_as":"initialMonthYear"}],
                    "trigger_element": {"selector": "button[data-testid='next-month-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"text_content_change_dynamic", "element_selector":"[data-testid='current-month-year']", "initial_wait_ms":100, "poll_interval_ms":100, "num_checks":1, "note":"Checks if month/year text changes from initial."}
                    ]
                },
                {
                    "type": "interaction", "name": "Click Day Cell Triggers Action (Console Log or Live Region)", "points": 4,
                    "trigger_element": {"selector": "[data-testid^='day-cell-']:nth-child(15)"}, 
                    "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"custom_script_evaluates_true", "script": "return window.consoleLogBuffer && window.consoleLogBuffer.some(log => log.includes('Add event for')) || document.querySelector('[data-testid=event-add-status]').textContent.includes('Adding event');", "note":"Checks for console log or live region update. Requires console spy or specific live region text."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Calendar Uses ARIA Grid Roles or Table Semantics", "script": "const grid = document.querySelector('[data-testid=calendar-grid]'); if(!grid) return false; return grid.matches('table[role=grid], div[role=grid]');", "points": 3},
                {"type": "custom_script_evaluates_true", "name": "Day Cells are Focusable/Interactive", "script": "return Array.from(document.querySelectorAll('[data-testid^=day-cell-]')).every(cell => cell.matches('button, [tabindex=\"0\"], a[role=button]'));", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC015_Online_Code_Editor_Interface_Basic_Syntax_Highlight",
            "prompt_description": "Create a simplified online code editor interface with basic syntax highlighting for JavaScript.\n\n**Interface Components:**\n1.  **Editor Pane (`data-testid='code-editor-pane'`):**\n    *   A multi-line text input area (e.g., `<textarea>` or a `div` with `contenteditable='true'`). This is where users type code.\n    *   Line numbers should be displayed alongside the input area.\n    *   **Basic JS Syntax Highlighting (Client-Side):** As the user types JavaScript code, keywords (e.g., `function`, `const`, `let`, `if`, `else`, `return`), comments (e.g., `// ...` or `/* ... */`), and strings (e.g., `'...'` or `\"...\"`) should be visually differentiated with distinct colors. This will require JS to parse and style the content, likely by wrapping matched patterns in `<span>`s with specific classes.\n2.  **Language Selector (Dropdown - `data-testid='language-selector'`):**\n    *   A `<select>` dropdown allowing choice of language. For this test, include 'JavaScript' (default) and 'HTML' (syntax highlighting for HTML is optional extra credit, focus on JS).\n3.  **Run Code Button (`data-testid='run-code-btn'`):**\n    *   When clicked, it should take the content of the editor pane and (for simulation) `eval()` it if it's JavaScript, or display it in an iframe/output pane if HTML. For security, if using `eval()`, wrap it in a try-catch and log output/errors to a console panel.\n4.  **Output/Console Panel (`data-testid='output-console-panel'`):**\n    *   A panel to display the result of `eval()` (e.g., `console.log` outputs from the executed JS) or render the HTML.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. The editor pane, if `contenteditable`, needs appropriate ARIA roles (`role='textbox'`, `aria-multiline='true'`).\n*   **Syntax Highlighting Engine:** This is a core challenge. It requires parsing the input text with regular expressions or a more sophisticated tokenizer to identify JS tokens and apply styles.\n*   **Line Numbers:** Must update correctly as text is added or removed, and scroll with the editor content.\n*   The editor MUST be keyboard accessible, including Tab key behavior (should insert a tab character or spaces, not move focus out, unless Shift+Tab).\n*   The interface should be responsive.\n*   Styling: Tailwind CSS. Significant custom CSS/JS for syntax highlighting colors, line numbers, editor behavior, and panel layouts.\n\n**Testing Identifiers:**\n*   Code Editor Pane: `data-testid='code-editor-pane'`\n*   Language Selector: `data-testid='language-selector'`\n*   Run Code Button: `data-testid='run-code-btn'`\n*   Output/Console Panel: `data-testid='output-console-panel'`\n*   Line Number Gutter (container): `data-testid='line-numbers'`",
            "viewports_to_test": {"desktop": [1440, 900], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Code Editor Pane", "selector": "[data-testid='code-editor-pane']", "points": 2},
                {"type": "element_presence", "name": "Language Selector", "selector": "select[data-testid='language-selector']", "points": 1},
                {"type": "element_presence", "name": "Run Code Button", "selector": "button[data-testid='run-code-btn']", "points": 1},
                {"type": "element_presence", "name": "Output/Console Panel", "selector": "[data-testid='output-console-panel']", "points": 1},
                {"type": "element_presence", "name": "Line Numbers Gutter", "selector": "[data-testid='line-numbers']", "points": 2},
                {
                    "type": "interaction", "name": "Basic JS Syntax Highlighting Test", "points": 6,
                    "initial_setup": [{"action_type":"execute_script", "script":"const editor = document.querySelector('[data-testid=code-editor-pane]'); if(editor.value !== undefined) editor.value = 'function hello() { const msg = \"world\"; /* comment */ return msg; }'; else editor.innerHTML = 'function hello() { const msg = \"world\"; /* comment */ return msg; }'; /* Trigger highlight update if needed */ if(typeof window.updateHighlighting === 'function') window.updateHighlighting();"}],
                    "wait_for_outcome_ms":1000,
                    "expected_outcomes": [
                        {"outcome_type":"custom_script_evaluates_true", "script":"const editor = document.querySelector('[data-testid=code-editor-pane]'); const content = editor.value !== undefined ? editor.value : editor.innerHTML; return content.includes('<span class=\"keyword\">function</span>') && content.includes('<span class=\"string\">\"world\"</span>') && content.includes('<span class=\"comment\">/* comment */</span>');", "note":"Checks for specific span classes around tokens. Class names are examples."}
                    ]
                },
                {
                    "type": "interaction", "name": "Run JS Code with console.log", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"const editor = document.querySelector('[data-testid=code-editor-pane]'); if(editor.value !== undefined) editor.value = 'console.log(\"Hello from editor!\");'; else editor.innerHTML = 'console.log(\"Hello from editor!\");';"}],
                    "trigger_element": {"selector": "button[data-testid='run-code-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"text_content_change", "element_selector":"[data-testid='output-console-panel']", "expected_text":"Hello from editor!", "match_type":"contains"}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Tab Key Inserts Tab in Editor", "script": "const editor = document.querySelector('[data-testid=\"code-editor-pane\"]'); editor.focus(); const initialValue = editor.value || editor.textContent; editor.dispatchEvent(new KeyboardEvent('keydown', {key: 'Tab', bubbles: true, cancelable: true})); const finalValue = editor.value || editor.textContent; return finalValue.includes('\\t') || finalValue.length > initialValue.length;", "points": 3, "note":"Simplified check for tab insertion."}
            ]
        },
        {
            "prompt_id": "FPC016_Interactive_Globe_Data_Visualisation_Page_Simulated",
            "prompt_description": "Create a webpage featuring a (simulated) interactive 3D globe for data visualisation. The focus is on the UI controls and simulated interaction, not actual WebGL rendering.\n\n**Page Components:**\n1.  **Globe Placeholder (`data-testid='globe-container'`):**\n    *   A large `div` that represents the 3D globe. It could have a static image of a globe or a simple CSS animation (e.g., slow rotation).\n    *   When data points are 'active', display them as styled markers (e.g., `div`s with `position:absolute`) overlaid on the globe image at predefined coordinates. Each marker: `data-testid='globe-marker-N'`.\n2.  **Control Panel (`data-testid='globe-controls'`):**\n    *   **Dataset Selector:** A `<select>` dropdown (`data-testid='dataset-selector'`) to choose different data layers to display (e.g., 'Population Density', 'Earthquakes', 'Flight Paths'). (Simulate: changing selection updates the markers shown).\n    *   **Time Slider/Animation Control:** An `input[type=range]` (`data-testid='time-slider'`) to simulate progression through time for time-series data. Moving the slider should update which markers are visible or change their appearance (e.g., size/color based on value at that time step). Play/Pause buttons for time animation.\n    *   **Zoom Controls:** '+' and '-' buttons (`data-testid='zoom-in-btn'`, `data-testid='zoom-out-btn'`) that simulate zooming on the globe (e.g., by changing the `transform: scale()` of the globe placeholder).\n3.  **Information Panel (`data-testid='info-panel'`):**\n    *   When a marker on the globe is clicked (or hovered), display detailed information about that data point in this panel.\n\n**Simulated Data & Interaction Logic (JS):**\n*   Define JS objects for a few datasets. Each dataset has an array of points, each point with (simulated) lat/lon (map to X/Y for overlay), and data values (possibly varying over 'time').\n*   Changing the dataset selector re-renders markers.\n*   Moving the time slider filters/updates markers based on their 'time' property.\n*   Clicking a marker populates the info panel.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. The globe itself might be an `<figure>`. Controls are standard form elements.\n*   **Globe Interaction Accessibility:** Markers, even if absolutely positioned, must be part of the focus order or have an alternative way to access their information (e.g., a list view of active data points that can be keyboard navigated).\n*   Control panel elements MUST be fully keyboard accessible. Sliders need `aria-valuenow`, `aria-valuemin`, `aria-valuemax`.\n*   Information panel updates should be announced to assistive technologies if appropriate (e.g. `aria-live`).\n*   Responsive design: Globe and controls must adapt. On mobile, controls might be in a collapsible panel.\n*   Styling: Tailwind CSS. Significant custom CSS/JS for positioning markers, globe animations (if any), slider interactions, and dynamic info panel content.\n\n**Testing Identifiers:**\n*   Globe Container: `data-testid='globe-container'`\n*   A Globe Marker: `data-testid='globe-marker-1'`\n*   Dataset Selector: `data-testid='dataset-selector'`\n*   Time Slider: `data-testid='time-slider'`\n*   Zoom In Button: `data-testid='zoom-in-btn'`\n*   Information Panel: `data-testid='info-panel'`",
            "viewports_to_test": {"desktop": [1600, 900], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Globe Container", "selector": "[data-testid='globe-container']", "points": 2},
                {"type": "element_presence", "name": "Dataset Selector", "selector": "select[data-testid='dataset-selector']", "points": 2},
                {"type": "element_presence", "name": "Time Slider", "selector": "input[type='range'][data-testid='time-slider']", "points": 2},
                {"type": "element_presence", "name": "Zoom In Button", "selector": "button[data-testid='zoom-in-btn']", "points": 1},
                {"type": "element_presence", "name": "Information Panel", "selector": "[data-testid='info-panel']", "points": 1},
                {
                    "type": "interaction", "name": "Change Dataset and See Markers Update", "points": 5,
                    "initial_setup": [{"action_type":"get_element_count", "selector":"[data-testid^='globe-marker-']", "store_as":"initialMarkerCount"}],
                    "trigger_element": {"selector": "select[data-testid='dataset-selector']"}, "action": {"type":"select_option_by_index", "index":1}, 
                    "wait_for_outcome_ms":1000,
                    "expected_outcomes": [ 
                        {"outcome_type":"custom_script_evaluates_true", "script":"const finalMarkerCount = document.querySelectorAll(\"[data-testid^='globe-marker-']\").length; return finalMarkerCount !== window.initialMarkerCount || document.body.textContent.includes('NewDatasetData');", "note":"Checks marker count change or specific data appearance from new dataset."}
                    ]
                },
                {
                    "type": "interaction", "name": "Click Marker Populates Info Panel", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"/* Ensure some markers are visible first by selecting a dataset */ document.querySelector('select[data-testid=dataset-selector]').selectedIndex = 0; document.querySelector('select[data-testid=dataset-selector]').dispatchEvent(new Event('change'));"}],
                    "wait_for_initial_setup_ms":500,
                    "trigger_element": {"selector": "[data-testid^='globe-marker-']:first-child", "note":"Requires markers to be present"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"text_content_exists", "element_selector":"[data-testid='info-panel']", "expected_text_pattern": ".+", "note":"Checks if info panel has any text content after click."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Time Slider Has ARIA Value Attributes", "script": "const slider = document.querySelector('input[type=range][data-testid=time-slider]'); return slider && slider.hasAttribute('aria-valuenow') && slider.hasAttribute('aria-valuemin') && slider.hasAttribute('aria-valuemax');", "points": 3},
                {"type": "custom_script_evaluates_true", "name": "Zoom Buttons Affect Globe Scale (Simulated)", "script": "const globe = document.querySelector('[data-testid=globe-container]'); const initialScale = getComputedStyle(globe).transform; document.querySelector('button[data-testid=zoom-in-btn]').click(); return new Promise(resolve => setTimeout(() => resolve(getComputedStyle(globe).transform !== initialScale), 500));", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC017_Online_File_Explorer_Interface_with_Tree_View_and_Context_Menus",
            "prompt_description": "Create a web-based file explorer interface, similar to Windows Explorer or macOS Finder, with a tree view for navigation and context menus for actions.\n\n**Interface Components:**\n1.  **Tree View Pane (`data-testid='file-tree-pane'`):**\n    *   Displays a hierarchical list of folders (and optionally files).\n    *   Folders can be expanded/collapsed to show/hide sub-folders. Each folder item should indicate its state (expanded/collapsed) visually and via `aria-expanded`.\n    *   Clicking a folder name in the tree should display its contents in the Main Content Pane.\n    *   Folder items: `data-testid='tree-folder-item-PATH'` (e.g., 'tree-folder-item-Documents-Work').\n2.  **Main Content Pane (`data-testid='main-content-pane'`):**\n    *   Displays the contents (files and sub-folders) of the currently selected folder from the tree view.\n    *   Can be a grid view or list view.\n    *   Each item (file/folder) should be selectable. Clicking an item selects it; clicking again (or a dedicated 'Open' action) might simulate opening it (log to console).\n    *   Items in main pane: `data-testid='content-item-NAME'`.\n3.  **Context Menus (Right-Click Simulation):**\n    *   Right-clicking (or pressing a menu key) on a folder in the tree view OR an item in the main content pane should open a custom context menu (`data-testid='context-menu'`).\n    *   Context menu options could include: 'Open', 'Rename', 'Delete', 'New Folder' (actions are simulated - log to console).\n    *   The context menu should be positioned near the clicked item, be keyboard navigable, and close on Escape or click outside.\n4.  **Breadcrumb Navigation (`data-testid='breadcrumb-nav'`):**\n    *   Shows the current path (e.g., 'Home > Documents > Work'). Clicking a breadcrumb navigates to that folder.\n\n**Simulated File System (JS):**\n*   Define a nested JavaScript object representing a simple directory structure (folders containing files and other folders).\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Tree view should use `role='tree'` and tree items `role='treeitem'`. `aria-expanded` is crucial for folders. `aria-selected` for selected items.\n*   **Tree View Keyboard Navigation:** Full keyboard support (Up/Down arrows to navigate, Right arrow to expand folder/navigate to child, Left arrow to collapse/navigate to parent, Enter to select/open).\n*   **Context Menu Accessibility:** Must be `role='menu'` with `role='menuitem'`, fully keyboard navigable. Focus management is critical when opening/closing.\n*   State (current folder, selected item) must be managed in JS.\n*   Responsive design for all panes.\n*   Styling: Tailwind CSS. Extensive custom CSS/JS for tree view rendering/interaction, context menu logic/styling, main content view, and dynamic updates.\n\n**Testing Identifiers:**\n*   File Tree Pane: `data-testid='file-tree-pane'`\n*   A Folder in Tree: `data-testid='tree-folder-item-Documents'`\n*   Main Content Pane: `data-testid='main-content-pane'`\n*   An Item in Main Content: `data-testid='content-item-Report.docx'`\n*   Context Menu: `data-testid='context-menu'`\n*   Breadcrumb Navigation: `data-testid='breadcrumb-nav'`",
            "viewports_to_test": {"desktop": [1600, 900], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "File Tree Pane with ARIA Role", "selector": "[data-testid='file-tree-pane'][role='tree']", "points": 2},
                {"type": "element_presence", "name": "Main Content Pane", "selector": "[data-testid='main-content-pane']", "points": 1},
                {"type": "element_presence", "name": "Breadcrumb Navigation", "selector": "[data-testid='breadcrumb-nav']", "points": 1},
                {"type": "element_count", "name": "Tree Folder Items (min 2)", "selector": "[data-testid='file-tree-pane'] [role='treeitem'][aria-expanded]", "min_count": 2, "points": 2},
                {"type": "element_presence", "name": "Context Menu (initially hidden)", "selector": "[data-testid='context-menu'][role='menu']", "points": 1, "check_visibility":"hidden", "optional":true, "note":"May not be in DOM until triggered"},
                {
                    "type": "interaction", "name": "Expand Folder in Tree View", "points": 5,
                    "trigger_element": {"selector": "[data-testid='file-tree-pane'] [role='treeitem'][aria-expanded='false']:first-of-type", "note":"Finds first collapsed folder"}, "action": {"type":"click"}, 
                    "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"attribute_change", "element_selector":"[data-testid='file-tree-pane'] [role='treeitem'][aria-expanded='false']:first-of-type", "attribute_name":"aria-expanded", "expected_value":"true", "note":"This check targets the *original* element, a robust test might need to re-query based on a more stable selector if the element itself changes."},
                        {"outcome_type":"element_count", "parent_element_selector":"[data-testid='file-tree-pane'] [role='treeitem'][aria-expanded='true']:first-of-type", "child_element_selector":"[role='treeitem']", "min_count":1, "note":"Checks if children appeared under the expanded folder"}
                    ]
                },
                {
                    "type": "interaction", "name": "Open Context Menu on a File/Folder", "points": 5, "viewports":["desktop"],
                    "trigger_element": {"selector": "[data-testid='main-content-pane'] [data-testid^='content-item-']:first-child", "note":"Target first item in main pane"}, "action": {"type":"right_click"},
                    "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"visibility_change", "element_selector":"[data-testid='context-menu'][role='menu']", "expected_visibility":"visible"},
                        {"outcome_type":"element_count", "parent_element_selector":"[data-testid='context-menu'][role='menu']", "child_element_selector":"[role='menuitem']", "min_count":2}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Tree View Keyboard Navigation (Arrow Keys - Basic)", "script": "const treeRoot = document.querySelector('[data-testid=file-tree-pane]'); const firstItem = treeRoot.querySelector('[role=treeitem]'); if(!firstItem) return false; firstItem.focus(); firstItem.dispatchEvent(new KeyboardEvent('keydown', {key: 'ArrowDown', bubbles: true})); return document.activeElement !== firstItem && treeRoot.contains(document.activeElement);", "points": 4},
                {"type": "custom_script_evaluates_true", "name": "Breadcrumb Updates on Navigation", "script": "/* This is complex to test without knowing the exact structure and interaction. Simulate a folder click and check if breadcrumb text changes. */ const folderToClick = document.querySelector('[data-testid^=\"tree-folder-item-\"]:not(:has([data-testid^=\"tree-folder-item-\"]))'); /* find a leaf folder in tree */ if(!folderToClick) return true; const initialBreadcrumb = document.querySelector('[data-testid=breadcrumb-nav]').textContent; folderToClick.click(); return new Promise(resolve => setTimeout(() => resolve(document.querySelector('[data-testid=breadcrumb-nav]').textContent !== initialBreadcrumb), 500));", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC018_Spreadsheet_Application_Interface_Basic_Features",
            "prompt_description": "Develop a simplified spreadsheet application interface (like a very basic Google Sheets or Excel Online).\n\n**Interface Components:**\n1.  **Grid Area (`data-testid='spreadsheet-grid'`):**\n    *   Display a grid of cells (e.g., 26 columns A-Z, 50 rows 1-50).\n    *   Each cell should be an `<input type='text'>` or a `div` with `contenteditable='true'` to allow data entry. Cells identifiable by `data-testid='cell-A1'`, `data-testid='cell-B2'`, etc.\n    *   Column headers (A, B, C...) and Row headers (1, 2, 3...) should be visible and fixed if the grid scrolls.\n2.  **Formula Bar (`data-testid='formula-bar'`):**\n    *   An `<input type='text'>` above the grid. When a cell is selected, its content (or formula if implemented) appears here. Editing the formula bar updates the selected cell.\n3.  **Toolbar (`data-testid='spreadsheet-toolbar'`):**\n    *   Basic formatting: Bold, Italic, Text Color (simple color picker or predefined color buttons).\n    *   Cell Fill Color.\n    *   Font Size selector.\n4.  **Sheet Tabs (Simulated):**\n    *   Buttons at the bottom for 'Sheet1', 'Sheet2' (`data-testid='sheet-tab-1'`). Clicking a tab would (in a full app) switch sheets; here, it can just change a displayed sheet name and clear/reset the grid for simulation.\n\n**Core Functionality (Client-Side):**\n*   **Cell Selection:** Clicking a cell selects it, highlights it, and shows its content in the formula bar.\n*   **Data Entry:** Typing in a cell or formula bar updates the cell's content.\n*   **Basic Formulas (Optional but VERY challenging):** Implement support for simple formulas like `=SUM(A1:A3)` or `=B2*C2`. When a cell with a formula loses focus, it should display the calculated result, while the formula bar still shows the formula. Cells referenced by formulas, when updated, should trigger recalculation in dependent cells.\n*   **Toolbar Actions:** Applying formatting from the toolbar should affect the selected cell(s).\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. The grid could be a large `<table>` or ARIA grid. Toolbar buttons need ARIA states.\n*   **Grid Keyboard Navigation:** Full arrow key navigation between cells. Enter/Tab should move to next cell/row appropriately. Shift+Enter/Tab for reverse.\n*   **Accessibility for Formulas:** If formulas are implemented, the calculated value should be what's primarily announced by screen readers for a cell, but the formula should also be accessible (perhaps via `aria-describedby` pointing to the formula bar when cell is focused).\n*   Responsive design: The grid will likely need horizontal scrolling on mobile. Toolbar might become a dropdown.\n*   Styling: Tailwind. Massive custom JS for grid generation, cell interaction, formula parsing/calculation (if attempted), toolbar logic, and state management.\n\n**Testing Identifiers:**\n*   Spreadsheet Grid: `data-testid='spreadsheet-grid'`\n*   A Cell (e.g., A1): `data-testid='cell-A1'`\n*   Formula Bar Input: `data-testid='formula-bar'`\n*   Toolbar: `data-testid='spreadsheet-toolbar'`\n*   Bold Button in Toolbar: `data-testid='toolbar-btn-sheet-bold'`\n*   Sheet Tab (e.g., Sheet1): `data-testid='sheet-tab-1'`",
            "viewports_to_test": {"desktop": [1920, 1080], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Spreadsheet Grid", "selector": "[data-testid='spreadsheet-grid']", "points": 2},
                {"type": "element_presence", "name": "Cell A1 (Example)", "selector": "[data-testid='cell-A1']", "points": 1, "note":"Checks for at least one cell by testid pattern"},
                {"type": "element_presence", "name": "Formula Bar", "selector": "input[data-testid='formula-bar']", "points": 2},
                {"type": "element_presence", "name": "Spreadsheet Toolbar", "selector": "[data-testid='spreadsheet-toolbar']", "points": 1},
                {"type": "element_presence", "name": "Sheet Tab 1", "selector": "button[data-testid='sheet-tab-1']", "points": 1},
                {
                    "type": "interaction", "name": "Cell Selection Updates Formula Bar", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"const cellA1 = document.querySelector('[data-testid=cell-A1]'); if(cellA1.value !== undefined) cellA1.value = 'Hello Sheet'; else cellA1.textContent = 'Hello Sheet';"}],
                    "trigger_element": {"selector": "[data-testid='cell-A1']"}, "action": {"type":"click"}, "wait_for_outcome_ms":300,
                    "expected_outcomes": [
                        {"outcome_type":"attribute_value", "element_selector":"input[data-testid='formula-bar']", "attribute_name":"value", "expected_value":"Hello Sheet"}
                    ]
                },
                {
                    "type": "interaction", "name": "Toolbar Bold Action Affects Cell", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"document.querySelector('[data-testid=cell-A1]').click(); /* Select cell A1 */"}],
                    "trigger_element": {"selector": "button[data-testid='toolbar-btn-sheet-bold']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"custom_script_evaluates_true", "script":"const cellA1 = document.querySelector('[data-testid=cell-A1]'); return getComputedStyle(cellA1).fontWeight === 'bold' || getComputedStyle(cellA1).fontWeight >= '700' || cellA1.querySelector('b, strong');", "note":"Checks computed style or internal bold tag."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Grid Keyboard Navigation (Arrow Right)", "script": "const cellA1 = document.querySelector('[data-testid=cell-A1]'); const cellB1 = document.querySelector('[data-testid=cell-B1]'); if(!cellA1 || !cellB1) return false; cellA1.focus(); cellA1.dispatchEvent(new KeyboardEvent('keydown', {key:'ArrowRight', bubbles:true})); return document.activeElement === cellB1;", "points": 4},
                {"type": "custom_script_evaluates_true", "name": "Basic Formula Calculation (A1=10, B1=20, C1=SUM(A1:B1) -> C1 shows 30)", "points": 4, "optional":true,
                 "script": "try { document.querySelector('[data-testid=cell-A1]').value = '10'; document.querySelector('[data-testid=cell-B1]').value = '20'; const cellC1 = document.querySelector('[data-testid=cell-C1]'); cellC1.value = '=SUM(A1:B1)'; cellC1.dispatchEvent(new Event('blur')); /* Trigger calculation */ return cellC1.value === '30' || cellC1.textContent === '30'; } catch(e) { return false; }", "note":"VERY challenging and depends heavily on implementation. Marked optional."}
            ]
        },
        {
            "prompt_id": "FPC019_Video_Conferencing_UI_with_Participant_Grid_and_Chat",
            "prompt_description": "Develop the UI for a video conferencing application (like Zoom or Google Meet), focusing on the participant grid, media controls, and chat.\n\n**Interface Components:**\n1.  **Main Video Grid (`data-testid='video-grid'`):**\n    *   Displays video feeds of participants (use placeholder images/colored divs instead of actual video streams). \n    *   The layout should adapt dynamically as participants join/leave (e.g., from a single large view to a grid). Highlight the active speaker (simulated).\n    *   Each participant's 'video' tile: `data-testid='participant-tile-USERID'`, showing their name and a mute status icon.\n2.  **Media Controls Bar (`data-testid='media-controls'`):**\n    *   Buttons: 'Mute/Unmute Mic' (`data-testid='toggle-mic-btn'`, toggles `aria-pressed` and icon), 'Start/Stop Video' (`data-testid='toggle-video-btn'`), 'Share Screen' (simulated action), 'Leave Meeting'.\n3.  **Participant List Panel (`data-testid='participants-panel'`, can be collapsible):**\n    *   Lists all participants by name. Indicates who is host, who is muted.\n4.  **Chat Panel (`data-testid='chat-panel'`, can be collapsible):**\n    *   Displays chat messages (sender, message, timestamp).\n    *   Input field (`data-testid='chat-input'`) and 'Send' button (`data-testid='send-chat-btn'`) for typing messages.\n5.  **Layout Controls (Optional):** Buttons to switch video grid layout (e.g., 'Speaker View', 'Grid View').\n\n**Simulated Logic (JS):**\n*   Simulate participants joining/leaving (add/remove tiles from video grid and participant list).\n*   Simulate active speaker changes (visually highlight a different participant tile).\n*   Chat messages are added to the chat panel client-side.\n*   Mute/unmute and video start/stop are UI changes only.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Video grid items could be figures or articles.\n*   **Media Control Accessibility:** All buttons must be keyboard accessible and clearly state their purpose and current state (e.g., 'Mute Mic, currently unmuted' changing to 'Unmute Mic, currently muted' via `aria-label` and `aria-pressed`).\n*   **Chat Accessibility:** Chat messages should be in an `aria-live` region or structured so screen readers announce new messages. Chat input needs a label.\n*   Focus management is critical, especially if panels are collapsible or modals are used.\n*   Responsive design for all components. Video grid layout must adapt significantly.\n*   Styling: Tailwind. Extensive custom JS for dynamic participant grid, chat functionality, media control states, and panel toggling.\n\n**Testing Identifiers:**\n*   Video Grid: `data-testid='video-grid'`\n*   A Participant Tile: `data-testid='participant-tile-user1'`\n*   Toggle Mic Button: `data-testid='toggle-mic-btn'`\n*   Toggle Video Button: `data-testid='toggle-video-btn'`\n*   Participants Panel: `data-testid='participants-panel'`\n*   Chat Panel: `data-testid='chat-panel'`\n*   Chat Input: `data-testid='chat-input'`\n*   Send Chat Button: `data-testid='send-chat-btn'`",
            "viewports_to_test": {"desktop": [1920, 1080], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Video Grid", "selector": "[data-testid='video-grid']", "points": 2},
                {"type": "element_count", "name": "Participant Tiles (min 2 initially)", "selector": "[data-testid='video-grid'] [data-testid^='participant-tile-']", "min_count": 2, "points": 2},
                {"type": "element_presence", "name": "Media Controls Bar", "selector": "[data-testid='media-controls']", "points": 1},
                {"type": "element_presence", "name": "Toggle Mic Button", "selector": "button[data-testid='toggle-mic-btn']", "points": 1},
                {"type": "element_presence", "name": "Toggle Video Button", "selector": "button[data-testid='toggle-video-btn']", "points": 1},
                {"type": "element_presence", "name": "Chat Panel", "selector": "[data-testid='chat-panel']", "points": 1},
                {"type": "element_presence", "name": "Chat Input", "selector": "input[data-testid='chat-input'], textarea[data-testid='chat-input']", "points": 1},
                {
                    "type": "interaction", "name": "Toggle Mic Button State and ARIA", "points": 5,
                    "trigger_element": {"selector": "button[data-testid='toggle-mic-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":300,
                    "expected_outcomes": [
                        {"outcome_type":"attribute_change", "element_selector":"button[data-testid='toggle-mic-btn']", "attribute_name":"aria-pressed", "expected_value":"true", "note":"Or 'false' if initial state was pressed. Checks for toggle."},
                        {"outcome_type":"attribute_value_matches_pattern", "element_selector":"button[data-testid='toggle-mic-btn']", "attribute_name":"aria-label", "expected_value_pattern": ".*(Unmute Mic|Mute Mic).*", "match_type":"contains", "note":"Label should reflect new state."}
                    ]
                },
                {
                    "type": "interaction", "name": "Send Chat Message Appears in Panel", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"document.querySelector('[data-testid=chat-input]').value = 'Test chat message';"}],
                    "trigger_element": {"selector": "button[data-testid='send-chat-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"text_content_change", "element_selector":"[data-testid='chat-panel']", "expected_text":"Test chat message", "match_type":"contains"},
                        {"outcome_type":"attribute_value", "element_selector":"[data-testid='chat-input']", "attribute_name":"value", "expected_value":"", "note":"Input should clear after send."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Active Speaker is Highlighted (Simulated)", "script": "/* Simulate speaker change via JS then check for a class */ if(typeof window.setActiveSpeaker === 'function') window.setActiveSpeaker('user2'); return document.querySelector('[data-testid=participant-tile-user2].active-speaker, [data-testid=participant-tile-user2] .is-speaking');", "points": 3, "note":"Requires JS function to simulate speaker change and a specific class for highlighting."},
                {"type": "custom_script_evaluates_true", "name": "Chat Panel has ARIA Live for New Messages", "script": "const chatPanel = document.querySelector('[data-testid=chat-panel]'); const messageList = chatPanel.querySelector('ul, div[role=log]'); return messageList && messageList.getAttribute('aria-live') === 'polite';", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC020_Graphical_Node_Based_Editor_Interface_Very_Complex",
            "prompt_description": "Develop a highly complex graphical node-based editor interface (like those used for visual programming, shader editing, or material design). This is an exceptionally challenging front-end task focusing on UI, interactions, and client-side logic.\n\n**Interface Components & Features:**\n1.  **Canvas Area (`data-testid='node-canvas'`):**\n    *   A large pannable and zoomable area where nodes are placed and connected. (Simulate panning/zooming via transform changes on a container).\n    *   Nodes can be dragged around on the canvas.\n2.  **Nodes (`data-testid='node-ITEM_ID'`):**\n    *   Visually distinct blocks. Each node has:\n        *   A Title.\n        *   Input Sockets/Ports (on the left or top, `data-testid='node-ITEM_ID-input-PORT_NAME'`).\n        *   Output Sockets/Ports (on the right or bottom, `data-testid='node-ITEM_ID-output-PORT_NAME'`).\n        *   Some nodes might have internal controls (e.g., a number input, a color picker - simulated).\n    *   Nodes should be selectable.\n3.  **Connections/Edges:**\n    *   Lines (SVG or styled `div`s) drawn between an output socket of one node and an input socket of another.\n    *   Users should be able to create connections by (simulated) dragging from one socket to another compatible socket.\n4.  **Node Palette/Library (`data-testid='node-palette'`, perhaps in a sidebar):**\n    *   A list of available node types (e.g., 'Input Data', 'Add Math', 'Image Texture', 'Output Display').\n    *   Dragging a node type from the palette onto the canvas should create a new instance of that node.\n5.  **Properties Panel (`data-testid='properties-panel'`):**\n    *   When a node is selected, this panel displays its editable properties (e.g., changing a value in an 'Input Data' node).\n\n**Simulated Logic (JS is paramount):**\n*   Node creation, deletion, dragging.\n*   Connection creation (visual only, no data flow logic needed unless very basic simulation is attempted) and deletion.\n*   Panning and zooming the canvas view.\n*   Updating node properties via the properties panel.\n*   Maintaining the state of the graph (nodes, positions, connections) in a JS data structure.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML where possible. The canvas could be an SVG or a `div`. Nodes are likely `div`s.\n*   **Accessibility for Node Editor:** This is extremely hard. \n    *   All nodes and sockets must be keyboard focusable and navigable (perhaps using a spatial navigation model or list-based alternative).\n    *   Creating connections via keyboard (e.g., select output socket, invoke 'connect mode', navigate to and select input socket).\n    *   The graph structure should be communicated to assistive technologies (e.g., 'Node A, output X connected to Node B, input Y'). This might involve `aria-flowto` or other advanced ARIA, or a textual representation.\n*   Responsive design: The canvas and panels must be usable, though complex interactions might be simplified on mobile.\n*   Styling: Tailwind for layout. Massive amounts of custom JS and potentially SVG for drawing connections, handling drag events, managing positions, canvas transformations, and dynamic updates. Custom CSS for node/socket appearance and connection styling.\n\n**Testing Identifiers:**\n*   Node Canvas: `data-testid='node-canvas'`\n*   A Draggable Node: `data-testid='node-AddMath-instance1'`\n*   An Input Socket on a Node: `data-testid='node-AddMath-instance1-input-valueA'`\n*   An Output Socket on a Node: `data-testid='node-AddMath-instance1-output-result'`\n*   Node Palette: `data-testid='node-palette'`\n*   An item in Node Palette: `data-testid='palette-item-InputData'`\n*   Properties Panel: `data-testid='properties-panel'`\n*   Connection (SVG path or div): `data-testid='connection-FROM_NODE_OUTPUT-TO_NODE_INPUT'` (dynamic ID)",
            "viewports_to_test": {"desktop": [1920, 1080], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Node Canvas", "selector": "[data-testid='node-canvas']", "points": 2},
                {"type": "element_presence", "name": "Node Palette", "selector": "[data-testid='node-palette']", "points": 1},
                {"type": "element_count", "name": "Palette Items (min 2)", "selector": "[data-testid='node-palette'] [data-testid^='palette-item-']", "min_count": 2, "points": 1},
                {"type": "element_presence", "name": "Properties Panel", "selector": "[data-testid='properties-panel']", "points": 1},
                {
                    "type": "interaction", "name": "Add Node from Palette to Canvas", "points": 6, "viewports":["desktop"],
                    "initial_setup": [{"action_type":"get_element_count", "selector":"[data-testid='node-canvas'] [data-testid^='node-']", "store_as":"initialNodeCountOnCanvas"}],
                    "trigger_element": {"selector": "[data-testid='node-palette'] [data-testid^='palette-item-']:first-child"},
                    "action": {"type":"drag_and_drop", "target_element_selector":"[data-testid='node-canvas']"},
                    "wait_for_outcome_ms":1000,
                    "expected_outcomes": [
                        {"outcome_type":"custom_script_evaluates_true", "script":"const finalNodeCount = document.querySelectorAll(\"[data-testid='node-canvas'] [data-testid^='node-']\").length; return finalNodeCount > window.initialNodeCountOnCanvas;", "note":"Checks if a new node appeared on canvas."}
                    ]
                },
                {
                    "type": "interaction", "name": "Drag Existing Node on Canvas", "points": 5, "viewports":["desktop"],
                    "initial_setup": [
                        {"action_type":"execute_script", "script":"/* Ensure a node exists, e.g. by simulating previous add */ const paletteItem = document.querySelector('[data-testid=node-palette] [data-testid^=palette-item-]:first-child'); if(paletteItem) { const canvas = document.querySelector('[data-testid=node-canvas]'); const paletteRect = paletteItem.getBoundingClientRect(); const canvasRect = canvas.getBoundingClientRect(); const dragEvent = new DragEvent('dragstart', { dataTransfer: new DataTransfer(), bubbles: true }); paletteItem.dispatchEvent(dragEvent); const dropEvent = new DragEvent('drop', { clientX: canvasRect.left + 50, clientY: canvasRect.top + 50, dataTransfer: dragEvent.dataTransfer, bubbles: true }); canvas.dispatchEvent(dropEvent); } "},
                        {"action_type":"get_element_position", "selector":"[data-testid='node-canvas'] [data-testid^='node-']:first-child", "store_as":"initialNodePos"}
                    ],
                    "wait_for_initial_setup_ms": 500,
                    "trigger_element": {"selector": "[data-testid='node-canvas'] [data-testid^='node-']:first-child"},
                    "action": {"type":"drag_by_offset", "x_offset":100, "y_offset":50},
                    "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"position_change", "element_selector":"[data-testid='node-canvas'] [data-testid^='node-']:first-child", "initial_pos_variable_name":"initialNodePos", "min_x_diff":50, "min_y_diff":25, "note":"Checks if node position changed significantly."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Nodes Have Input/Output Sockets", "script": "const firstNode = document.querySelector('[data-testid^=node-]:first-child'); if(!firstNode) return true; /* Skip if no node rendered by 'Add Node' */ return !!(firstNode.querySelector('[data-testid*=-input-]') && firstNode.querySelector('[data-testid*=-output-]'));", "points": 3},
                {"type": "custom_script_evaluates_true", "name": "Nodes are Keyboard Focusable (Basic)", "script": "const firstNode = document.querySelector('[data-testid^=node-]:first-child'); if(!firstNode) return true; return firstNode.hasAttribute('tabindex');", "points": 2},
                {"type": "custom_script_evaluates_true", "name": "Simulated Connection Creation (Visual Check)", "points": 4, "optional":true,
                 "script": "/* This is very hard to test without knowing specific implementation. It would involve simulating drag between sockets and checking for a new SVG path or div. */ if(typeof window.simulateConnection === 'function') { window.simulateConnection(); return !!document.querySelector('[data-testid^=connection-]'); } return true;", "note":"Extremely complex interaction, marked optional. Relies on a helper JS function for simulation."}
            ]
        },
        {
            "prompt_id": "FPC021_ECommerce_Checkout_Flow_Page",
            "prompt_description": "Design and implement a complete, responsive multi-step e-commerce checkout flow page. The flow should guide the user through shipping information, payment details, and order review before final confirmation.\n\n**Page Structure & Steps:**\n1.  **Step 1: Shipping Address (`data-testid='checkout-step-shipping'`)**\n    *   Form fields: Full Name, Address Line 1, Address Line 2 (optional), City, State/Province, Postal Code, Country (select dropdown), Phone Number.\n    *   All fields (except Address Line 2) are required. Basic client-side validation (e.g., `required` attribute, email format for an email field if it were here).\n    *   'Continue to Payment' button (`data-testid='btn-to-payment'`).\n2.  **Step 2: Payment Method (`data-testid='checkout-step-payment'`, initially hidden)**\n    *   Form fields for credit card: Cardholder Name, Card Number, Expiry Date (MM/YY format), CVV. (No actual validation logic for card numbers needed, just structure).\n    *   Option for 'Billing address same as shipping' (checkbox, `data-testid='same-as-shipping-cb'`). If unchecked, reveal billing address form (identical to shipping form fields but with different testids, e.g., `data-testid='billing-fullName'`).\n    *   'Back to Shipping' and 'Continue to Review' buttons.\n3.  **Step 3: Order Review (`data-testid='checkout-step-review'`, initially hidden)**\n    *   Display a summary of items in the cart (simulated: 2-3 items with name, quantity, price, and total price - `data-testid='cart-summary-table'`).\n    *   Display selected Shipping Address and Payment Method (placeholder text is fine).\n    *   Display Order Total (Subtotal, Shipping (fixed amount), Tax (calculated e.g. 10%), Grand Total - `data-testid='grand-total-display'`).\n    *   'Back to Payment' and 'Place Order' buttons (`data-testid='btn-place-order'`).\n4.  **Step 4: Confirmation Page (`data-testid='checkout-confirmation-page'`, initially hidden)**\n    *   Thank you message.\n    *   Order Number (e.g., 'Your Order #123XYZ is confirmed!').\n    *   'Continue Shopping' button.\n\n**Core Features:**\n*   **Progress Indicator:** Visually show current step (e.g., 'Shipping > Payment > Review'). Identifiable as `data-testid='checkout-progress'`. Current step should be highlighted (e.g. `aria-current='step'`).\n*   **Navigation:** Users must be able to navigate between visible steps. 'Next' buttons trigger validation before proceeding.\n*   **Client-Side Validation:** Display clear error messages next to invalid fields upon attempting to proceed from a step. Error message for Full Name: `data-testid='error-shipping-fullName'`.\n\n**Technical & Accessibility Requirements:**\n*   Full semantic HTML structure. Each step could be a `<section>` or `fieldset` within a main `<form>`.\n*   All form elements MUST have associated labels. Error messages programmatically linked (e.g., `aria-describedby` or `aria-errormessage`).\n*   Manage focus appropriately when navigating steps or revealing new form sections (e.g., billing address).\n*   Responsive design for all steps. Forms must be easy to use on mobile.\n*   Styling: Use Tailwind CSS. Custom CSS/JS for step transitions, progress indicator styling, and dynamic error messages.\n\n**Testing Identifiers (Key examples):**\n*   Checkout Form container: `data-testid='checkout-form'`\n*   Shipping Step container: `data-testid='checkout-step-shipping'`\n*   Shipping Full Name Input: `data-testid='shipping-fullName'`\n*   Error for Shipping Full Name: `data-testid='error-shipping-fullName'`\n*   Button to Payment Step: `data-testid='btn-to-payment'`\n*   Payment Step container: `data-testid='checkout-step-payment'`\n*   Same as Shipping Checkbox: `data-testid='same-as-shipping-cb'`\n*   Place Order Button: `data-testid='btn-place-order'`\n*   Confirmation Page container: `data-testid='checkout-confirmation-page'`\n*   Progress Indicator: `data-testid='checkout-progress'`",
            "viewports_to_test": {"desktop": [1280, 800], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Checkout Form", "selector": "form[data-testid='checkout-form']", "points": 1},
                {"type": "element_presence", "name": "Shipping Step (Initially Visible)", "selector": "[data-testid='checkout-step-shipping']", "check_visibility": true, "points": 1},
                {"type": "element_presence", "name": "Payment Step (Initially Hidden)", "selector": "[data-testid='checkout-step-payment']", "check_visibility": "hidden", "points": 1},
                {"type": "element_presence", "name": "Review Step (Initially Hidden)", "selector": "[data-testid='checkout-step-review']", "check_visibility": "hidden", "points": 1},
                {"type": "element_presence", "name": "Progress Indicator", "selector": "[data-testid='checkout-progress']", "points": 1},
                {
                    "type": "interaction", "name": "Proceed to Payment (Validation Fail)", "points": 4,
                    "initial_setup": [{"action_type":"execute_script", "script":"document.querySelector('[data-testid=shipping-fullName]').value = '';"}], 
                    "trigger_element": {"selector": "button[data-testid='btn-to-payment']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"text_content_exists", "element_selector":"[data-testid='error-shipping-fullName']", "note":"Error message should appear."},
                        {"outcome_type":"visibility_change", "element_selector":"[data-testid='checkout-step-shipping']", "expected_visibility":"visible", "note":"Should remain on shipping step."}
                    ]
                },
                {
                    "type": "interaction", "name": "Proceed to Payment (Validation Pass) & Toggle Billing Address", "points": 6,
                    "sequence": [
                        {"step_name": "Fill Shipping & Proceed", "action": {"type":"execute_script", "script":"document.querySelector('[data-testid=shipping-fullName]').value = 'Test User'; document.querySelector('[data-testid=shipping-addressLine1]').value = '123 Main St'; document.querySelector('[data-testid=shipping-city]').value = 'Testville'; document.querySelector('[data-testid=shipping-postalCode]').value = '12345'; /* Fill other required fields */"},
                         "post_actions": [{"action_type":"click_element", "selector":"button[data-testid='btn-to-payment']"}], "wait_after_post_action_ms":500,
                         "expected_outcomes": [{"outcome_type":"visibility_change", "element_selector":"[data-testid='checkout-step-payment']", "expected_visibility":"visible"}]
                        },
                        {"step_name": "Uncheck 'Same as Shipping'", "trigger_element": {"selector": "input[data-testid='same-as-shipping-cb']"}, "action":{"type":"click_if_checked"}, "wait_for_outcome_ms":300, 
                         "expected_outcomes": [{"outcome_type":"visibility_change", "element_selector":"[data-testid='billing-fullName']", "expected_visibility":"visible", "note":"Billing address form appears"}]
                        }
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Progress Indicator Current Step Highlighted", "script": "return !!document.querySelector('[data-testid=checkout-progress] [aria-current=step]');", "points": 2},
                {"type": "custom_script_evaluates_true", "name": "All Inputs (Shipping) Have Labels", "script": "return Array.from(document.querySelectorAll('[data-testid=checkout-step-shipping] input:not([type=submit]), [data-testid=checkout-step-shipping] select')).every(el => el.id && document.querySelector(`label[for='${el.id}']`));", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC022_Online_Survey_Builder_Page",
            "prompt_description": "Develop a webpage for creating online surveys. Users should be able to add different types of questions (multiple-choice, text input, rating scale), reorder questions, and preview the survey.\n\n**Page Structure & Features:**\n1.  **Survey Setup Area (`data-testid='survey-setup-area'`)**\n    *   Input for Survey Title (`data-testid='survey-title-input'`).\n    *   Input for Survey Description (textarea, `data-testid='survey-desc-input'`).\n2.  **Question Builder Area (`data-testid='question-builder-area'`)**\n    *   **Add Question Controls:** Buttons or a dropdown to add new question types: \n        *   'Add Multiple Choice' (`data-testid='btn-add-mcq'`).\n        *   'Add Text Input' (`data-testid='btn-add-textq'`).\n        *   'Add Rating Scale' (1-5, `data-testid='btn-add-ratingq'`).\n    *   **Question List:** An ordered list (`<ol data-testid='questions-list'>`) where added questions appear. Each question item (`data-testid='question-item-N'`) should display:\n        *   Question text (editable input `data-testid='qN-text'`).\n        *   Controls specific to question type (e.g., for MCQ: inputs to add/edit answer options `data-testid='qN-optionM-text'`, button to add more options `data-testid='qN-add-option'`; for Rating: labels for min/max scale).\n        *   'Delete Question' button (`data-testid='qN-delete-btn'`).\n        *   Drag handles (simulated or actual using HTML5 D&D) for reordering questions.\n3.  **Survey Preview Area (`data-testid='survey-preview-area'`, initially empty or placeholder)**\n    *   A 'Preview Survey' button (`data-testid='btn-preview-survey'`).\n    *   Clicking it renders a non-editable preview of how the survey would look to a respondent, based on the questions configured.\n\n**Core Logic (JS):**\n*   Dynamically add/remove question elements to/from the DOM.\n*   Manage state of each question (text, type, options).\n*   Implement reordering of questions in the list (if D&D, or up/down buttons).\n*   Generate the survey preview based on the current question configurations.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Each question in the builder could be a `fieldset`.\n*   **Dynamic Content Accessibility:** As questions are added/removed/reordered, ensure screen readers are informed (e.g., `aria-live` region for status updates, or proper focus management).\n*   All interactive elements (add/delete buttons, option inputs, reorder handles) must be keyboard accessible.\n*   Forms for question details (text, options) must have labels.\n*   Responsive design for builder and preview.\n*   Styling: Tailwind CSS. Significant JS for dynamic DOM, state management, and preview generation. Custom CSS might be needed for unique styling of question builder elements.\n\n**Testing Identifiers:**\n*   Survey Title Input: `data-testid='survey-title-input'`\n*   Add MCQ Button: `data-testid='btn-add-mcq'`\n*   Questions List: `data-testid='questions-list'`\n*   First Question Item Text (example): `data-testid='q1-text'`\n*   First Question's Add Option Button (for MCQ): `data-testid='q1-add-option'`\n*   First Question's Delete Button: `data-testid='q1-delete-btn'`\n*   Preview Survey Button: `data-testid='btn-preview-survey'`\n*   Survey Preview Area: `data-testid='survey-preview-area'`",
            "viewports_to_test": {"desktop": [1440, 900], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Survey Title Input", "selector": "input[data-testid='survey-title-input']", "points": 1},
                {"type": "element_presence", "name": "Add MCQ Button", "selector": "button[data-testid='btn-add-mcq']", "points": 1},
                {"type": "element_presence", "name": "Questions List", "selector": "ol[data-testid='questions-list']", "points": 1},
                {"type": "element_presence", "name": "Preview Survey Button", "selector": "button[data-testid='btn-preview-survey']", "points": 1},
                {
                    "type": "interaction", "name": "Add MCQ Question and Option", "points": 7,
                    "sequence": [
                        {"step_name": "Click Add MCQ", "trigger_element": {"selector": "button[data-testid='btn-add-mcq']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [
                             {"outcome_type":"element_count", "parent_element_selector":"ol[data-testid='questions-list']", "child_element_selector":"[data-testid^='question-item-']", "expected_count":1},
                             {"outcome_type":"element_exists", "element_selector":"input[data-testid='q1-text']"},
                             {"outcome_type":"element_exists", "element_selector":"button[data-testid='q1-add-option']"}
                         ]},
                        {"step_name": "Add Option to MCQ", "trigger_element": {"selector": "button[data-testid='q1-add-option']"}, "action":{"type":"click"}, "wait_for_outcome_ms":300,
                         "expected_outcomes": [{"outcome_type":"element_count", "parent_element_selector":"[data-testid='question-item-1']", "child_element_selector":"input[data-testid^='q1-option']", "min_count":1, "note":"Assumes at least one option input is added by default, this adds another"}]}
                    ]
                },
                {
                    "type": "interaction", "name": "Delete Question", "points": 4,
                    "initial_setup": [{"action_type":"execute_script", "script":"document.querySelector('button[data-testid=btn-add-mcq]').click();"}], 
                    "wait_for_initial_setup_ms": 500,
                    "trigger_element": {"selector": "button[data-testid='q1-delete-btn']"}, "action":{"type":"click"}, "wait_for_outcome_ms":300,
                    "expected_outcomes": [
                        {"outcome_type":"element_count", "parent_element_selector":"ol[data-testid='questions-list']", "child_element_selector":"[data-testid^='question-item-']", "expected_count":0}
                    ]
                },
                {
                    "type": "interaction", "name": "Preview Survey Renders Content", "points": 4,
                    "initial_setup": [{"action_type":"execute_script", "script":"document.querySelector('button[data-testid=btn-add-mcq]').click(); setTimeout(() => document.querySelector('input[data-testid=q1-text]').value = 'My First Question';, 100);"}],
                    "wait_for_initial_setup_ms": 500,
                    "trigger_element": {"selector": "button[data-testid='btn-preview-survey']"}, "action":{"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"text_content_change", "element_selector":"[data-testid='survey-preview-area']", "expected_text":"My First Question", "match_type":"contains"}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Question Text Inputs Have Labels or ARIA", "script": "return Array.from(document.querySelectorAll('input[data-testid^=q][data-testid*=-text]')).every(el => el.getAttribute('aria-label') || (el.id && document.querySelector(`label[for='${el.id}']`)));", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC023_Fitness_App_Dashboard_Page",
            "prompt_description": "Design a responsive dashboard page for a fitness tracking application. It should display user activity summaries, progress charts, and a log of recent activities.\n\n**Page Layout & Components:**\n1.  **Header:** User's name/greeting (e.g., 'Hello, Alex!'), date.\n2.  **Summary Metrics Section (`data-testid='metrics-summary-section'`)**\n    *   Display 3-4 key metrics as 'cards': 'Steps Today', 'Calories Burned', 'Active Minutes', 'Distance Covered'. \n    *   Each card (`data-testid='metric-card-steps'`, etc.) should show the metric name, value, and a small relevant icon (SVG or text).\n3.  **Progress Charts Section (`data-testid='charts-section'`)**\n    *   **Weekly Steps Chart:** A bar chart (`data-testid='weekly-steps-chart'`) showing steps taken each day for the last 7 days.\n    *   **Weight Trend Chart:** A line chart (`data-testid='weight-trend-chart'`) showing weight progress over the last month (simulated data).\n    *   Charts should be implemented using a library (e.g., Chart.js CDN) or as accessible SVG charts.\n4.  **Recent Activities Log (`data-testid='activity-log-section'`)**\n    *   A table or list (`data-testid='activity-log-table'`) displaying recent workouts: Activity Type (e.g., Running, Cycling), Duration, Distance, Calories Burned.\n    *   Include at least 3-5 sample entries.\n5.  **'Add Activity' Button (`data-testid='btn-add-activity'`)**\n    *   A button that would (in a full app) open a modal or form to log a new activity. For this test, clicking it can simply log to console 'Add activity form opened'.\n\n**Simulated Data (JS):**\n*   Provide sample data for metrics, chart data points, and activity log entries.\n\n**Technical & Accessibility Requirements:**\n*   Full semantic HTML structure (header, main, sections, etc.).\n*   **Chart Accessibility:** Charts MUST have accessible names/titles (e.g., via `aria-label` on canvas/svg, or a visible title element linked with `aria-labelledby`). Data points should be perceivable (e.g., tooltips on hover/focus, or data table fallback if complex).\n*   **Data Table Accessibility:** If a table is used for the activity log, ensure it has a caption and properly scoped headers.\n*   The dashboard MUST be responsive. Charts and tables must adapt to smaller screen sizes gracefully.\n*   All interactive elements must be keyboard accessible and have clear focus states.\n*   Styling: Tailwind CSS. Custom CSS/JS likely needed for chart styling and responsiveness, and potentially for unique card designs.\n\n**Testing Identifiers:**\n*   Metrics Summary Section: `data-testid='metrics-summary-section'`\n*   Steps Metric Card: `data-testid='metric-card-steps'`\n*   Weekly Steps Chart Container: `data-testid='weekly-steps-chart'`\n*   Weight Trend Chart Container: `data-testid='weight-trend-chart'`\n*   Activity Log Table/List: `data-testid='activity-log-table'`\n*   Add Activity Button: `data-testid='btn-add-activity'`",
            "viewports_to_test": {"desktop": [1440, 900], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Metrics Summary Section", "selector": "[data-testid='metrics-summary-section']", "points": 1},
                {"type": "element_count", "name": "Metric Cards (min 3)", "selector": "[data-testid='metrics-summary-section'] [data-testid^='metric-card-']", "min_count": 3, "points": 2},
                {"type": "element_presence", "name": "Weekly Steps Chart Area", "selector": "[data-testid='weekly-steps-chart']", "points": 2, "note":"Checks for canvas/svg within this for chart"},
                {"type": "element_presence", "name": "Weight Trend Chart Area", "selector": "[data-testid='weight-trend-chart']", "points": 2, "note":"Checks for canvas/svg within this for chart"},
                {"type": "element_presence", "name": "Activity Log Table/List", "selector": "[data-testid='activity-log-table']", "points": 2},
                {"type": "element_count", "name": "Activity Log Entries (min 3)", "selector": "[data-testid='activity-log-table'] tr, [data-testid='activity-log-table'] li", "min_count": 3, "points": 2, "note":"Supports table rows or list items"},
                {"type": "element_presence", "name": "Add Activity Button", "selector": "button[data-testid='btn-add-activity']", "points": 1},
                {
                    "type": "interaction", "name": "Add Activity Button Click (Console Log)", "points": 3,
                    "trigger_element": {"selector": "button[data-testid='btn-add-activity']"}, "action": {"type":"click"}, "wait_for_outcome_ms":300,
                    "expected_outcomes": [
                        {"outcome_type":"custom_script_evaluates_true", "script":"return window.consoleLogBuffer && window.consoleLogBuffer.some(log => log.includes('Add activity form opened'));", "note":"Requires console spy."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Steps Chart Has Accessible Name", "script": "const chart = document.querySelector('[data-testid=\"weekly-steps-chart\"]'); if (!chart) return false; const canvasOrSvg = chart.querySelector('canvas, svg'); if (!canvasOrSvg) return false; return canvasOrSvg.getAttribute('aria-label') || canvasOrSvg.querySelector('title') || chart.getAttribute('aria-labelledby');", "points": 3},
                {"type": "custom_script_evaluates_true", "name": "Activity Log Table is Accessible (Caption & TH Scope if table)", "script": "const logTable = document.querySelector('table[data-testid=activity-log-table]'); if (logTable) { return !!logTable.querySelector('caption') && Array.from(logTable.querySelectorAll('thead th')).every(th => th.hasAttribute('scope')); } return true; /* Pass if not a table */", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC024_Interactive_Choose_Your_Own_Adventure_Story_Page",
            "prompt_description": "Create a webpage for an interactive 'Choose Your Own Adventure' style story. The user reads a part of the story and then makes a choice that dictates the next part of the story.\n\n**Page Structure & Features:**\n1.  **Story Display Area (`data-testid='story-text-area'`)**\n    *   Displays the current segment of the story text.\n    *   Should dynamically update as the user makes choices.\n2.  **Choices Area (`data-testid='story-choices-area'`)**\n    *   Displays 2-4 buttons, each representing a choice for the current story segment. \n    *   Each choice button: `data-testid='choice-btn-N'`.\n    *   Clicking a choice button loads the next corresponding story segment and new choices.\n3.  **Story State Indicators (Optional but good):**\n    *   Current chapter/scene number.\n    *   An inventory display if the story involves collecting items (`data-testid='inventory-display'`).\n4.  **Restart Button (`data-testid='restart-story-btn'`)**\n    *   Allows the user to restart the story from the beginning.\n\n**Story Logic (Simulated Data - JS):**\n*   Define a tree-like or graph data structure in JavaScript representing the story. Each node has: `id`, `storyText`, and an array of `choices` (each choice having `text` for the button and `nextSceneId` to jump to).\n*   Maintain the current scene ID in JS state.\n*   Clicking a choice updates the current scene ID, re-renders the story text and new choices.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Story segments could be in `<p>` or `<article>` tags.\n*   **Dynamic Content & ARIA:** The story text and choices areas are highly dynamic. Use `aria-live='polite'` (or `assertive` if appropriate for immediate feedback) on the story text area (`data-testid='story-text-area'`) so screen readers announce new story segments. Manage focus when new content loads (e.g., to the story text or first choice).\n*   Choice buttons MUST be keyboard accessible and clearly labeled.\n*   The page MUST be responsive.\n*   Styling: Tailwind CSS. Custom JS is central for story logic, state management, and DOM updates.\n\n**Testing Identifiers:**\n*   Story Text Area: `data-testid='story-text-area'`\n*   Story Choices Area: `data-testid='story-choices-area'`\n*   A Choice Button (example): `data-testid='choice-btn-1'`\n*   Restart Story Button: `data-testid='restart-story-btn'`\n*   Inventory Display (if implemented): `data-testid='inventory-display'`",
            "viewports_to_test": {"desktop": [1024, 768], "mobile": [375, 667]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Story Text Area with ARIA Live", "selector": "[data-testid='story-text-area'][aria-live]", "points": 2},
                {"type": "element_presence", "name": "Story Choices Area", "selector": "[data-testid='story-choices-area']", "points": 1},
                {"type": "element_count", "name": "Choice Buttons (min 2 initially)", "selector": "[data-testid='story-choices-area'] button[data-testid^='choice-btn-']", "min_count": 2, "points": 2},
                {"type": "element_presence", "name": "Restart Story Button", "selector": "button[data-testid='restart-story-btn']", "points": 1},
                {
                    "type": "interaction", "name": "Make a Choice and See Story/Choices Update", "points": 7,
                    "initial_setup": [
                        {"action_type":"get_text_content", "selector":"[data-testid='story-text-area']", "store_as":"initialStoryText"},
                        {"action_type":"get_text_content", "selector":"[data-testid='story-choices-area'] button[data-testid^='choice-btn-']:first-child", "store_as":"initialChoice1Text"}
                    ],
                    "trigger_element": {"selector": "[data-testid='story-choices-area'] button[data-testid^='choice-btn-']:first-child"}, "action": {"type":"click"}, "wait_for_outcome_ms":1000, 
                    "expected_outcomes": [
                        {"outcome_type":"custom_script_evaluates_true", "script":"return document.querySelector('[data-testid=story-text-area]').textContent !== window.initialStoryText;", "note":"Story text should change."},
                        {"outcome_type":"custom_script_evaluates_true", "script":"const newChoice1 = document.querySelector('[data-testid=story-choices-area] button[data-testid^=choice-btn-]:first-child'); return !newChoice1 || newChoice1.textContent !== window.initialChoice1Text;", "note":"Choices should change or be different."},
                        {"outcome_type":"element_count", "parent_element_selector":"[data-testid='story-choices-area']", "child_element_selector":"button[data-testid^='choice-btn-']", "min_count":1, "note":"New choices should appear (or could be end of story)."}
                    ]
                },
                {
                    "type": "interaction", "name": "Restart Story Resets View", "points": 4,
                     "initial_setup": [ 
                        {"action_type":"execute_script", "script":"document.querySelector(\"[data-testid='story-choices-area'] button[data-testid^='choice-btn-']:first-child\").click();"}
                    ],
                    "wait_for_initial_setup_ms": 500,
                    "trigger_element": {"selector": "button[data-testid='restart-story-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [ 
                        {"outcome_type":"custom_script_evaluates_true", "script":"return document.querySelector('[data-testid=story-text-area]').textContent === window.initialStoryTextAtLoad; /* Requires capturing very first load text */", "note":"Requires storing the very first story text."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Focus Managed After Choice (e.g., to new story text)", "script": "document.querySelector(\"[data-testid='story-choices-area'] button[data-testid^='choice-btn-']:first-child\").click(); return new Promise(resolve => setTimeout(() => resolve(document.activeElement === document.querySelector('[data-testid=story-text-area]') || document.querySelector('[data-testid=story-choices-area]').contains(document.activeElement)), 500));", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC025_Advanced_Project_Task_Board_Page",
            "prompt_description": "Develop an advanced project task board page with multiple columns, draggable tasks, task editing modals, and filtering/sorting capabilities for tasks within columns.\n\n**Page Structure & Features:**\n1.  **Board Columns:** At least four columns: 'Backlog', 'To Do', 'In Progress', 'Completed'. Each identifiable `data-testid='task-column-backlog'`, etc., and acts as a drop zone.\n2.  **Task Cards:** \n    *   Draggable between columns (`draggable='true'`, `data-testid='task-card-ID'`).\n    *   Display: Task Title, Assignee (simulated name/avatar), Priority (e.g., High, Medium, Low - visual indicator like color dot), Due Date.\n    *   Clicking a task card opens a modal (`data-testid='task-details-modal'`) to view/edit full details.\n3.  **Task Details Modal:**\n    *   Displays and allows editing of: Title, Description (textarea), Assignee (select dropdown of users), Priority (select dropdown), Due Date (date input), Status (select dropdown linked to columns).\n    *   'Save Changes' and 'Cancel' buttons.\n4.  **Add Task Button:** A global 'Add New Task' button (`data-testid='btn-add-new-task'`) that opens the (or a similar) task details modal to create a new task (defaults to 'Backlog' or 'To Do' column).\n5.  **Column Controls (Per Column):**\n    *   Filter tasks within that column by Assignee or Priority (dropdowns).\n    *   Sort tasks within that column by Due Date or Priority.\n    *   These controls (`data-testid='column-backlog-filter-assignee'`, etc.) should be part of each column's header.\n\n**Core Logic (JS):**\n*   Drag-and-drop for tasks between columns using HTML5 D&D API.\n*   State management for all tasks (their properties, column they belong to).\n*   Opening/closing and populating/saving data from the task details modal.\n*   Client-side filtering and sorting of tasks within their respective columns.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Columns might be `<section>`s, task lists `<ul>`s.\n*   **Drag and Drop Accessibility:** Provide robust keyboard alternatives for moving tasks (e.g., context menu on task card: 'Move to [Column Name]'). Draggable items must be focusable.\n*   **Modal Accessibility:** Task details modal must trap focus, be closable with Escape, and have proper ARIA roles (`dialog`, `aria-labelledby`, `aria-describedby`).\n*   All form elements in modal and column controls must be accessible with labels.\n*   Responsive design for board, columns, and modal.\n*   Styling: Tailwind CSS. Extensive custom CSS/JS for D&D, modal, dynamic filtering/sorting, and visual task card elements.\n\n**Testing Identifiers:**\n*   Backlog Column: `data-testid='task-column-backlog'`\n*   A Task Card: `data-testid='task-card-task123'`\n*   Task Details Modal: `data-testid='task-details-modal'`\n*   Modal Save Button: `data-testid='modal-save-task-btn'`\n*   Add New Task Button: `data-testid='btn-add-new-task'`\n*   Filter by Assignee in Backlog (example): `data-testid='column-backlog-filter-assignee'`\n*   Sort by Due Date in Backlog (example): `data-testid='column-backlog-sort-duedate'`",
            "viewports_to_test": {"desktop": [1920, 1080], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_count", "name": "Task Columns (min 4)", "selector": "[data-testid^='task-column-']", "min_count": 4, "points": 2},
                {"type": "element_presence", "name": "Example Task Card with Draggable", "selector": "[data-testid^='task-card-'][draggable='true']", "points": 2},
                {"type": "element_presence", "name": "Task Details Modal (Initially Hidden)", "selector": "[data-testid='task-details-modal']", "check_visibility":"hidden", "points": 1},
                {"type": "element_presence", "name": "Add New Task Button", "selector": "button[data-testid='btn-add-new-task']", "points": 1},
                {"type": "element_presence", "name": "Example Column Filter (Assignee)", "selector": "[data-testid$='-filter-assignee']", "points": 1},
                {"type": "element_presence", "name": "Example Column Sort (DueDate)", "selector": "[data-testid$='-sort-duedate']", "points": 1},
                {
                    "type": "interaction", "name": "Drag Task to New Column", "points": 6, "viewports":["desktop"],
                    "initial_setup": [{"action_type":"execute_script", "script":"/* Ensure a card exists in the first column */"}], 
                    "trigger_element": {"selector": "[data-testid='task-column-backlog'] [data-testid^='task-card-']:first-child"},
                    "action": {"type":"drag_and_drop", "target_element_selector":"[data-testid='task-column-todo']"},
                    "wait_for_outcome_ms":1000,
                    "expected_outcomes": [
                        {"outcome_type":"custom_script_evaluates_true", "script":"return !!document.querySelector(\"[data-testid='task-column-todo'] [data-testid^='task-card-']\");", "note":"Checks if a card is now in the 'To Do' column."}
                    ]
                },
                {
                    "type": "interaction", "name": "Open Task Details Modal and Check Focus", "points": 5,
                    "trigger_element": {"selector": "[data-testid='task-column-backlog'] [data-testid^='task-card-']:first-child"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"visibility_change", "element_selector":"[data-testid='task-details-modal']", "expected_visibility":"visible"},
                        {"outcome_type":"focus_change", "expected_focused_element_selector":"[data-testid='task-details-modal'] input, [data-testid='task-details-modal'] button, [data-testid='task-details-modal'] select, [data-testid='task-details-modal'] textarea", "note":"Focus should move into the modal."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Modal is ARIA Dialog with Labels", "script": "const modal = document.querySelector('[data-testid=task-details-modal]'); return modal && modal.getAttribute('role') === 'dialog' && modal.hasAttribute('aria-labelledby');", "points": 3},
                {"type": "custom_script_evaluates_true", "name": "Keyboard Alternative for Drag (e.g., Context Menu)", "script": "/* This is hard to test generically. Check for contextmenu event listener on cards OR presence of 'Move' buttons perhaps revealed by focus/menu key. */ return true;", "points": 2, "optional":true, "note":"Checking for D&D a11y alternative."}
            ]
        },
        {
            "prompt_id": "FPC026_Online_Forum_Thread_View_Page",
            "prompt_description": "Create a page that displays a single forum thread with its original post and a nested (threaded) list of comments. Users should be able to reply to the main post or to specific comments.\n\n**Page Structure & Features:**\n1.  **Thread Original Post (`data-testid='original-post'`)**\n    *   Author's Avatar, Name, Post Timestamp.\n    *   Post Title (H1 or H2).\n    *   Post Content (rich text, can include paragraphs, lists, code blocks - use simple HTML for simulation).\n    *   'Reply to Thread' button (`data-testid='reply-to-thread-btn'`).\n2.  **Comments Section (`data-testid='comments-section'`)**\n    *   A hierarchically nested list of comments. Each comment (`data-testid='comment-ID'`) displays:\n        *   Author's Avatar, Name, Comment Timestamp.\n        *   Comment Content.\n        *   'Reply to Comment' button (`data-testid='reply-to-comment-ID-btn'`).\n        *   Indent nested replies visually and semantically (e.g., nested `<ul>` or `<div>`s with appropriate ARIA roles for a tree-like structure if very deep, or simpler list nesting).\n    *   Load at least 2 levels of nested comments for demonstration.\n3.  **Reply Form (Can be a single form that adapts context, or shown contextually - `data-testid='reply-form'`)**\n    *   Textarea for comment content (`data-testid='reply-textarea'`).\n    *   'Submit Reply' button (`data-testid='submit-reply-btn'`).\n    *   When replying to a specific comment, the form might indicate this (e.g., 'Replying to [AuthorName]').\n    *   Submitting a reply (simulated) adds the new comment to the correct place in the thread.\n\n**Simulated Data (JS):**\n*   A nested JS object/array structure for the original post and its comments, including replies to comments.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. The original post could be an `<article>`. Comments are list items or articles within nested lists.\n*   **Threaded Comments Accessibility:** This is key. If using nested lists, ensure proper structure. For very deep threads, consider `role='treegrid'` or similar if appropriate, or ensure screen readers can easily navigate the hierarchy. Each comment should be clearly distinguishable.\n*   The 'Reply' buttons should correctly set the context for the reply form.\n*   Focus should be managed when submitting a reply (e.g., to the new comment or clear the form).\n*   The page must be responsive.\n*   Styling: Tailwind CSS. Custom CSS/JS for comment nesting visuals, reply form logic, and dynamic comment rendering.\n\n**Testing Identifiers:**\n*   Original Post Area: `data-testid='original-post'`\n*   Reply to Thread Button: `data-testid='reply-to-thread-btn'`\n*   Comments Section Container: `data-testid='comments-section'`\n*   A Top-Level Comment: `data-testid='comment-c1'`\n*   A Nested Reply to a Comment: `data-testid='comment-c1-r1'`\n*   Reply button on a comment: `data-testid='reply-to-comment-c1-btn'`\n*   Reply Form: `data-testid='reply-form'`\n*   Reply Textarea: `data-testid='reply-textarea'`\n*   Submit Reply Button: `data-testid='submit-reply-btn'`",
            "viewports_to_test": {"desktop": [1280, 1024], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Original Post Area", "selector": "[data-testid='original-post']", "points": 2},
                {"type": "element_presence", "name": "Reply to Thread Button", "selector": "button[data-testid='reply-to-thread-btn']", "points": 1},
                {"type": "element_presence", "name": "Comments Section", "selector": "[data-testid='comments-section']", "points": 1},
                {"type": "element_count", "name": "Top-Level Comments (min 2)", "selector": "[data-testid='comments-section'] > ul > li [data-testid^='comment-'], [data-testid='comments-section'] > div > div[data-testid^='comment-']", "min_count": 2, "points": 2, "note":"Flexible selector for list or div structure"},
                {"type": "element_presence", "name": "At least one Nested Comment", "selector": "[data-testid^='comment-'] [data-testid^='comment-']", "points": 2, "note":"Looks for a comment testid within another comment testid element"},
                {"type": "element_presence", "name": "Reply Form (may be hidden)", "selector": "form[data-testid='reply-form']", "points": 1, "optional":true},
                {
                    "type": "interaction", "name": "Reply to Main Thread (Simulated)", "points": 5,
                    "initial_setup": [
                        {"action_type":"click_element", "selector":"button[data-testid='reply-to-thread-btn']", "note":"To reveal form if needed"},
                        {"action_type":"execute_script", "script":"document.querySelector('[data-testid=reply-textarea]').value = 'New main thread reply';"}
                    ],
                    "wait_for_initial_setup_ms": 300,
                    "trigger_element": {"selector": "button[data-testid='submit-reply-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"text_content_change", "element_selector":"[data-testid='comments-section']", "expected_text":"New main thread reply", "match_type":"contains", "note":"New comment should appear."}
                    ]
                },
                {
                    "type": "interaction", "name": "Reply to Specific Comment (Simulated)", "points": 5,
                     "initial_setup": [
                        {"action_type":"click_element", "selector":"button[data-testid^='reply-to-comment-'][data-testid*='-btn']:first-of-type", "note":"Click first reply-to-comment button"},
                        {"action_type":"execute_script", "script":"document.querySelector('[data-testid=reply-textarea]').value = 'Nested reply text';"}
                    ],
                    "wait_for_initial_setup_ms": 300,
                    "trigger_element": {"selector": "button[data-testid='submit-reply-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"text_content_change", "element_selector":"[data-testid^='comment-'] [data-testid^='comment-']", "expected_text":"Nested reply text", "match_type":"contains", "note":"Checks if nested reply appears."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Comments Have ARIA List Structure or Tree Roles", "script": "const commentsSection = document.querySelector('[data-testid=comments-section]'); if(!commentsSection) return false; return !!(commentsSection.querySelector('ul') || commentsSection.querySelector('[role=tree], [role=treegrid]'));", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC027_Cloud_Storage_Interface_File_Operations_Page",
            "prompt_description": "Develop a cloud storage interface page (like a simplified Dropbox or Google Drive) allowing users to view files/folders, upload (simulated), download (simulated), rename, and delete items.\n\n**Page Structure & Features:**\n1.  **File/Folder Listing Area (`data-testid='file-listing-area'`)**\n    *   Displays current directory's contents in a list or grid view. Each item shows: Icon (folder/file type), Name, Size, Last Modified Date.\n    *   Each item: `data-testid='fs-item-FILENAME_OR_FOLDERNAME'`.\n    *   Items should be selectable (single or multi-select using Ctrl/Shift+click simulation if ambitious).\n2.  **Toolbar/Action Bar (`data-testid='file-actions-toolbar'`)**\n    *   Buttons for actions on selected item(s): \n        *   'Upload File' (`data-testid='btn-upload'`) - opens a file input, simulates upload.\n        *   'New Folder' (`data-testid='btn-new-folder'`) - prompts for folder name, adds it.\n        *   'Rename' (`data-testid='btn-rename'`) - enabled when one item selected, allows renaming.\n        *   'Download' (`data-testid='btn-download'`) - enabled when item(s) selected, simulates download.\n        *   'Delete' (`data-testid='btn-delete'`) - enabled when item(s) selected, confirms and removes.\n3.  **Breadcrumb Navigation (`data-testid='fs-breadcrumb-nav'`)**\n    *   Shows current directory path (e.g., 'My Files > Projects > Alpha'). Clicking navigates.\n4.  **Context Menu (Optional):** Right-clicking an item shows relevant actions from toolbar.\n\n**Simulated Logic (JS):**\n*   Maintain a JS object representing the file system structure.\n*   All operations (upload, new folder, rename, delete, navigation) modify this JS structure and re-render the file listing.\n*   Upload: Use `<input type='file'>`. On file selection, add a mock file entry to the JS structure and UI.\n*   Download: Log 'Downloading [filename]' to console.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. File listing could be a `<table>` or accessible ARIA grid/listbox.\n*   **Selection & Actions:** Selected items MUST be visually distinct and have `aria-selected='true'`. Toolbar buttons should be disabled (`aria-disabled='true'`) if no appropriate selection is made.\n*   **Keyboard Navigation:** Full keyboard navigation for file list (arrows, Enter to open folder/file, Space to select). Toolbar access via Tab.\n*   **Notifications/Feedback:** Use an `aria-live` region (`data-testid='fs-notifications'`) to announce actions like 'File uploaded', 'Folder created', 'Item deleted'.\n*   Focus management after operations (e.g., after deleting, focus next item or parent list).\n*   Responsive design.\n*   Styling: Tailwind CSS. Extensive JS for file system logic, DOM updates, selection management, and action handling.\n\n**Testing Identifiers:**\n*   File Listing Area: `data-testid='file-listing-area'`\n*   An Item in Listing: `data-testid='fs-item-MyDocument.pdf'`\n*   Upload Button: `data-testid='btn-upload'`\n*   New Folder Button: `data-testid='btn-new-folder'`\n*   Rename Button: `data-testid='btn-rename'`\n*   Delete Button: `data-testid='btn-delete'`\n*   Breadcrumb Nav: `data-testid='fs-breadcrumb-nav'`\n*   Notifications Live Region: `data-testid='fs-notifications'`",
            "viewports_to_test": {"desktop": [1440, 900], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "File Listing Area", "selector": "[data-testid='file-listing-area']", "points": 1},
                {"type": "element_count", "name": "Initial File/Folder Items (min 3)", "selector": "[data-testid='file-listing-area'] [data-testid^='fs-item-']", "min_count": 3, "points": 2},
                {"type": "element_presence", "name": "Upload Button", "selector": "button[data-testid='btn-upload']", "points": 1},
                {"type": "element_presence", "name": "New Folder Button", "selector": "button[data-testid='btn-new-folder']", "points": 1},
                {"type": "element_presence", "name": "Delete Button (initially may be disabled)", "selector": "button[data-testid='btn-delete']", "points": 1},
                {"type": "element_presence", "name": "Breadcrumb Navigation", "selector": "[data-testid='fs-breadcrumb-nav']", "points": 1},
                {"type": "element_presence", "name": "Notifications Live Region", "selector": "[data-testid='fs-notifications'][aria-live]", "points": 1},
                {
                    "type": "interaction", "name": "Create New Folder (Simulated)", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"window.prompt = () => 'New Folder Test';"}], 
                    "trigger_element": {"selector": "button[data-testid='btn-new-folder']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"element_exists", "element_selector":"[data-testid='fs-item-New Folder Test']"},
                        {"outcome_type":"text_content_change", "element_selector":"[data-testid='fs-notifications']", "expected_text":"Folder created", "match_type":"contains", "note":"Checks live region feedback."}
                    ]
                },
                {
                    "type": "interaction", "name": "Select and Delete Item (Simulated)", "points": 6,
                    "initial_setup": [{"action_type":"execute_script", "script":"/* Ensure an item 'ToDelete.txt' exists */ if(!document.querySelector('[data-testid=fs-item-ToDelete.txt]')) { document.querySelector('button[data-testid=btn-new-folder]').click(); /* This assumes prompt is mocked for 'ToDelete.txt' or name it uniquely. */ }"}], 
                    "wait_for_initial_setup_ms":500,
                    "sequence": [
                        {"step_name": "Select Item", "trigger_element": {"selector": "[data-testid='fs-item-ToDelete.txt']"}, "action":{"type":"click"}, "wait_for_outcome_ms":300,
                         "expected_outcomes": [{"outcome_type":"attribute_change", "element_selector":"[data-testid='fs-item-ToDelete.txt']", "attribute_name":"aria-selected", "expected_value":"true"}]
                        },
                        {"step_name": "Click Delete Button", "trigger_element": {"selector": "button[data-testid='btn-delete']"}, "action":{"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [
                             {"outcome_type":"element_absent", "element_selector":"[data-testid='fs-item-ToDelete.txt']"},
                             {"outcome_type":"text_content_change", "element_selector":"[data-testid='fs-notifications']", "expected_text":"Item deleted", "match_type":"contains"}
                         ]}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Action Buttons Disabled Appropriately", "script": "/* Deselect all, check if delete/rename are disabled */ document.querySelectorAll('[data-testid^=fs-item-][aria-selected=true]').forEach(el => el.click()); return document.querySelector('button[data-testid=btn-delete]').disabled && document.querySelector('button[data-testid=btn-rename]').disabled;", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC028_Interactive_Data_Visualization_Dashboard_with_Linked_Charts",
            "prompt_description": "Create an advanced data visualization dashboard with multiple linked charts. Interacting with one chart (e.g., selecting a data series) should filter or highlight data in other charts on the page.\n\n**Page Layout & Components:**\n1.  **Main Dashboard Area (`data-testid='viz-dashboard'`)**\n    *   **Global Filter Controls (Optional):** Date range picker, category dropdowns that affect all charts.\n2.  **Chart Row 1:**\n    *   **Primary Bar Chart (`data-testid='chart-sales-by-region'`):** Shows total sales per region. Each bar should be interactive (clickable).\n    *   **Pie Chart (`data-testid='chart-product-category-split'`):** Shows sales split by product category for the currently selected region in the bar chart (or overall if no region selected).\n3.  **Chart Row 2:**\n    *   **Line Chart (`data-testid='chart-sales-trend-over-time'`):** Shows sales trend over time for the selected region and/or product category.\n    *   **Data Table (`data-testid='details-table'`)**: Shows detailed transaction data filtered by selections in other charts.\n\n**Interaction Logic (JS - Key Challenge):**\n*   **Linked Highlighting/Filtering:**\n    *   Clicking a bar (region) in the 'Sales by Region' chart updates the Pie Chart to show category split *for that region only* and filters the Line Chart and Data Table to that region.\n    *   Clicking a slice in the Pie Chart (category) further filters the Line Chart and Data Table to that category (within the selected region, if any).\n    *   Selections should be clearable (e.g., clicking selected bar/slice again or a 'Clear Filters' button).\n*   Use a charting library (e.g., Chart.js, D3.js - specify if CDN is okay or if it needs to be self-contained JS for basic SVGs).\n*   Simulate data with JS objects.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML structure.\n*   **Chart Accessibility:** All charts MUST be accessible. This includes: proper titles/labels, keyboard navigability to data points/series, tooltips for data values accessible via keyboard, and preferably a data table fallback for complex charts. Use ARIA attributes to describe chart elements and their states.\n*   **Interaction Feedback:** Clearly indicate active filters/selections. Use `aria-live` to announce significant data changes in charts/table due to filtering.\n*   Responsive design: Charts must resize and remain usable. Table might need horizontal scroll on mobile.\n*   Styling: Tailwind CSS. Substantial custom JS for chart generation, linking logic, state management of filters, and dynamic updates. Custom CSS may be needed for chart styling if the library doesn't offer enough Tailwind integration.\n\n**Testing Identifiers:**\n*   Sales by Region Bar Chart: `data-testid='chart-sales-by-region'` (the canvas/svg itself)\n*   Product Category Pie Chart: `data-testid='chart-product-category-split'`\n*   Sales Trend Line Chart: `data-testid='chart-sales-trend-over-time'`\n*   Details Data Table: `data-testid='details-table'`\n*   A clickable element in Bar Chart (e.g., first bar): `data-testid='bar-chart-region-1-bar'` (model needs to add these or similar)\n*   Live region for updates: `data-testid='viz-update-announcer'`",
            "viewports_to_test": {"desktop": [1600, 900], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Sales by Region Bar Chart", "selector": "[data-testid='chart-sales-by-region'] canvas, [data-testid='chart-sales-by-region'] svg", "points": 2},
                {"type": "element_presence", "name": "Product Category Pie Chart", "selector": "[data-testid='chart-product-category-split'] canvas, [data-testid='chart-product-category-split'] svg", "points": 2},
                {"type": "element_presence", "name": "Sales Trend Line Chart", "selector": "[data-testid='chart-sales-trend-over-time'] canvas, [data-testid='chart-sales-trend-over-time'] svg", "points": 2},
                {"type": "element_presence", "name": "Details Data Table", "selector": "table[data-testid='details-table']", "points": 2},
                {
                    "type": "interaction", "name": "Click Bar Chart Region Updates Pie Chart (Simulated Data Check)", "points": 7,
                    "initial_setup": [
                        {"action_type":"execute_script", "script":"window.getChartData = (chartId) => { /* Mock: return data representation of chart for test */ try { const chart = Chart.getChart(document.querySelector(`${chartId} canvas`)); return chart.data.datasets[0].data.join(','); } catch(e){ return ''; } }; window.initialPieData = window.getChartData('[data-testid=chart-product-category-split]');"}
                    ],
                    "trigger_element": {"selector": "[data-testid='chart-sales-by-region'] /* How to click a bar? Depends on lib. Assume a clickable element or use coordinates if desperate. For now, model needs to make bars clickable. */ canvas", "note":"Clicking canvas; test below checks if data changed. Better: data-testid on bar."},
                    "action": {"type":"click_at_coordinates", "x_offset_percent": 25, "y_offset_percent": 50, "note":"Click first bar area"}, 
                    "wait_for_outcome_ms":1500, 
                    "expected_outcomes": [
                        {"outcome_type":"custom_script_evaluates_true", "script":"const newPieData = window.getChartData('[data-testid=chart-product-category-split]'); return newPieData !== window.initialPieData && newPieData !== '';", "note":"Checks if pie chart data changed significantly."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Charts Have Accessible Titles/Labels", "script": "return ['chart-sales-by-region', 'chart-product-category-split', 'chart-sales-trend-over-time'].every(id => { const chartEl = document.querySelector(`[data-testid='${id}'] canvas, [data-testid='${id}'] svg`); return chartEl && (chartEl.getAttribute('aria-label') || chartEl.getAttribute('aria-labelledby') || chartEl.querySelector('title')); });", "points": 4},
                {"type": "custom_script_evaluates_true", "name": "Data Table Fallback or Keyboard Nav for Charts", "script": "/* Check if charts are focusable or have a linked data table. Complex. */ return true;", "points": 2, "optional":true, "note":"Ensuring charts are somehow accessible beyond mouse."},
                {"type": "element_presence", "name": "Update Announcer Live Region", "selector": "[data-testid='viz-update-announcer'][aria-live]", "points": 1, "optional":true}
            ]
        },
        {
            "prompt_id": "FPC029_CMS_Admin_Article_Editor_Page",
            "prompt_description": "Develop an admin page for a Content Management System (CMS) used for writing and publishing articles. It should include a rich text editor, metadata fields, and publishing options.\n\n**Page Layout & Features:**\n1.  **Main Editor Area:**\n    *   **Article Title Input (`data-testid='article-title-input'`)**: For the main title of the article.\n    *   **Rich Text Editor (`data-testid='article-content-editor'`)**: A WYSIWYG editor (similar to FPC010 but perhaps slightly simplified toolbar for this context) for the main article body. Toolbar should include: Bold, Italic, Unordered/Ordered Lists, Link insertion, simple Image insertion (URL based).\n2.  **Sidebar/Settings Panel (`data-testid='article-settings-panel'`):**\n    *   **Categories/Tags (`data-testid='tags-input'`)**: Input field for adding tags (e.g., comma-separated or a tag-input like component where each tag is a dismissible pill).\n    *   **Featured Image Upload (Simulated - `data-testid='featured-image-upload'`)**: Button to 'Set Featured Image', opens prompt for URL, displays a preview (`data-testid='featured-image-preview'`).\n    *   **Publishing Options:**\n        *   Status: Select dropdown (Draft, Published, Archived - `data-testid='status-select'`).\n        *   Visibility: Radio buttons (Public, Private - `data-testid='visibility-public'`).\n        *   Publish Date/Time Picker (optional complexity).\n    *   'Save Draft' button (`data-testid='btn-save-draft'`).\n    *   'Publish' button (`data-testid='btn-publish'`).\n3.  **Word Count/Read Time (Dynamic - `data-testid='editor-stats'`)**: Display live word count and estimated read time based on editor content.\n\n**Simulated Logic (JS):**\n*   Saving/Publishing can just log the article data (title, content HTML, metadata) to console or update a status message.\n*   Tag input component logic if implemented.\n*   Word count updates as user types in rich text editor.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Editor is `contenteditable` with ARIA roles or a robust textarea solution.\n*   **Rich Text Editor Accessibility:** Toolbar controls must be keyboard accessible, use `aria-pressed` for states. Editor content should maintain semantic structure.\n*   **Settings Panel Accessibility:** All form controls (selects, radios, inputs) MUST have labels. Tag input component must be keyboard navigable if custom.\n*   Notifications for 'Saved', 'Published' via an `aria-live` region (`data-testid='cms-notifications'`).\n*   Responsive design for editor and settings panel.\n*   Styling: Tailwind CSS. Extensive JS for rich text editor, tag input, dynamic stats, and save/publish logic.\n\n**Testing Identifiers:**\n*   Article Title Input: `data-testid='article-title-input'`\n*   Rich Text Editor: `data-testid='article-content-editor'`\n*   Editor Toolbar (within Rich Text Editor): `data-testid='wysiwyg-toolbar'` (if reusing FPC010 structure)\n*   Tags Input Area: `data-testid='tags-input'`\n*   Featured Image Preview: `data-testid='featured-image-preview'`\n*   Status Select Dropdown: `data-testid='status-select'`\n*   Save Draft Button: `data-testid='btn-save-draft'`\n*   Publish Button: `data-testid='btn-publish'`\n*   Editor Stats Display: `data-testid='editor-stats'`\n*   CMS Notifications Live Region: `data-testid='cms-notifications'`",
            "viewports_to_test": {"desktop": [1600, 900], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Article Title Input", "selector": "input[data-testid='article-title-input']", "points": 1},
                {"type": "element_presence", "name": "Rich Text Editor Area", "selector": "[data-testid='article-content-editor'][contenteditable='true'], textarea[data-testid='article-content-editor']", "points": 2},
                {"type": "element_presence", "name": "Editor Toolbar", "selector": "[data-testid='article-content-editor'] [data-testid='wysiwyg-toolbar'], [data-testid='wysiwyg-toolbar']", "points": 1, "note":"Checks for toolbar associated with editor"},
                {"type": "element_presence", "name": "Tags Input Area", "selector": "[data-testid='tags-input']", "points": 1},
                {"type": "element_presence", "name": "Status Select", "selector": "select[data-testid='status-select']", "points": 1},
                {"type": "element_presence", "name": "Save Draft Button", "selector": "button[data-testid='btn-save-draft']", "points": 1},
                {"type": "element_presence", "name": "Publish Button", "selector": "button[data-testid='btn-publish']", "points": 1},
                {"type": "element_presence", "name": "Editor Stats Display", "selector": "[data-testid='editor-stats']", "points": 1},
                {"type": "element_presence", "name": "CMS Notifications Live Region", "selector": "[data-testid='cms-notifications'][aria-live]", "points": 1},
                {
                    "type": "interaction", "name": "Type in Editor, Word Count Updates", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"const editor = document.querySelector('[data-testid=article-content-editor]'); if(editor.value !== undefined) editor.value = ''; else editor.innerHTML = ''; /* Clear editor */"}],
                    "trigger_element": {"selector": "[data-testid='article-content-editor']"}, "action": {"type":"type_text_in_contenteditable", "text_to_type":"This is five words."},
                    "wait_for_outcome_ms":1000, 
                    "expected_outcomes": [
                        {"outcome_type":"text_content_change", "element_selector":"[data-testid='editor-stats']", "expected_text":"5 words", "match_type":"contains"}
                    ]
                },
                {
                    "type": "interaction", "name": "Save Draft Shows Notification", "points": 4,
                    "trigger_element": {"selector": "button[data-testid='btn-save-draft']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"text_content_change", "element_selector":"[data-testid='cms-notifications']", "expected_text":"Saved", "match_type":"contains"}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Rich Text Toolbar Buttons are Accessible (aria-pressed for bold)", "script": "const boldBtn = document.querySelector('[data-testid=wysiwyg-toolbar] button[aria-label*=Bold], [data-testid=wysiwyg-toolbar] button[data-testid*=bold]'); return boldBtn && boldBtn.hasAttribute('aria-pressed');", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC030_Online_Booking_System_for_Appointments_Page",
            "prompt_description": "Develop a page for an online appointment booking system (e.g., for a doctor, salon, or consultant). Users select a service, then a date and available time slot, and finally confirm their details.\n\n**Page Structure & Flow:**\n1.  **Service Selection (`data-testid='service-selection-step'`)**\n    *   Display a list of available services (e.g., 'Consultation - 30 min', 'Haircut - 1 hour', 'Check-up - 45 min').\n    *   Each service should be selectable (e.g., radio buttons or styled cards). `data-testid='service-item-NAME'`.\n    *   'Next' button to proceed to date/time selection, enabled only after a service is chosen.\n2.  **Date & Time Selection (`data-testid='datetime-selection-step'`, initially hidden)**\n    *   **Calendar View:** Display a monthly calendar (similar to FPC014) to select a date. Available dates (with slots) should be visually distinct or enabled. `data-testid='appointment-calendar'`.\n    *   **Time Slots:** Upon selecting an available date, display a list of available time slots for that date and selected service (e.g., '09:00 AM', '09:30 AM', '02:00 PM'). Each slot is a selectable button/radio. `data-testid='time-slot-HHMM'`.\n    *   'Back' and 'Next' buttons.\n3.  **Your Details (`data-testid='details-confirmation-step'`, initially hidden)**\n    *   Form for Name, Email, Phone.\n    *   Display selected Service, Date, and Time for confirmation.\n    *   'Back' and 'Confirm Booking' buttons (`data-testid='btn-confirm-booking'`).\n4.  **Booking Confirmation (`data-testid='booking-confirmed-message'`, initially hidden)**\n    *   Success message with booking details.\n\n**Simulated Logic (JS):**\n*   Define available services and their durations.\n*   For date/time selection, simulate availability (e.g., some dates always unavailable, some times always booked). This logic should update the calendar and time slot display dynamically.\n*   Booking confirmation is client-side simulation.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML for all steps and forms.\n*   **Calendar & Time Slot Accessibility:** Calendar must be keyboard navigable (ARIA grid). Time slots must be focusable and selectable with keyboard. `aria-selected` or `aria-checked` for chosen slots.\n*   **Dynamic Updates & ARIA Live:** Changes in available dates/times based on service selection or date selection should be clearly communicated (e.g., an `aria-live` region `data-testid='availability-update-status'` announces 'Time slots updated for [date]').\n*   All forms must have labels. Validation for user detail inputs.\n*   Responsive design for all steps.\n*   Styling: Tailwind CSS. Extensive JS for calendar generation, time slot logic, step navigation, state management.\n\n**Testing Identifiers:**\n*   Service Selection Step: `data-testid='service-selection-step'`\n*   A Service Item: `data-testid='service-item-Consultation'`\n*   Date/Time Selection Step: `data-testid='datetime-selection-step'`\n*   Appointment Calendar Grid: `data-testid='appointment-calendar'`\n*   A Time Slot Button: `data-testid='time-slot-0900AM'`\n*   Details/Confirmation Step: `data-testid='details-confirmation-step'`\n*   Confirm Booking Button: `data-testid='btn-confirm-booking'`\n*   Booking Confirmed Message Area: `data-testid='booking-confirmed-message'`\n*   Availability Update Live Region: `data-testid='availability-update-status'`",
            "viewports_to_test": {"desktop": [1280, 800], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Service Selection Step (Initially Visible)", "selector": "[data-testid='service-selection-step']", "check_visibility":true, "points": 1},
                {"type": "element_count", "name": "Service Items (min 2)", "selector": "[data-testid^='service-item-']", "min_count": 2, "points": 1},
                {"type": "element_presence", "name": "Date/Time Selection Step (Initially Hidden)", "selector": "[data-testid='datetime-selection-step']", "check_visibility":"hidden", "points": 1},
                {"type": "element_presence", "name": "Appointment Calendar", "selector": "[data-testid='appointment-calendar']", "points": 1},
                {"type": "element_presence", "name": "Confirm Booking Button (May be in later step)", "selector": "button[data-testid='btn-confirm-booking']", "points": 1},
                {
                    "type": "interaction", "name": "Select Service, Date, Time, Confirm", "points": 10,
                    "sequence": [
                        {"step_name": "Select Service & Next", "trigger_element": {"selector": "[data-testid^='service-item-']:first-child"}, "action":{"type":"click"},
                         "post_actions":[{"action_type":"click_element", "selector":"[data-testid='service-selection-step'] button:contains('Next')" ,"note":"Find next button in service step"}], "wait_after_post_action_ms":500,
                         "expected_outcomes": [{"outcome_type":"visibility_change", "element_selector":"[data-testid='datetime-selection-step']", "expected_visibility":"visible"}]
                        },
                        {"step_name": "Select Date in Calendar", "trigger_element": {"selector": "[data-testid='appointment-calendar'] [data-testid^='day-cell-']:nth-child(15):not([disabled])", "note":"Click an available day"}, "action":{"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [{"outcome_type":"element_count", "parent_element_selector":"[data-testid='datetime-selection-step']", "child_element_selector":"[data-testid^='time-slot-']", "min_count":1, "note":"Time slots should appear"}]
                        },
                        {"step_name": "Select Time Slot & Next", "trigger_element": {"selector": "[data-testid^='time-slot-']:first-child"}, "action":{"type":"click"},
                         "post_actions":[{"action_type":"click_element", "selector":"[data-testid='datetime-selection-step'] button:contains('Next')"}], "wait_after_post_action_ms":500,
                         "expected_outcomes": [{"outcome_type":"visibility_change", "element_selector":"[data-testid='details-confirmation-step']", "expected_visibility":"visible"}]
                        },
                        {"step_name": "Fill Details & Confirm Booking", "action":{"type":"execute_script", "script":"document.querySelector('[data-testid=details-confirmation-step] input[type=text]').value='Booker Name'; /* Fill other required detail fields */"},
                         "post_actions":[{"action_type":"click_element", "selector":"button[data-testid='btn-confirm-booking']"}], "wait_after_post_action_ms":500,
                         "expected_outcomes": [{"outcome_type":"visibility_change", "element_selector":"[data-testid='booking-confirmed-message']", "expected_visibility":"visible"}]
                        }
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Calendar is ARIA Grid & Days are Buttons/Interactive", "script": "const cal = document.querySelector('[data-testid=appointment-calendar]'); if(!cal) return false; return (cal.matches('table[role=grid], div[role=grid]') && cal.querySelector('[data-testid^=day-cell-][role=gridcell] button, [data-testid^=day-cell-][role=button]'));", "points": 3},
                {"type": "element_presence", "name": "Availability Update Live Region", "selector": "[data-testid='availability-update-status'][aria-live]", "points": 1, "optional": true}
            ]
        },
        {
            "prompt_id": "FPC031_Interactive_Data_Filtering_and_Aggregation_Tool_Page",
            "prompt_description": "Develop a page that allows users to upload (simulated) a CSV data file, then interactively filter, group, and aggregate data, displaying results in a table and a chart.\n\n**Page Layout & Features:**\n1.  **Data Upload Section (`data-testid='data-upload-section'`)**\n    *   A file input (`<input type='file' accept='.csv'>`, `data-testid='csv-upload-input'`) for 'uploading' a CSV.\n    *   On 'upload' (simulated: use a predefined JS array of objects representing CSV data), parse and display a preview of the first few rows in a simple table (`data-testid='data-preview-table'`).\n2.  **Filtering Controls Panel (`data-testid='filtering-panel'`)**\n    *   Dynamically generate filter options based on columns from the uploaded data (e.g., if a 'Category' column exists, offer a multi-select checklist for categories).\n    *   For numerical columns, offer range sliders or min/max input fields.\n    *   'Apply Filters' button (`data-testid='btn-apply-filters'`).\n3.  **Grouping & Aggregation Controls (`data-testid='grouping-panel'`)**\n    *   Dropdown to select a column to 'Group By' (e.g., 'Group by Category'). `data-testid='select-group-by'`.\n    *   Dropdown to select an aggregation function (e.g., 'SUM', 'AVERAGE', 'COUNT'). `data-testid='select-aggregation-func'`.\n    *   Dropdown to select the numerical column to aggregate. `data-testid='select-aggregate-column'`.\n    *   'Calculate Aggregation' button (`data-testid='btn-calculate-aggregation'`).\n4.  **Results Display Area**\n    *   **Aggregated Data Table (`data-testid='aggregated-data-table'`)**: Shows the grouped and aggregated results.\n    *   **Chart of Aggregated Data (`data-testid='aggregated-data-chart'`)**: A bar chart visualizing the aggregated data (e.g., SUM of Sales by Category).\n\n**Simulated Logic (JS):**\n*   Simulate CSV parsing (e.g., convert JS array of objects into table structure).\n*   Implement client-side filtering based on selected criteria.\n*   Implement client-side grouping and aggregation logic (e.g., using `reduce` or loops).\n*   Dynamically render/update the results table and chart (using Chart.js or similar).\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Tables must be accessible. Dynamic controls need labels.\n*   **Dynamic UI Accessibility:** As filter/grouping options are generated based on data, ensure they are accessible. Results updates must be announced if necessary (`aria-live`).\n*   All interactive controls (sliders, selects, buttons) must be keyboard accessible.\n*   Responsive design. Complex control panels might need to be collapsible on mobile.\n*   Styling: Tailwind CSS. Very heavy JS for data manipulation, dynamic UI generation, and charting.\n\n**Testing Identifiers:**\n*   CSV Upload Input: `data-testid='csv-upload-input'`\n*   Data Preview Table: `data-testid='data-preview-table'`\n*   Apply Filters Button: `data-testid='btn-apply-filters'`\n*   Group By Select: `data-testid='select-group-by'`\n*   Calculate Aggregation Button: `data-testid='btn-calculate-aggregation'`\n*   Aggregated Data Table: `data-testid='aggregated-data-table'`\n*   Aggregated Data Chart Area: `data-testid='aggregated-data-chart'`\n*   A dynamically generated filter (example): `data-testid='filter-control-Category'`",
            "viewports_to_test": {"desktop": [1600, 900], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "CSV Upload Input", "selector": "input[type='file'][data-testid='csv-upload-input']", "points": 2},
                {"type": "element_presence", "name": "Data Preview Table", "selector": "table[data-testid='data-preview-table']", "points": 1},
                {"type": "element_presence", "name": "Apply Filters Button", "selector": "button[data-testid='btn-apply-filters']", "points": 1},
                {"type": "element_presence", "name": "Group By Select", "selector": "select[data-testid='select-group-by']", "points": 1},
                {"type": "element_presence", "name": "Calculate Aggregation Button", "selector": "button[data-testid='btn-calculate-aggregation']", "points": 1},
                {"type": "element_presence", "name": "Aggregated Data Table", "selector": "table[data-testid='aggregated-data-table']", "points": 1},
                {"type": "element_presence", "name": "Aggregated Data Chart Area", "selector": "[data-testid='aggregated-data-chart']", "points": 1},
                {
                    "type": "interaction", "name": "Simulate CSV Upload and Preview", "points": 6,
                    "initial_setup": [{"action_type":"execute_script", "script":"/* Simulate file object and dispatch change event on input. Hard to do without real file API interaction. For test, assume JS loads predefined data on any 'change' event for simplicity. */"}],
                    "trigger_element": {"selector": "input[data-testid='csv-upload-input']"}, "action": {"type":"dispatch_event", "event_name":"change"}, 
                    "wait_for_outcome_ms":1000,
                    "expected_outcomes": [
                        {"outcome_type":"element_count", "parent_element_selector":"table[data-testid='data-preview-table'] tbody", "child_element_selector":"tr", "min_count":1, "note":"Preview table should populate."}
                    ]
                },
                {
                    "type": "interaction", "name": "Apply Grouping/Aggregation and See Results", "points": 7,
                    "initial_setup": [{"action_type":"execute_script", "script":"/* Ensure data is 'uploaded' and selects are populated */ document.querySelector('input[data-testid=csv-upload-input]').dispatchEvent(new Event('change')); /* More specific setup might be needed to pick valid columns for group/aggregate */"}],
                    "wait_for_initial_setup_ms": 500,
                    "sequence": [
                        {"step_name": "Select Group By Option", "trigger_element": {"selector":"select[data-testid='select-group-by']"}, "action":{"type":"select_option_by_index", "index":1}},
                        {"step_name": "Select Aggregate Function", "trigger_element": {"selector":"select[data-testid='select-aggregation-func']"}, "action":{"type":"select_option_by_index", "index":1}},
                        {"step_name": "Select Aggregate Column", "trigger_element": {"selector":"select[data-testid='select-aggregate-column']"}, "action":{"type":"select_option_by_index", "index":1}},
                        {"step_name": "Click Calculate", "trigger_element": {"selector":"button[data-testid='btn-calculate-aggregation']"}, "action":{"type":"click"}}
                    ],
                    "wait_for_outcome_ms":1500,
                    "expected_outcomes": [
                        {"outcome_type":"element_count", "parent_element_selector":"table[data-testid='aggregated-data-table'] tbody", "child_element_selector":"tr", "min_count":1, "note":"Aggregated table should have rows."},
                        {"outcome_type":"element_exists", "element_selector":"[data-testid='aggregated-data-chart'] canvas, [data-testid='aggregated-data-chart'] svg", "note":"Chart should render."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Dynamically Generated Filter Controls are Accessible", "script": "/* After 'upload', check if a dynamically added filter control (e.g. for 'Category') has a label or aria-label. */ const filterControl = document.querySelector('[data-testid=filter-control-Category]'); return filterControl && (filterControl.id && document.querySelector(`label[for='${filterControl.id}']`) || filterControl.getAttribute('aria-label'));", "points": 3, "optional":true}
            ]
        },
        {
            "prompt_id": "FPC032_Online_Collaborative_Mind_Mapping_Tool_Page",
            "prompt_description": "Develop a webpage for a basic online collaborative mind mapping tool. Users can create nodes, connect them, and edit their text. Collaboration is simulated.\n\n**Page Components & Features:**\n1.  **Canvas Area (`data-testid='mindmap-canvas'`):**\n    *   A large pannable/zoomable area where mind map nodes are displayed and manipulated.\n    *   Nodes (`data-testid='mindmap-node-ID'`) are draggable blocks containing editable text (e.g., `contenteditable='true'` or an input field that appears on focus).\n    *   Connections (lines/curves - SVG or styled divs) are drawn between a parent node and its children nodes.\n2.  **Toolbar (`data-testid='mindmap-toolbar'`)**\n    *   'Add Node' button (`data-testid='btn-add-node'`): Adds a new child node to the currently selected node, or a root node if none selected.\n    *   'Edit Node Text' (might be implicit by clicking node text).\n    *   'Delete Node' button (`data-testid='btn-delete-node'`): Deletes selected node and its children/connections.\n    *   'Connect Nodes' (Mode Toggle Button `data-testid='btn-connect-mode'`): Toggles a mode where clicking one node then another creates a connection (parent-child relationship).\n    *   Zoom In/Out buttons.\n3.  **Collaboration Simulation:**\n    *   After a short delay, simulate another user adding a new node or editing text on an existing node. This change should appear on the canvas.\n    *   An `aria-live` region (`data-testid='mindmap-collab-updates'`) should announce 'User X added a node' or 'User Y edited node [NodeText]'.\n\n**Core Logic (JS):**\n*   Data structure to represent mind map (nodes, text, parent-child relationships/connections).\n*   Rendering nodes and connections (SVG is good for connections).\n*   Handling dragging of nodes, panning/zooming of canvas.\n*   Logic for adding, editing, deleting nodes, and creating connections.\n*   Simulating collaborative updates.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Canvas could be SVG. Nodes are likely `div`s.\n*   **Node Accessibility:** Nodes must be keyboard focusable. Text within nodes must be editable using keyboard. Actions (delete, connect) should be invocable via keyboard for a selected node.\n*   **Connection Accessibility:** The relationship between connected nodes should be programmatically determinable if possible (e.g., `aria-owns` or by navigating a tree structure if one underlies the visual map).\n*   Keyboard navigation between nodes (e.g., Tab, or custom spatial/tree navigation).\n*   Responsive design for canvas and toolbar.\n*   Styling: Tailwind CSS. Extremely heavy JS for graphics, interactions, state management. SVG manipulation for connections is a key challenge.\n\n**Testing Identifiers:**\n*   Mindmap Canvas: `data-testid='mindmap-canvas'`\n*   A Mindmap Node: `data-testid='mindmap-node-root'`\n*   Add Node Button: `data-testid='btn-add-node'`\n*   Delete Node Button: `data-testid='btn-delete-node'`\n*   Connect Nodes Mode Toggle: `data-testid='btn-connect-mode'`\n*   Collaboration Updates Live Region: `data-testid='mindmap-collab-updates'`",
            "viewports_to_test": {"desktop": [1920, 1080], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Mindmap Canvas", "selector": "[data-testid='mindmap-canvas']", "points": 2},
                {"type": "element_presence", "name": "Add Node Button", "selector": "button[data-testid='btn-add-node']", "points": 1},
                {"type": "element_presence", "name": "Delete Node Button", "selector": "button[data-testid='btn-delete-node']", "points": 1, "note":"May be initially disabled"},
                {"type": "element_presence", "name": "Connect Nodes Mode Toggle", "selector": "button[data-testid='btn-connect-mode']", "points": 1},
                {
                    "type": "interaction", "name": "Add a New Node", "points": 5,
                    "initial_setup": [{"action_type":"get_element_count", "selector":"[data-testid^='mindmap-node-']", "store_as":"initialNodeCount"}],
                    "trigger_element": {"selector": "button[data-testid='btn-add-node']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"custom_script_evaluates_true", "script":"const finalNodeCount = document.querySelectorAll(\"[data-testid^='mindmap-node-']\").length; return finalNodeCount > window.initialNodeCount;"}
                    ]
                },
                {
                    "type": "interaction", "name": "Simulated Collaborative Node Add Appears", "points": 5,
                    "initial_setup": [{"action_type":"get_element_count", "selector":"[data-testid^='mindmap-node-']", "store_as":"initialNodeCountForCollab"}],
                    "wait_for_outcome_ms":4000, 
                    "expected_outcomes": [
                        {"outcome_type":"custom_script_evaluates_true", "script":"const finalNodeCount = document.querySelectorAll(\"[data-testid^='mindmap-node-']\").length; return finalNodeCount > window.initialNodeCountForCollab;", "note":"Checks if a node was added by 'another user'"},
                        {"outcome_type":"text_content_exists", "element_selector":"[data-testid='mindmap-collab-updates'][aria-live]", "expected_text_pattern": "added a node", "match_type":"contains", "note":"Checks live region announcement."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Nodes are Draggable (check for draggable attr or JS handlers)", "script": "const firstNode = document.querySelector('[data-testid^=mindmap-node-]:first-child'); if(!firstNode) return true; return firstNode.hasAttribute('draggable') || (typeof window.isNodeDraggable === 'function' && window.isNodeDraggable(firstNode));", "points": 3, "note":"Checking for draggability is complex without knowing implementation."},
                {"type": "custom_script_evaluates_true", "name": "Nodes are Keyboard Focusable and Text Editable", "script": "const firstNode = document.querySelector('[data-testid^=mindmap-node-]:first-child'); if(!firstNode) return true; return firstNode.hasAttribute('tabindex') && (firstNode.hasAttribute('contenteditable') || firstNode.querySelector('input, textarea'));", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC033_Photo_Gallery_with_Advanced_Filtering_Lightbox_and_Slideshow",
            "prompt_description": "Develop an advanced photo gallery page with features like complex filtering, a lightbox view for individual images, and an automated slideshow mode.\n\n**Page Components & Features:**\n1.  **Photo Grid (`data-testid='photo-grid'`):**\n    *   Displays thumbnails of photos in a responsive grid.\n    *   Each photo thumbnail: `data-testid='photo-thumb-ID'`. Clicking a thumbnail opens it in the Lightbox.\n2.  **Filtering Panel (`data-testid='gallery-filters'`)**\n    *   Filters for: Tags (multi-select checkboxes, e.g., 'Nature', 'City', 'Animals'), Date Taken (date range picker), Camera Model (dropdown).\n    *   'Apply Filters' button. Filters update the photo grid.\n3.  **Lightbox View (`data-testid='lightbox-view'`, initially hidden, overlay style):**\n    *   Displays the selected photo in a larger size.\n    *   Shows photo title, photographer, description.\n    *   'Previous' (`data-testid='lightbox-prev'`) and 'Next' (`data-testid='lightbox-next'`) buttons to navigate through filtered photos.\n    *   'Close' button (`data-testid='lightbox-close'`).\n    *   'Start Slideshow' button (`data-testid='lightbox-start-slideshow'`) within the lightbox.\n4.  **Slideshow Mode:**\n    *   When activated from lightbox, automatically cycles through the (filtered) photos every few seconds (e.g., 5 seconds).\n    *   Displays current photo, 'Pause Slideshow' button, and 'Exit Slideshow' button.\n\n**Simulated Data (JS):**\n*   An array of 15-20 photo objects, each with: `id`, `imageUrl`, `thumbnailUrl`, `title`, `photographer`, `description`, `tags` (array), `dateTaken`, `cameraModel`.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML.\n*   **Lightbox Accessibility:** Must be `role='dialog'`, trap focus, keyboard navigable (Prev/Next/Close with arrows/Esc). Image in lightbox needs accessible name.\n*   **Filter Accessibility:** All filter controls must be accessible with labels. Dynamic updates to grid must be announced if appropriate (`aria-live`).\n*   **Slideshow Accessibility:** Announce photo changes. Pause/Exit controls must be accessible. Ensure slideshow can be paused (WCAG requirement).\n*   Responsive design for grid, filters, lightbox.\n*   Styling: Tailwind CSS. Heavy JS for filtering, lightbox logic, slideshow timer and controls, dynamic rendering.\n\n**Testing Identifiers:**\n*   Photo Grid: `data-testid='photo-grid'`\n*   A Photo Thumbnail: `data-testid='photo-thumb-photo123'`\n*   Gallery Filters Panel: `data-testid='gallery-filters'`\n*   Tag Filter Checkbox (example): `data-testid='filter-tag-Nature'`\n*   Lightbox View: `data-testid='lightbox-view'`\n*   Lightbox Previous Button: `data-testid='lightbox-prev'`\n*   Lightbox Next Button: `data-testid='lightbox-next'`\n*   Lightbox Close Button: `data-testid='lightbox-close'`\n*   Lightbox Start Slideshow Button: `data-testid='lightbox-start-slideshow'`",
            "viewports_to_test": {"desktop": [1440, 900], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Photo Grid", "selector": "[data-testid='photo-grid']", "points": 1},
                {"type": "element_count", "name": "Photo Thumbnails (min 5)", "selector": "[data-testid='photo-grid'] [data-testid^='photo-thumb-']", "min_count": 5, "points": 2},
                {"type": "element_presence", "name": "Gallery Filters Panel", "selector": "[data-testid='gallery-filters']", "points": 1},
                {"type": "element_presence", "name": "Example Tag Filter Checkbox", "selector": "input[type='checkbox'][data-testid^='filter-tag-']", "points": 1},
                {"type": "element_presence", "name": "Lightbox View (Initially Hidden)", "selector": "[data-testid='lightbox-view'][role='dialog']", "check_visibility":"hidden", "points": 2},
                {
                    "type": "interaction", "name": "Open Lightbox and Navigate Photos", "points": 7,
                    "sequence": [
                        {"step_name": "Click Thumbnail to Open Lightbox", "trigger_element": {"selector": "[data-testid^='photo-thumb-']:first-child"}, "action":{"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [
                             {"outcome_type":"visibility_change", "element_selector":"[data-testid='lightbox-view']", "expected_visibility":"visible"},
                             {"outcome_type":"element_exists", "element_selector":"button[data-testid='lightbox-next']"},
                             {"outcome_type":"element_exists", "element_selector":"button[data-testid='lightbox-close']"}
                         ]},
                        {"step_name": "Click Next in Lightbox", "trigger_element": {"selector": "button[data-testid='lightbox-next']"}, "action":{"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [ 
                             {"outcome_type":"attribute_value_change_dynamic", "element_selector":"[data-testid='lightbox-view'] img", "attribute_name":"src", "initial_wait_ms":100, "poll_interval_ms":100, "num_checks":1, "note":"Lightbox image source should change."}
                         ]},
                        {"step_name": "Close Lightbox", "trigger_element": {"selector": "button[data-testid='lightbox-close']"}, "action":{"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [{"outcome_type":"visibility_change", "element_selector":"[data-testid='lightbox-view']", "expected_visibility":"hidden"}]
                        }
                    ]
                },
                {
                    "type": "interaction", "name": "Start and Pause Slideshow", "points": 5,
                    "initial_setup":[{"action_type":"click_element", "selector":"[data-testid^='photo-thumb-']:first-child"}], 
                    "wait_for_initial_setup_ms": 500,
                    "sequence": [
                        {"step_name": "Start Slideshow", "trigger_element": {"selector": "button[data-testid='lightbox-start-slideshow']"}, "action":{"type":"click"}, "wait_for_outcome_ms":5500, 
                         "expected_outcomes": [
                             {"outcome_type":"attribute_value_change_dynamic", "element_selector":"[data-testid='lightbox-view'] img", "attribute_name":"src", "initial_wait_ms":100, "poll_interval_ms":100, "num_checks":1, "note":"Image should change after slideshow starts and time passes."},
                             {"outcome_type":"element_exists", "element_selector":"button[aria-label*='Pause Slideshow']"}
                         ]},
                         {"step_name": "Pause Slideshow", "trigger_element": {"selector": "button[aria-label*='Pause Slideshow']"}, "action":{"type":"click"}, "wait_for_outcome_ms":300,
                         "expected_outcomes": [ 
                            {"outcome_type":"element_exists", "element_selector":"button[data-testid='lightbox-start-slideshow'], button[aria-label*='Start Slideshow'], button[aria-label*='Resume Slideshow']"}
                         ]}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Lightbox Traps Focus", "script": "document.querySelector('[data-testid^=photo-thumb-]:first-child').click(); return new Promise(resolve => setTimeout(() => { const activeEl = document.activeElement; const lightbox = document.querySelector('[data-testid=lightbox-view]'); resolve(lightbox.contains(activeEl)); document.querySelector('button[data-testid=lightbox-close]').click(); }, 500));", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC034_Personal_Finance_Manager_Dashboard_with_Transactions_and_Budgeting",
            "prompt_description": "Develop a dashboard for a personal finance management application. It should display account summaries, recent transactions, budgeting progress, and allow adding new transactions.\n\n**Page Components & Features:**\n1.  **Accounts Summary (`data-testid='accounts-summary'`)**\n    *   Display multiple account cards (e.g., 'Checking', 'Savings', 'Credit Card').\n    *   Each card (`data-testid='account-card-ACCOUNT_NAME'`) shows account name, current balance.\n2.  **Recent Transactions Table (`data-testid='transactions-table'`)**\n    *   Displays recent transactions: Date, Description, Category, Amount (positive for income, negative for expense).\n    *   Sortable by Date and Amount. Filterable by Category (dropdown `data-testid='filter-trans-category'`).\n3.  **Budgeting Progress Section (`data-testid='budgets-section'`)**\n    *   Display progress bars for 2-3 budget categories (e.g., 'Groceries: $150 / $400 spent').\n    *   Each budget progress bar: `data-testid='budget-progress-CATEGORY_NAME'`.\n4.  **Add Transaction Modal (`data-testid='add-transaction-modal'`, initially hidden)**\n    *   Form to add a new transaction: Date (date picker), Description (text input), Category (select dropdown), Amount (number input), Type (radio: Income/Expense).\n    *   'Save Transaction' button (`data-testid='btn-save-transaction'`). Saves (simulated) and updates relevant parts of dashboard (transactions table, budget progress, account balance).\n    *   Triggered by 'Add Transaction' button (`data-testid='btn-open-add-transaction-modal'`).\n5.  **Overall Spending Chart (Optional):** A pie chart showing spending distribution by category for the current month.\n\n**Simulated Logic (JS):**\n*   Manage state for accounts, transactions, budgets.\n*   Adding a transaction updates all relevant data structures and re-renders affected UI parts.\n*   Filtering/sorting transactions is client-side.\n*   Budget progress calculation based on transactions.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Tables and forms must be accessible.\n*   **Dynamic Updates & ARIA:** All dynamic data updates (balances, transaction list, budget bars) must be handled such that assistive technologies are aware of changes (e.g., `aria-live` regions for summaries, or ensuring focus moves to new/updated items if appropriate).\n*   Modal accessibility: Trap focus, Esc to close, ARIA roles.\n*   All interactive elements keyboard accessible.\n*   Responsive design. Tables and charts must adapt.\n*   Styling: Tailwind CSS. Heavy JS for data management, calculations, dynamic rendering, and modal interactions.\n\n**Testing Identifiers:**\n*   An Account Card: `data-testid='account-card-Checking'`\n*   Transactions Table: `data-testid='transactions-table'`\n*   Filter Transactions by Category Select: `data-testid='filter-trans-category'`\n*   A Budget Progress Bar: `data-testid='budget-progress-Groceries'`\n*   Add Transaction Modal: `data-testid='add-transaction-modal'`\n*   Save Transaction Button (in modal): `data-testid='btn-save-transaction'`\n*   Open Add Transaction Modal Button: `data-testid='btn-open-add-transaction-modal'`",
            "viewports_to_test": {"desktop": [1600, 900], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_count", "name": "Account Cards (min 2)", "selector": "[data-testid^='account-card-']", "min_count": 2, "points": 2},
                {"type": "element_presence", "name": "Transactions Table", "selector": "table[data-testid='transactions-table']", "points": 1},
                {"type": "element_presence", "name": "Filter Transactions by Category", "selector": "select[data-testid='filter-trans-category']", "points": 1},
                {"type": "element_count", "name": "Budget Progress Bars (min 2)", "selector": "[data-testid^='budget-progress-']", "min_count": 2, "points": 2},
                {"type": "element_presence", "name": "Add Transaction Modal (Initially Hidden)", "selector": "[data-testid='add-transaction-modal']", "check_visibility":"hidden", "points": 1},
                {"type": "element_presence", "name": "Open Add Transaction Modal Button", "selector": "button[data-testid='btn-open-add-transaction-modal']", "points": 1},
                {
                    "type": "interaction", "name": "Open Add Transaction Modal", "points": 4,
                    "trigger_element": {"selector": "button[data-testid='btn-open-add-transaction-modal']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"visibility_change", "element_selector":"[data-testid='add-transaction-modal']", "expected_visibility":"visible"},
                        {"outcome_type":"element_exists", "element_selector":"button[data-testid='btn-save-transaction']"}
                    ]
                },
                {
                    "type": "interaction", "name": "Add Expense Transaction and Verify Update (Simulated)", "points": 7,
                    "initial_setup": [
                        {"action_type":"click_element", "selector":"button[data-testid='btn-open-add-transaction-modal']"},
                        {"action_type":"execute_script", "script":"document.querySelector('[data-testid=add-transaction-modal] input[type=text]').value = 'Coffee'; document.querySelector('[data-testid=add-transaction-modal] input[type=number]').value = '5'; /* Fill other fields, select Expense type */"}
                    ],
                    "wait_for_initial_setup_ms": 500,
                    "trigger_element": {"selector": "button[data-testid='btn-save-transaction']"}, "action": {"type":"click"}, "wait_for_outcome_ms":1000,
                    "expected_outcomes": [
                        {"outcome_type":"text_content_change", "element_selector":"table[data-testid='transactions-table'] tbody", "expected_text":"Coffee", "match_type":"contains", "note":"New transaction appears in table."},
                        {"outcome_type":"custom_script_evaluates_true", "script":"/* Check if a budget bar value changed or account balance changed. Complex, depends on initial values. */ return true;", "note":"Hard to check precisely without knowing all data, but some UI update should occur beyond table."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Transaction Table is Sortable (aria-sort on TH)", "script": "return Array.from(document.querySelectorAll('table[data-testid=transactions-table] thead th')).some(th => th.hasAttribute('aria-sort') || th.querySelector('button[aria-sort]'));", "points": 3},
                {"type": "custom_script_evaluates_true", "name": "Budget Progress Bars Have ARIA Value Attributes", "script": "return Array.from(document.querySelectorAll('[data-testid^=budget-progress-] progress, [data-testid^=budget-progress-][role=progressbar]')).every(bar => bar.hasAttribute('aria-valuenow') && bar.hasAttribute('aria-valuemax'));", "points": 2}
            ]
        },
        {
            "prompt_id": "FPC035_Online_Gantt_Chart_Project_Planner_Page",
            "prompt_description": "Develop a webpage for a project planner featuring an interactive Gantt chart to visualize tasks, durations, and dependencies.\n\n**Page Components & Features:**\n1.  **Gantt Chart Area (`data-testid='gantt-chart-area'`):**\n    *   **Timeline Header:** Displays dates (days, weeks, or months depending on zoom level).\n    *   **Task List Pane (Left):** Shows a hierarchical list of tasks and sub-tasks with their names.\n    *   **Timeline Pane (Right):** Visualizes tasks as horizontal bars against the timeline. Bar length represents duration. \n    *   Task bars (`data-testid='gantt-task-ID'`) should be draggable to change start date/duration (challenging!).\n    *   Dependencies between tasks should be visually represented by lines/arrows connecting task bars.\n2.  **Toolbar (`data-testid='gantt-toolbar'`)**\n    *   'Add Task' button (`data-testid='btn-add-gantt-task'`).\n    *   Zoom In/Out buttons for timeline (`data-testid='btn-zoom-in'`, `data-testid='btn-zoom-out'`).\n    *   Controls to shift timeline view (Previous/Next period).\n3.  **Task Details Panel (Optional - opens on task click):** Displays/edits task name, start/end dates, duration, dependencies.\n\n**Simulated Logic (JS):**\n*   Data structure for tasks (ID, name, startDate, endDate/duration, dependencies array `[ predecessorTaskId, ... ]`).\n*   Dynamically render task list and task bars on timeline based on data.\n*   Calculate bar positions and lengths based on dates and zoom level.\n*   Render dependency lines (SVG is ideal).\n*   Handle dragging tasks (update start/end dates, re-render). This is very complex.\n*   Zooming changes the granularity of the timeline header and re-renders bars.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. The Gantt chart is a complex custom widget. Consider ARIA grid/treegrid for task list + timeline if appropriate. Task bars need accessible names and descriptions of their dates/duration.\n*   **Gantt Chart Accessibility:** This is extremely challenging. Provide keyboard navigation for tasks in the list and on the timeline. Allow adjusting task dates/duration via keyboard. Information conveyed by visual dependencies must have a textual alternative.\n*   Responsive design: Gantt chart will likely need horizontal scrolling on small screens. Ensure controls are usable.\n*   Styling: Tailwind CSS. MASSIVE custom JS for rendering, interactions, date calculations, SVG drawing for dependencies. This is a significant graphics and logic challenge.\n\n**Testing Identifiers:**\n*   Gantt Chart Area: `data-testid='gantt-chart-area'`\n*   A Task Bar on Timeline: `data-testid='gantt-task-task123'`\n*   Add Task Button: `data-testid='btn-add-gantt-task'`\n*   Zoom In Button: `data-testid='btn-zoom-in'`\n*   Task List Pane (if distinct): `data-testid='gantt-task-list-pane'`",
            "viewports_to_test": {"desktop": [1920, 1080], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Gantt Chart Area", "selector": "[data-testid='gantt-chart-area']", "points": 2},
                {"type": "element_count", "name": "Task Bars on Timeline (min 2)", "selector": "[data-testid='gantt-chart-area'] [data-testid^='gantt-task-']", "min_count": 2, "points": 2, "note":"Assumes tasks are rendered within the chart area"},
                {"type": "element_presence", "name": "Add Task Button", "selector": "button[data-testid='btn-add-gantt-task']", "points": 1},
                {"type": "element_presence", "name": "Zoom In Button", "selector": "button[data-testid='btn-zoom-in']", "points": 1},
                {
                    "type": "interaction", "name": "Add New Task to Gantt", "points": 5,
                    "initial_setup": [{"action_type":"get_element_count", "selector":"[data-testid^='gantt-task-']", "store_as":"initialTaskCount"}],
                    "trigger_element": {"selector": "button[data-testid='btn-add-gantt-task']"}, "action": {"type":"click"}, 
                    "post_actions_if_modal": [{"action_type":"execute_script", "script":"/* Fill modal for new task */ document.querySelector('#taskNameInput').value='New Gantt Task'; document.querySelector('#saveTaskModalBtn').click();"}],
                    "wait_for_outcome_ms":1000,
                    "expected_outcomes": [
                        {"outcome_type":"custom_script_evaluates_true", "script":"const finalTaskCount = document.querySelectorAll(\"[data-testid^='gantt-task-']\").length; return finalTaskCount > window.initialTaskCount;"}
                    ]
                },
                {
                    "type": "interaction", "name": "Zoom In Changes Timeline Scale (Visual/Attribute Check)", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"window.initialTimelineWidth = document.querySelector('[data-testid=gantt-chart-area] .timeline-content-wrapper').scrollWidth;"}], 
                    "trigger_element": {"selector": "button[data-testid='btn-zoom-in']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"custom_script_evaluates_true", "script":"const finalTimelineWidth = document.querySelector('[data-testid=gantt-chart-area] .timeline-content-wrapper').scrollWidth; return finalTimelineWidth > window.initialTimelineWidth;", "note":"Timeline content should get wider if zoom reveals more detail."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Task Bars Have Accessible Labels/Descriptions", "script": "return Array.from(document.querySelectorAll('[data-testid^=gantt-task-]')).every(task => task.getAttribute('aria-label') || task.getAttribute('aria-labelledby') || task.textContent.trim().length > 3);", "points": 3},
                {"type": "element_presence", "name": "Dependency Lines (SVG paths/lines)", "selector": "[data-testid='gantt-chart-area'] svg path, [data-testid='gantt-chart-area'] svg line", "points": 2, "optional":true, "note":"Checks for visual dependency lines if implemented with SVG."}
            ]
        },
                {
            "prompt_id": "FPC036_Live_Stock_Trading_Dashboard_Page",
            "prompt_description": "Develop a simplified but dynamic stock trading dashboard interface. It should display (simulated) live stock prices, historical charts, an order entry panel, and a portfolio overview.\n\n**Page Components & Features:**\n1.  **Watchlist (`data-testid='watchlist-panel'`)**\n    *   A list of stock symbols (e.g., AAPL, GOOGL, MSFT) with their current (simulated live-updating) price and percentage change.\n    *   Clicking a stock symbol updates the main chart and order entry panel for that stock.\n    *   Each stock in watchlist: `data-testid='watchlist-stock-SYMBOL'`.\n2.  **Main Chart Area (`data-testid='stock-chart-area'`)**\n    *   Displays a historical price chart (line or candlestick - Chart.js or similar) for the selected stock.\n    *   Controls to change time range (e.g., 1D, 1W, 1M, 1Y, MAX).\n3.  **Order Entry Panel (`data-testid='order-entry-panel'`)**\n    *   Inputs for: Stock Symbol (pre-filled from selection), Order Type (radio: Buy/Sell), Quantity, Price Type (radio: Market/Limit), Limit Price (if Limit selected).\n    *   'Preview Order' button (`data-testid='btn-preview-order'`).\n    *   Order Preview/Confirmation step (modal or inline - `data-testid='order-confirmation-view'`) showing order details and 'Submit Order' button (`data-testid='btn-submit-order'`).\n4.  **Portfolio Overview (`data-testid='portfolio-overview'`)**\n    *   Displays current holdings (Stock Symbol, Quantity, Current Value) and total portfolio value.\n5.  **Live Data Simulation (JS):**\n    *   Use `setInterval` to frequently (e.g., every 2-3 seconds) update the prices in the watchlist and portfolio (small random changes). Update chart if it's showing live data for last day.\n    *   Submitting an order (simulated) updates the portfolio.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML.\n*   **Live Data & ARIA:** Price updates and percentage changes MUST be announced by `aria-live` regions, or ensure the relevant elements have `aria-live` themselves. Pay attention to not making announcements too verbose or frequent. `aria-atomic` might be useful.\n*   **Chart Accessibility:** Accessible name, keyboard navigation for time range controls. Data points should be perceivable.\n*   **Order Form Accessibility:** All form elements must have labels. Complex interactions like conditional display of Limit Price field must manage focus and ARIA states.\n*   Responsive design. Charts and complex forms need careful handling on mobile.\n*   Styling: Tailwind CSS. Extremely JS-heavy for live data simulation, chart updates, order logic, portfolio calculations, and dynamic UI rendering.\n\n**Testing Identifiers:**\n*   A Stock in Watchlist: `data-testid='watchlist-stock-AAPL'`\n*   Stock Chart Area: `data-testid='stock-chart-area'` (canvas/svg inside)\n*   Order Entry Panel: `data-testid='order-entry-panel'`\n*   Quantity Input in Order Form: `data-testid='input-order-quantity'`\n*   Preview Order Button: `data-testid='btn-preview-order'`\n*   Submit Order Button: `data-testid='btn-submit-order'`\n*   Portfolio Overview Area: `data-testid='portfolio-overview'`\n*   Live Price Update Region (for a stock): `data-testid='price-update-AAPL-live'` (model needs to create this pattern)",
            "viewports_to_test": {"desktop": [1920, 1080], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Watchlist Panel", "selector": "[data-testid='watchlist-panel']", "points": 1},
                {"type": "element_count", "name": "Watchlist Stocks (min 2)", "selector": "[data-testid^='watchlist-stock-']", "min_count": 2, "points": 1},
                {"type": "element_presence", "name": "Stock Chart Area", "selector": "[data-testid='stock-chart-area']", "points": 1},
                {"type": "element_presence", "name": "Order Entry Panel", "selector": "[data-testid='order-entry-panel']", "points": 1},
                {"type": "element_presence", "name": "Portfolio Overview", "selector": "[data-testid='portfolio-overview']", "points": 1},
                {
                    "type": "interaction", "name": "Select Stock from Watchlist Updates Chart/Order Panel", "points": 6,
                    "initial_setup": [{"action_type":"execute_script", "script":"window.initialChartSymbol = document.querySelector('[data-testid=order-entry-panel] input[name=symbol]').value;"}],
                    "trigger_element": {"selector": "[data-testid='watchlist-stock-GOOGL']", "note":"Assuming GOOGL is different from initial"}, "action": {"type":"click"}, "wait_for_outcome_ms":1000, 
                    "expected_outcomes": [
                        {"outcome_type":"attribute_value_change_dynamic", "element_selector":"[data-testid='order-entry-panel'] input[name=symbol]", "attribute_name":"value", "expected_value_not_initial":true, "note":"Order panel symbol should update."},
                        {"outcome_type":"custom_script_evaluates_true", "script":"/* Check if chart data/title changed. Needs chart library inspection or a reliable title element. */ return true;", "note":"Chart content should reflect new stock."}
                    ]
                },
                {
                    "type": "interaction", "name": "Preview and Submit Order (Simulated)", "points": 6,
                    "sequence": [
                        {"step_name": "Fill Order Form", "action":{"type":"execute_script", "script":"document.querySelector('[data-testid=input-order-quantity]').value='10'; /* Select Buy, Market etc. */"}},
                        {"step_name": "Click Preview Order", "trigger_element": {"selector":"button[data-testid='btn-preview-order']"}, "action":{"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [{"outcome_type":"visibility_change", "element_selector":"[data-testid='order-confirmation-view']", "expected_visibility":"visible"}]},
                        {"step_name": "Click Submit Order", "trigger_element": {"selector":"button[data-testid='btn-submit-order']"}, "action":{"type":"click"}, "wait_for_outcome_ms":1000,
                         "expected_outcomes": [{"outcome_type":"text_content_change_dynamic", "element_selector":"[data-testid='portfolio-overview']", "initial_wait_ms":100, "poll_interval_ms":100, "num_checks":1, "note":"Portfolio value/holdings should update."}]}
                    ]
                },
                {"type": "text_content_change_dynamic", "name": "Live Price Update in Watchlist", "element_selector": "[data-testid='watchlist-stock-AAPL'] .price-display", 
                    "initial_wait_ms": 500, "poll_interval_ms": 2500, "num_checks": 2, 
                    "points": 4, "note": "Verifies that a price display element changes its text content over time."
                },
                {"type": "custom_script_evaluates_true", "name": "Order Form Inputs are Accessible with Labels", "script": "return Array.from(document.querySelectorAll('[data-testid=order-entry-panel] input:not([type=radio]):not([type=submit]), [data-testid=order-entry-panel] select')).every(el => el.id && document.querySelector(`label[for='${el.id}']`));", "points": 3},
                {"type": "element_presence", "name": "ARIA Live Region for Price Updates", "selector": "[data-testid^='price-update-'][aria-live]", "points": 2, "optional":true}
            ]
        },
        {
            "prompt_id": "FPC037_3D_Product_Customizer_Interface_Simulated_2D",
            "prompt_description": "Develop a product customizer page where users can change colors and features of a product (e.g., a pair of sneakers). The product is displayed as a main image that updates based on selections. This is a 2D simulation of a 3D customizer.\n\n**Page Components & Features:**\n1.  **Main Product Display Area (`data-testid='product-display-area'`)**\n    *   A large area showing the customizable product. This could be achieved by layering multiple transparent PNG images (for different parts like shoe body, laces, sole) or by using an SVG where part fills/strokes can be changed.\n    *   The base product image container: `data-testid='product-image-base'`.\n    *   Overlay layers for customizable parts (e.g. `data-testid='product-part-laces'`, `data-testid='product-part-sole'`).\n2.  **Customization Options Panel (`data-testid='customization-panel'`)**\n    *   Sections for different customizable parts (e.g., 'Main Color', 'Laces', 'Sole', 'Logo Accent').\n    *   For each part, provide color swatches (clickable `div`s or buttons, `data-testid='color-swatch-PART-COLOR_NAME'`) or material/texture choices (e.g., 'Leather', 'Mesh').\n    *   Selecting an option updates the corresponding part in the Main Product Display Area.\n3.  **Price Display (`data-testid='customized-price'`)**\n    *   Shows the base price and updates dynamically if certain customizations add cost.\n4.  **Summary/Action Buttons:**\n    *   'Reset to Default' button (`data-testid='btn-reset-customization'`).\n    *   'Add to Cart' / 'Save Design' button.\n\n**Simulated Logic (JS):**\n*   Manage the state of selected options for each customizable part.\n*   When an option is selected, update the main product display: \n    *   If using layered PNGs: change the `src` or visibility of specific image layers.\n    *   If using SVG: change `fill` or `stroke` attributes of specific SVG elements.\n*   Update price based on selected options (predefined costs for certain premium options).\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML.\n*   **Visual Customizer Accessibility:** This is key. Color swatches and material choices MUST be keyboard accessible. The selected state must be visually clear AND programmatically determinable (`aria-selected` or `aria-checked`). Changes to the product image should be announced if they are not immediately obvious to a non-visual user, or an alternative textual description of the current configuration should be available.\n*   Price updates should be announced via an `aria-live` region.\n*   Responsive design for display area and options panel.\n*   Styling: Tailwind CSS. Significant JS for state management, dynamic image/SVG updates. Custom CSS for color swatches, layered image display if used.\n\n**Testing Identifiers:**\n*   Product Display Area: `data-testid='product-display-area'`\n*   Product Image Base Layer: `data-testid='product-image-base'`\n*   Product Part Laces Layer/SVG Element: `data-testid='product-part-laces'`\n*   Customization Panel: `data-testid='customization-panel'`\n*   A Color Swatch (e.g., for Laces, color Red): `data-testid='color-swatch-Laces-Red'`\n*   Customized Price Display: `data-testid='customized-price'`\n*   Reset Customization Button: `data-testid='btn-reset-customization'`\n*   Price Update Live Region: `data-testid='price-update-live'`",
            "viewports_to_test": {"desktop": [1440, 900], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Product Display Area", "selector": "[data-testid='product-display-area']", "points": 2},
                {"type": "element_presence", "name": "Product Base Image/Layer", "selector": "[data-testid='product-image-base']", "points": 1},
                {"type": "element_presence", "name": "Customization Panel", "selector": "[data-testid='customization-panel']", "points": 1},
                {"type": "element_count", "name": "Color Swatches (min 5 total)", "selector": "[data-testid^='color-swatch-']", "min_count": 5, "points": 2},
                {"type": "element_presence", "name": "Customized Price Display", "selector": "[data-testid='customized-price']", "points": 1},
                {"type": "element_presence", "name": "Reset Button", "selector": "button[data-testid='btn-reset-customization']", "points": 1},
                {
                    "type": "interaction", "name": "Select Color Swatch Updates Product Appearance (Simulated)", "points": 7,
                    "initial_setup": [{"action_type":"execute_script", "script":"window.initialLacesAppearance = document.querySelector('[data-testid=product-part-laces]').getAttribute('src') || document.querySelector('[data-testid=product-part-laces]').style.fill;"}],
                    "trigger_element": {"selector": "[data-testid^='color-swatch-Laces-']:not([aria-selected=true]):first-of-type", "note":"Select a non-default swatch for Laces"}, "action": {"type":"click"},
                    "wait_for_outcome_ms":1000, 
                    "expected_outcomes": [
                        {"outcome_type":"custom_script_evaluates_true", "script":"const newLacesAppearance = document.querySelector('[data-testid=product-part-laces]').getAttribute('src') || document.querySelector('[data-testid=product-part-laces]').style.fill; return newLacesAppearance !== window.initialLacesAppearance;", "note":"Checks if laces image src or fill style changed."}
                    ]
                },
                {
                    "type": "interaction", "name": "Select Premium Option Updates Price", "points": 5,
                    "initial_setup": [{"action_type":"get_text_content", "selector":"[data-testid='customized-price']", "store_as":"initialPrice"}],
                    "trigger_element": {"selector": "[data-testid='color-swatch-MainColor-Gold']", "note":"Assuming 'Gold' is a premium color that changes price"}, "action": {"type":"click"},
                    "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"text_content_change_dynamic", "element_selector":"[data-testid='customized-price']", "initial_wait_ms":100, "poll_interval_ms":100, "num_checks":1, "note":"Price text should change from initial."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Color Swatches are Accessible (Keyboard & ARIA)", "script": "return Array.from(document.querySelectorAll('[data-testid^=color-swatch-]')).every(sw => (sw.tagName === 'BUTTON' || sw.getAttribute('role') === 'radio' || sw.getAttribute('role') === 'button') && sw.hasAttribute('aria-label') && (sw.hasAttribute('aria-selected') || sw.hasAttribute('aria-checked')));", "points": 4}
            ]
        },
        {
            "prompt_id": "FPC038_AI_Chatbot_Interface_with_Streaming_and_Rich_Responses_Page",
            "prompt_description": "Develop an AI chatbot interface that supports streaming text responses, rich response types (like buttons or cards), and maintains conversation history.\n\n**Page Components & Features:**\n1.  **Conversation Log (`data-testid='chat-log'`)**\n    *   Displays messages from both user and bot in chronological order.\n    *   User messages aligned to one side, bot messages to the other.\n    *   Each message block: `data-testid='message-USER_OR_BOT-TIMESTAMP'`.\n    *   **Streaming Bot Responses:** When the bot replies, its text should appear word-by-word or sentence-by-sentence, not all at once.\n    *   **Rich Responses:** Bot can respond with:\n        *   Simple text.\n        *   Text with suggestion buttons/chips (e.g., 'Yes', 'No', 'Tell me more'). Clicking a chip sends it as user input. `data-testid='suggestion-chip'`.\n        *   Simple information cards (e.g., a product card with image, title, link).\n2.  **Chat Input Area (`data-testid='chat-input-area'`)**\n    *   Text input (`<textarea>` preferred for multi-line, `data-testid='user-chat-input'`) for user to type messages.\n    *   'Send' button (`data-testid='send-message-btn'`) or Enter key to submit.\n3.  **Bot Status Indicator (Optional):** Shows when bot is 'typing...' (`data-testid='bot-typing-indicator'`).\n\n**Simulated Logic (JS):**\n*   Maintain conversation history array.\n*   When user sends message, add to log. Simulate bot 'thinking' (setTimeout), then 'typing' (show indicator), then stream response.\n*   Have predefined bot responses based on simple keywords in user input. Some responses should be plain text, others should include suggestion chips or a card.\n*   Streaming: Use `setInterval` or recursive `setTimeout` to append parts of the bot's message to its message block in the log.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Conversation log is a list or series of articles.\n*   **Chat Log Accessibility:** New messages (both user and bot) MUST be announced by an `aria-live` region (could be the log itself or a dedicated announcer). The log should be keyboard scrollable/navigable if it gets long.\n*   **Streaming Text Accessibility:** Ensure screen readers can follow along with streaming text (e.g., by updating the `aria-live` region incrementally or ensuring the final complete message is fully readable).\n*   **Rich Response Accessibility:** Suggestion chips must be focusable buttons. Cards must be structured semantically.\n*   Chat input needs a label. Send button must be accessible.\n*   Responsive design.\n*   Styling: Tailwind CSS. Very JS-heavy for conversation logic, streaming, dynamic rendering of rich responses.\n\n**Testing Identifiers:**\n*   Chat Log Area: `data-testid='chat-log'`\n*   A User Message in Log: `data-testid='message-USER-...'`\n*   A Bot Message in Log: `data-testid='message-BOT-...'`\n*   User Chat Input Textarea: `data-testid='user-chat-input'`\n*   Send Message Button: `data-testid='send-message-btn'`\n*   A Suggestion Chip (if rendered): `data-testid='suggestion-chip-Yes'`\n*   Bot Typing Indicator: `data-testid='bot-typing-indicator'`\n*   Chat Log Live Announcer (if separate): `data-testid='chat-live-announcer'`",
            "viewports_to_test": {"desktop": [1024, 768], "mobile": [375, 667]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Chat Log Area", "selector": "[data-testid='chat-log']", "points": 2},
                {"type": "element_presence", "name": "User Chat Input", "selector": "textarea[data-testid='user-chat-input'], input[data-testid='user-chat-input']", "points": 1},
                {"type": "element_presence", "name": "Send Message Button", "selector": "button[data-testid='send-message-btn']", "points": 1},
                {"type": "element_presence", "name": "Bot Typing Indicator (may be initially hidden)", "selector": "[data-testid='bot-typing-indicator']", "points": 1},
                {
                    "type": "interaction", "name": "Send Message, Bot Responds (Streaming Check)", "points": 8,
                    "initial_setup": [{"action_type":"execute_script", "script":"document.querySelector('[data-testid=user-chat-input]').value = 'Hello bot';"}],
                    "trigger_element": {"selector": "button[data-testid='send-message-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":4000, 
                    "expected_outcomes": [
                        {"outcome_type":"element_count", "parent_element_selector":"[data-testid='chat-log']", "child_element_selector":"[data-testid^='message-USER-']", "min_count":1, "note":"User message appears."},
                        {"outcome_type":"element_count", "parent_element_selector":"[data-testid='chat-log']", "child_element_selector":"[data-testid^='message-BOT-']", "min_count":1, "note":"Bot message appears."},
                        {"outcome_type":"text_content_change_dynamic", "element_selector":"[data-testid^='message-BOT-']:last-child .message-content", 
                         "initial_wait_ms":500, "poll_interval_ms":500, "num_checks":3, "look_for_change":true, "note":"Bot response text content should change over time (streaming)."}
                    ]
                },
                {
                    "type": "interaction", "name": "Bot Responds with Suggestion Chips", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"document.querySelector('[data-testid=user-chat-input]').value = 'Show me options';"}], 
                    "trigger_element": {"selector": "button[data-testid='send-message-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":2000,
                    "expected_outcomes": [
                        {"outcome_type":"element_count", "parent_element_selector":"[data-testid^='message-BOT-']:last-child", "child_element_selector":"button[data-testid^='suggestion-chip-']", "min_count":2, "note":"Bot response contains suggestion chips."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Chat Log is ARIA Live Region or Contains One", "script": "const chatLog = document.querySelector('[data-testid=chat-log]'); return chatLog && (chatLog.getAttribute('aria-live') || chatLog.querySelector('[aria-live]'));", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC039_Interactive_Data_Science_Notebook_UI_Page_Simplified_Jupyter",
            "prompt_description": "Develop a simplified web-based data science notebook interface, like a very basic Jupyter or ObservableHQ. Users can create cells for markdown text or (simulated) executable code (JavaScript).\n\n**Page Components & Features:**\n1.  **Notebook Area (`data-testid='notebook-area'`)**\n    *   A vertical sequence of cells.\n    *   Each cell (`data-testid='notebook-cell-ID'`) can be of type 'Markdown' or 'Code'.\n2.  **Cell Structure:**\n    *   **Markdown Cell:** \n        *   Edit Mode: A textarea (`data-testid='cell-ID-markdown-editor'`) for writing markdown.\n        *   Render Mode: Displays the rendered HTML from the markdown.\n        *   Toggle between Edit/Render (e.g., double-click to edit, blur or button to render).\n    *   **Code Cell (JavaScript):**\n        *   Code Editor: A textarea or `contenteditable div` (`data-testid='cell-ID-code-editor'`) for writing JS code.\n        *   'Run Cell' button (`data-testid='cell-ID-run-btn'`).\n        *   Output Area (`data-testid='cell-ID-output-area'`): Displays `console.log` output or return value from simulated execution.\n    *   **Common Cell Controls:** Buttons to 'Move Up', 'Move Down', 'Delete Cell', 'Add Cell Below' (specify type Markdown/Code).\n3.  **Global Toolbar (Optional):** 'Save Notebook', 'Add Cell' buttons.\n\n**Simulated Logic (JS):**\n*   Maintain an array of cell objects (id, type, content, output for code cells).\n*   Markdown rendering (can use a simple library or basic regex replacement for common syntax like #, *, _).\n*   Code cell execution: Safely `eval()` the JS code (or use a sandboxed iframe if more robust). Capture `console.log` and return values to display in output area.\n*   Adding, deleting, reordering cells updates the JS data structure and re-renders the notebook.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML.\n*   **Cell Accessibility:** Each cell (and its internal editor/output) must be keyboard navigable. Focus management when switching modes (edit/render markdown) or running code is crucial.\n*   **Keyboard Shortcuts:** Implement basic shortcuts (e.g., Shift+Enter to run code cell and select/create next cell).\n*   Code editor might have basic syntax highlighting (optional extra complexity).\n*   Responsive design for notebook layout.\n*   Styling: Tailwind CSS. Extremely JS-heavy for cell management, rendering, execution, and interactions.\n\n**Testing Identifiers:**\n*   Notebook Area: `data-testid='notebook-area'`\n*   A Notebook Cell: `data-testid='notebook-cell-cell123'`\n*   Markdown Editor in a Cell: `data-testid='cell-cell123-markdown-editor'`\n*   Code Editor in a Cell: `data-testid='cell-cell123-code-editor'`\n*   Run Cell Button for a Code Cell: `data-testid='cell-cell123-run-btn'`\n*   Output Area for a Code Cell: `data-testid='cell-cell123-output-area'`\n*   Add Code Cell Button (Global or per cell): `data-testid='btn-add-code-cell'`",
            "viewports_to_test": {"desktop": [1600, 900], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Notebook Area", "selector": "[data-testid='notebook-area']", "points": 1},
                {"type": "element_count", "name": "Initial Notebook Cells (min 1)", "selector": "[data-testid='notebook-area'] [data-testid^='notebook-cell-']", "min_count": 1, "points": 1},
                {"type": "element_presence", "name": "Add Code Cell Button", "selector": "button[data-testid='btn-add-code-cell']", "points": 1},
                {
                    "type": "interaction", "name": "Add and Run Code Cell", "points": 8,
                    "sequence": [
                        {"step_name": "Click Add Code Cell", "trigger_element": {"selector": "button[data-testid='btn-add-code-cell']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [
                             {"outcome_type":"element_exists", "element_selector":"[data-testid$='-code-editor']", "note":"A code editor for the new cell should exist."},
                             {"outcome_type":"element_exists", "element_selector":"[data-testid$='-run-btn']", "note":"A run button for new cell."}
                         ]},
                        {"step_name": "Enter Code and Run", "action":{"type":"execute_script", "script":"const editor = document.querySelector('[data-testid$=-code-editor]:last-of-type'); if(editor.value !== undefined) editor.value = 'console.log(\"JS cell executed!\");'; else editor.textContent = 'console.log(\"JS cell executed!\");';"},
                         "post_actions":[{"action_type":"click_element", "selector":"[data-testid$='-run-btn']:last-of-type"}], "wait_after_post_action_ms":500,
                         "expected_outcomes": [{"outcome_type":"text_content_change", "element_selector":"[data-testid$='-output-area']:last-of-type", "expected_text":"JS cell executed!", "match_type":"contains"}]}
                    ]
                },
                {
                    "type": "interaction", "name": "Edit and Render Markdown Cell", "points": 6,
                    "initial_setup": [
                        {"action_type":"execute_script", "script":"/* Click Add Markdown Cell Button if exists, then get editor */ document.querySelector('button[data-testid=btn-add-markdown-cell]').click();"}
                    ],
                    "wait_for_initial_setup_ms": 500,
                    "sequence": [
                        {"step_name": "Enter Markdown", "action":{"type":"execute_script", "script":"const mdEditor = document.querySelector('[data-testid$=-markdown-editor]:last-of-type'); if(mdEditor.value !== undefined) mdEditor.value = '# Hello Markdown'; else mdEditor.textContent = '# Hello Markdown';"}},
                        {"step_name": "Trigger Render (e.g., blur or click render button)", "trigger_element":{"selector":"[data-testid$=-markdown-editor]:last-of-type"}, "action":{"type":"dispatch_event", "event_name":"blur"},  "wait_for_outcome_ms":500,
                         "expected_outcomes": [{"outcome_type":"element_exists", "element_selector":"[data-testid^='notebook-cell-'] h1:contains('Hello Markdown')", "note":"Rendered H1 should exist."}]}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Cells are Keyboard Navigable (Up/Down, Focus)", "script": "/* Basic: check if cells have tabindex and can receive focus. Deeper: arrow key nav. */ return Array.from(document.querySelectorAll('[data-testid^=notebook-cell-]')).every(cell => cell.hasAttribute('tabindex'));", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC040_Simplified_Operating_System_Desktop_Environment_Page",
            "prompt_description": "Develop an extremely simplified web-based simulation of an operating system desktop environment. This is a highly complex challenge focusing on window management and basic app interaction.\n\n**Core Components & Features:**\n1.  **Desktop Area (`data-testid='os-desktop'`)**\n    *   The main background area where windows will appear.\n2.  **Taskbar (`data-testid='os-taskbar'`, fixed at bottom or top)**\n    *   'Start Menu' button (simulated - `data-testid='start-menu-btn'`). Clicking it opens a simple menu (`data-testid='start-menu-popup'`) with 2-3 'app' launch icons (e.g., 'Notepad', 'Calculator').\n    *   Area to show icons/titles of currently 'open' (visible) windows. Clicking an icon focuses/brings to front the corresponding window.\n3.  **Windows (`data-testid='app-window-APP_NAME'`)**\n    *   Draggable `div`s that represent application windows.\n    *   Each window has a title bar (showing app name, `data-testid='window-titlebar-APP_NAME'`) which is used for dragging.\n    *   Window controls in title bar: 'Minimize' (hides window content, shows icon in taskbar - simulated), 'Maximize' (expands window to fill desktop area - simulated), 'Close' (removes window).\n    *   Window content area. Example 'apps':\n        *   **Notepad App:** A simple textarea within its window.\n        *   **Calculator App:** Basic calculator UI (buttons 0-9, +, -, *, /, =, C) with a display. (Functional calculator).\n4.  **Window Management Logic (JS - The Core Challenge):**\n    *   Launching 'apps' from Start Menu creates new window instances.\n    *   Dragging windows changes their X/Y position.\n    *   Managing z-index: clicking a window brings it to the front.\n    *   Minimize/Maximize/Close functionality.\n    *   Ensure windows generally stay within the bounds of the 'desktop' area.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Windows are likely `div`s with appropriate `role='dialog'` (if modal-like when active) or `role='application'` if very complex.\n*   **Window Accessibility:** This is paramount and very hard. \n    *   Windows must be keyboard navigable (e.g., Alt+Tab or Ctrl+Tab to cycle through open windows - simulated by JS changing focus and z-index).\n    *   Window controls (min, max, close) must be accessible buttons.\n    *   Content within each 'app' window must be accessible (e.g., textarea in Notepad, calculator buttons).\n*   Focus management is critical: active window, elements within window, taskbar interactions.\n*   Responsive design is less of a priority for this specific simulation, focus on desktop experience, but it shouldn't completely break on smaller views.\n*   Styling: Tailwind CSS. MASSIVE JS for window creation, dragging, resizing (optional), z-index management, taskbar updates, app logic (calculator).\n\n**Testing Identifiers:**\n*   OS Desktop Area: `data-testid='os-desktop'`\n*   OS Taskbar: `data-testid='os-taskbar'`\n*   Start Menu Button: `data-testid='start-menu-btn'`\n*   Start Menu Popup: `data-testid='start-menu-popup'`\n*   A Launched App Window (e.g., Notepad): `data-testid='app-window-Notepad'`\n*   Titlebar of a Window: `data-testid='window-titlebar-Notepad'`\n*   Close button on a Window: `data-testid='window-close-btn-Notepad'`\n*   Notepad App's Textarea: `data-testid='notepad-textarea'`\n*   Calculator App's Display: `data-testid='calculator-display'`\n*   Calculator App's Button '7': `data-testid='calc-btn-7'`",
            "viewports_to_test": {"desktop": [1920, 1080]}, 
            "adherence_checks": [
                {"type": "element_presence", "name": "OS Desktop Area", "selector": "[data-testid='os-desktop']", "points": 1},
                {"type": "element_presence", "name": "OS Taskbar", "selector": "[data-testid='os-taskbar']", "points": 1},
                {"type": "element_presence", "name": "Start Menu Button", "selector": "button[data-testid='start-menu-btn']", "points": 1},
                {
                    "type": "interaction", "name": "Open Start Menu and Launch 'Notepad' App", "points": 7,
                    "sequence": [
                        {"step_name": "Open Start Menu", "trigger_element": {"selector": "button[data-testid='start-menu-btn']"}, "action":{"type":"click"}, "wait_for_outcome_ms":300,
                         "expected_outcomes": [{"outcome_type":"visibility_change", "element_selector":"[data-testid='start-menu-popup']", "expected_visibility":"visible"}]
                        },
                        {"step_name": "Click 'Notepad' in Menu", "trigger_element": {"selector": "[data-testid='start-menu-popup'] button:contains('Notepad')"}, "action":{"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [
                             {"outcome_type":"element_exists", "element_selector":"[data-testid='app-window-Notepad']"},
                             {"outcome_type":"element_exists", "element_selector":"[data-testid='window-titlebar-Notepad']"},
                             {"outcome_type":"element_exists", "element_selector":"textarea[data-testid='notepad-textarea']"}
                         ]}
                    ]
                },
                {
                    "type": "interaction", "name": "Drag Notepad Window", "points": 5, "viewports":["desktop"],
                    "initial_setup": [ 
                        {"action_type":"execute_script", "script":"if(!document.querySelector('[data-testid=app-window-Notepad]')) { document.querySelector('button[data-testid=start-menu-btn]').click(); setTimeout(() => document.querySelector('[data-testid=start-menu-popup] button:contains(Notepad)').click(), 100); }"}
                    ],
                    "wait_for_initial_setup_ms": 700,
                    "pre_action_asserts": [{"type":"element_exists", "selector":"[data-testid='window-titlebar-Notepad']"}],
                    "trigger_element": {"selector": "[data-testid='window-titlebar-Notepad']", "note":"Drag by its title bar"},
                    "action": {"type":"drag_by_offset", "x_offset":150, "y_offset":100},
                    "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"position_change", "element_selector":"[data-testid='app-window-Notepad']", "min_x_diff":100, "min_y_diff":50, "note":"Window position should change significantly."}
                    ]
                },
                {
                    "type": "interaction", "name": "Close Notepad Window", "points": 4,
                     "initial_setup": [ 
                        {"action_type":"execute_script", "script":"if(!document.querySelector('[data-testid=app-window-Notepad]')) { document.querySelector('button[data-testid=start-menu-btn]').click(); setTimeout(() => document.querySelector('[data-testid=start-menu-popup] button:contains(Notepad)').click(), 100); }"}
                    ],
                    "wait_for_initial_setup_ms": 700,
                    "trigger_element": {"selector": "[data-testid='app-window-Notepad'] [data-testid^='window-close-btn-']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type":"element_absent", "element_selector":"[data-testid='app-window-Notepad']"}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Calculator Basic Function (1+2=3)", "points": 4, "optional":true,
                 "script": "try { /* Launch Calculator if not open */ document.querySelector('button[data-testid=calc-btn-1]').click(); document.querySelector('button[data-testid=calc-btn-plus]').click(); document.querySelector('button[data-testid=calc-btn-2]').click(); document.querySelector('button[data-testid=calc-btn-equals]').click(); return document.querySelector('[data-testid=calculator-display]').textContent.includes('3'); } catch(e) { return false; }", "note":"Requires calculator app to be launched and functional."}
            ]
        }
    ]
}